{"title":"8086汇编学习笔记_02","uid":"2872e18edcfe70db45537a6abab5f8bb","slug":"02","date":"2023-07-25T03:20:34.000Z","updated":"2023-08-08T13:26:25.376Z","comments":true,"path":"api/articles/02.json","keywords":null,"cover":"../picture/10.png","content":"<h2 id=\"汇编语言程序\"><a href=\"#汇编语言程序\" class=\"headerlink\" title=\"汇编语言程序\"></a>汇编语言程序</h2><h4 id=\"1-一个源程序从写出到执行的过程\"><a href=\"#1-一个源程序从写出到执行的过程\" class=\"headerlink\" title=\"1. 一个源程序从写出到执行的过程\"></a>1. 一个源程序从写出到执行的过程</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;&#x2F; 简要过程：\n编写 -&gt; 编译链接 -&gt; 执行</code></pre>\n\n<ul>\n<li>执行可执行文件中的程序：<br>操作系统按照可执行文件中的描述信息，将可执行文件中的机器码和数据加载入内存，并进行相关的初始化（比如：设置CS:IP指向第一条要执行的指令），然后由CPU执行程序。</li>\n</ul>\n<h4 id=\"2-源程序\"><a href=\"#2-源程序\" class=\"headerlink\" title=\"2. 源程序\"></a>2. 源程序</h4><pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">assume cs:codesg\n\ncodesg segment\n\nstart:  mov ax,0123H\n        mov bx,0456H\n        add ax,bx\n        add ax,ax\n\n        mov ax,4c00H\n        int 21h\ncodesg ends\nend</code></pre>\n\n<ul>\n<li><p>汇编指令</p>\n<ul>\n<li>有对应的机器码的指令，可以被编译为机器指令，最终为CPU所执行。</li>\n</ul>\n</li>\n<li><p>伪指令</p>\n<ul>\n<li>没有对应的机器码的指令，最终不被CPU所执行。</li>\n<li>伪指令是由编译器来执行的指令，编译器根据伪指令来进行相关的编译工作。</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;&#x2F; 定义一个段\nsegment和ends是一对成对使用的伪指令，\n这是在写可被编译器编译的汇编程序时，必须要用到的一对伪指令。\nsegment和ends的功能时定义一个段，\nsegment说明一个段开始，ends说明一个段结束。\n\n一个段必须有一个名称来标识，使用格式为：\n段名 segment\n段名 ends\n\n一个汇编程序是由多个段组成的，这些段被用来存放代码、数据或当作栈空间来使用。\n\n一个有意义的汇编程序中至少要有一个短，这个段用来存放代码。</code></pre>\n\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;&#x2F; 真正的结束\nend是一个汇编程序的结束标记，编译器在编译汇编程序的过程中，\n如果碰到了伪指令的end，就结束对源程序的编译。\n\n如果程序写完了，要在结尾处加上伪指令end。\n否则编译器在编译程序时，无法知道程序在何处结束。\n\n切记：不要搞混了end和ends。</code></pre>\n\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;&#x2F; 寄存器与段的关联假设\nassume：含义为&quot;假设&quot;；\n它假设某一段寄存器和程序中的某一个用segment···ends定义的段相关联。\n通过assume说明这种关联，在需要的情况下，编译程序可以将段寄存器和某一个具体的段相联系。</code></pre>\n\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;&#x2F; 源程序中的“程序”\n\n汇编源程序：\n伪指令（编译器处理）\n汇编语言（编译为机器码）\n\n程序：源程序中最终由计算机执行、处理的指令或数据。</code></pre>\n<p><img src=\"/../all_picture/8086%E6%B1%87%E7%BC%9602_1.png\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;&#x2F; 标号\n一个标号指代了一个地址；\n\ncodesg:放在segment的前面，作为一个段的名称，\n这个段的名称最终将被编译、链接程序处理为一个段的段地址。</code></pre>\n\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;&#x2F; 程序返回\n应该在程序的末尾添加返回的程序段。\nmov ax,4c00H\nint 21H\n&#x2F;&#x2F; 这两条指令所实现的功能就是程序返回。</code></pre>\n\n<p><img src=\"/../all_picture/8086%E6%B1%87%E7%BC%9602_2.png\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;&#x2F; 语法错误和逻辑错误\n语法错误，程序在编译时被编译器发现的错误，容易发现；\n逻辑错误，程序在编译时不能表现出来的、在运行时发生的错误；</code></pre>\n\n<h4 id=\"3-编辑源程序\"><a href=\"#3-编辑源程序\" class=\"headerlink\" title=\"3. 编辑源程序\"></a>3. 编辑源程序</h4><pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">assume cs:abc\n\nabc segment\n    mov ax,2\n    add ax,ax\n    add ax,ax\n\n    mov ax,4c00H\n    int 21H\nabc ends\n\nend</code></pre>\n\n<p> 一般来说，有两类错误使我们得不到所期望的目标文件：</p>\n<ul>\n<li>我们程序中有“Server Errors”；</li>\n<li>找不到所给出的源程序文件；</li>\n</ul>\n<h4 id=\"4-以简化的方式进行编译和链接\"><a href=\"#4-以简化的方式进行编译和链接\" class=\"headerlink\" title=\"4. 以简化的方式进行编译和链接\"></a>4. 以简化的方式进行编译和链接</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;&#x2F; 对源程序进行编译连接：\n使用汇编语言编译程序（MASM.EXE）对源程序文件中的源程序进行编译，产生目标文件【.obj文件】\n再用连接程序（LINK.EXE）对目标文件进行连接，生成可在操作系统中直接运行的可执行文件【.EXE文件】\n\n例：\nmasm 1.asm;\nlink 1.obj\n或\nml 1.asm</code></pre>\n\n<p><strong>关于编译和链接</strong><br>链接的作用：</p>\n<ul>\n<li>当源程序很大时，可以将它分为多个源程序文件来编译，每个源程序编译成为目标文件后，再用链接程序将它们链接到一起，生成一个可执行文件；</li>\n<li>程序中调用了某个库文件中的子程序，需要将这个库文件和该程序生成的目标文件链接到一起，生成一个可执行文件；</li>\n<li>一个源程序编译后，得到了存有机器码的目标文件，目标文件中的有些内容还不能直接用来生成可执行文件，连接程序将这些内容处理为最终的可执行信息；</li>\n<li>所以在只有一个源程序文件，而又不需要调用某个库中的子程序的情况下，也必须用连接程序对目标文件进行处理，生成可执行文件；</li>\n</ul>\n<h4 id=\"5-可执行文件中的程序装入内存并运行的原理\"><a href=\"#5-可执行文件中的程序装入内存并运行的原理\" class=\"headerlink\" title=\"5. 可执行文件中的程序装入内存并运行的原理\"></a>5. 可执行文件中的程序装入内存并运行的原理</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">1. 在 DOS 中，可执行文件中的程序 P1 若要运行，必须有一个正在运行的程序 P2，\n将 P1 从可执行文件中加载入内存，将 CP U的控制权交给P1，P1 才能得以运行；\n\n2. 当 P1 运行完毕后，应该将 CPU 的控制权交还给使他得以运行的程序；\n\n3. 操作系统的外壳：\n（1）操作系统是由多个功能模块组成的庞大、复杂的软件系统，任何通用的操作系统，\n都需要提供一个称为 shell（外壳）的程序，用户（操作人员）使用这个程序来操作计算机系统工作；\n（2）DOS 中有一个程序 command.com，这个程序在 DOS 中称为命令解释器，也就是 DOS 系统的 shell；\n \n4. 执行可执行文件 1.exe 时，\n（1）什么程序将 CPU 的控制权交给了 1.exe？\n（2）将程序 1.exe 加载入内存后，如何使程序得以运行？\n（3）1.exe 程序运行结束后，返回到了哪里？\n答：\n（1）在 DOS 中直接执行 1.exe 时，是正在运行的 cmd.exe 将 1.exe 中的程序加载入内存；\n（2）cmd.exe 设置 CPU 的 CS:IP 指向程序的第一条指令（即，程序的入口），从而使程序得以运行；\n（3）程序运行结束后，返回 cmd.exe 中，CPU 继续运行 cmd.exe；</code></pre>\n\n<p><img src=\"/../all_picture/8086%E6%B1%87%E7%BC%9602_3.png\"></p>\n<h4 id=\"6-程序执行过程的跟踪\"><a href=\"#6-程序执行过程的跟踪\" class=\"headerlink\" title=\"6. 程序执行过程的跟踪\"></a>6. 程序执行过程的跟踪</h4><pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">assume cs:codesg\n\ncodesg segment\n\nstart:  mov ax,0123H\n        mov bx,0456H\n        add ax,bx\n        add ax,ax\n\n        mov ax,4c00H\n        int 21H\ncodesg ends\n\nend start</code></pre>\n\n<p><strong>EXE文件中的程序的加载过程</strong><br><img src=\"/../all_picture/8086%E6%B1%87%E7%BC%9602_4.png\"></p>\n<ul>\n<li><p>程序加载后，ds 中存放着程序所在内存区的段地址，这个内存区的偏移地址为 0 ，则程序所在的内存区的地址为：ds:0；</p>\n</li>\n<li><p>这个内存区的前256个字节中存放的是 PSP，dos 用来和程序进行通信；</p>\n</li>\n<li><p>从 256 字节处向后的空间存放的是程序；</p>\n</li>\n<li><p>所以，我们从 ds 中可以得到 PSP 的段地址 SA，PSP 的偏移地址为 0，则物理地址为 SA×16+0；</p>\n</li>\n<li><p>因为 PSP 占 256（100H）字节，所以程序的物理地址是：<br>SA×16+0+256&#x3D; SA×16+16×16&#x3D;（SA+16）×16+0，可用段地址和偏移地址表示为：SA+10:0；</p>\n</li>\n</ul>\n","feature":false,"text":"汇编语言程序1. 一个源程序从写出到执行的过程&#x2F;&#x2F; 简要过程： 编写 -&gt; 编译链接 -&gt; 执行 执行可执行文件中的程序：操作系统按照可执行文件中的描述信息，将可执行文件中的机器码和数据加载入内存，并进行相关的初始化（比如：设置CS:IP指向第一条...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":10,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"8086汇编","slug":"8086汇编","count":8,"path":"api/tags/8086汇编.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">汇编语言程序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%B8%80%E4%B8%AA%E6%BA%90%E7%A8%8B%E5%BA%8F%E4%BB%8E%E5%86%99%E5%87%BA%E5%88%B0%E6%89%A7%E8%A1%8C%E7%9A%84%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">1. 一个源程序从写出到执行的过程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%BA%90%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">2. 源程序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E7%BC%96%E8%BE%91%E6%BA%90%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">3. 编辑源程序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E4%BB%A5%E7%AE%80%E5%8C%96%E7%9A%84%E6%96%B9%E5%BC%8F%E8%BF%9B%E8%A1%8C%E7%BC%96%E8%AF%91%E5%92%8C%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">4. 以简化的方式进行编译和链接</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%A3%85%E5%85%A5%E5%86%85%E5%AD%98%E5%B9%B6%E8%BF%90%E8%A1%8C%E7%9A%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">5. 可执行文件中的程序装入内存并运行的原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E7%9A%84%E8%B7%9F%E8%B8%AA\"><span class=\"toc-text\">6. 程序执行过程的跟踪</span></a></li></ol></li></ol></li></ol>","author":{"name":"南瓜の无名","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"8086汇编学习笔记_01","uid":"c056fa5ea8e6220d71e866be2b6f171d","slug":"01","date":"2023-07-25T03:20:34.000Z","updated":"2023-08-08T14:06:23.402Z","comments":true,"path":"api/articles/01.json","keywords":null,"cover":"../picture/9.jpg","text":"一、寄存器（CPU工作原理）CPU概述 运算器，控制器，寄存器等器件，这些器件靠内部总线相连； 8086 CPU 有14个寄存器： AX BX CX DX SI DI SP BP IP CS SS DS ES PSW 通用寄存器有8个, 又可以分成2组, 一组是数据寄存器(4个)...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":10,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"8086汇编","slug":"8086汇编","count":8,"path":"api/tags/8086汇编.json"}],"author":{"name":"南瓜の无名","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},"next_post":{"title":"8086汇编学习笔记_04","uid":"27759c8c14f50cd48e39f238bf5dbaa8","slug":"04","date":"2023-07-25T03:20:34.000Z","updated":"2023-08-08T13:16:53.938Z","comments":true,"path":"api/articles/04.json","keywords":null,"cover":"../picture/13.jpg","text":"包含多个段的程序1. 在代码段中使用数据dw 的含义是定义字型数据。 因为dw定义的数据处于代码段的最开始，所以偏移地址为0。 assume cs:codesg codesg segment dw 0123h,0456h,0789h,0abc,0def,0fedh,0cbah,0...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":10,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"8086汇编","slug":"8086汇编","count":8,"path":"api/tags/8086汇编.json"}],"author":{"name":"南瓜の无名","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}