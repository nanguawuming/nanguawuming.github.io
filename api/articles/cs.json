{"title":"windows下cobaltstrike的简单使用笔记（汉化版）","uid":"683422935a9a4a685de276df60649fb9","slug":"cs","date":"2023-04-30T12:30:34.000Z","updated":"2023-07-29T06:23:27.336Z","comments":true,"path":"api/articles/cs.json","keywords":null,"cover":"../picture/11.jpg","content":"<h3 id=\"1-配置和启动\"><a href=\"#1-配置和启动\" class=\"headerlink\" title=\"1.配置和启动\"></a>1.配置和启动</h3><p>配置teamserver，需要root权限。</p>\n<p><img src=\"/../all_picture/tool_cs_01.png\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">.&#x2F;teamserver &lt;host&gt; &lt;password&gt; [&#x2F;path&#x2F;to&#x2F;c2.profile] [YYYY-MM-DD]\n&lt;host&gt; 必需参数 团队服务器IP\n&lt;password&gt; 必需参数 连接服务器的密码\n[&#x2F;path&#x2F;to&#x2F;c2.profile] 可选参数 指定C2通信配置文件，体现其强大的扩展性\n[YYYY-MM-DD] 可选参数 所有payload的终止时间\n</code></pre>\n\n<p>汉化版是cobaltStrikeCN，里面有一个cs.bat，点击命令如下。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">java -Dfile.encoding&#x3D;UTF-8 -javaagent:CobaltStrikeCN.jar -XX:ParallelGCThreads&#x3D;4 -XX:+AggressiveHeap -XX:+UseParallelGC -jar cobaltstrike.jar</code></pre>\n\n<p><img src=\"/../all_picture/tool_cs_01_1.png\"></p>\n<p>修改主机和密码为刚才设置的服务端ip和密码，端口默认50050，用户名随意，点击连接，即可进入cs图形化界面。</p>\n<h3 id=\"2-菜单功能（中英对照）\"><a href=\"#2-菜单功能（中英对照）\" class=\"headerlink\" title=\"2.菜单功能（中英对照）\"></a>2.菜单功能（中英对照）</h3><p><strong>cobalt strick</strong></p>\n<p><img src=\"/../all_picture/tool_cs_02.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">New Connection       # 新建连接，允许连接多个服务器端\nPreferences           # 设置（界面、控制台样式设置等）\nVisualization       # 视图（结果输出模式） \n# Pivot Graph 枢纽试图\n# Session Table 会话列表\n# Target Table 目标列表\nVPN Interface        # VPN接口\nListeners           # 监听器（创建Listener）\nScript Manangers    # 脚本管理器\nClose              # 关闭</code></pre>\n\n<p><strong>View （视图）</strong></p>\n<p><img src=\"/../all_picture/tool_cs_03.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">Applications     #显示目标机的应用信息\nCredentials      #凭证（所有通过Mimikatz抓取的密码都存储在这里）\nDownloads       #下载文件\nEvent Log        #事件日志，主机上线记录及团队交流记录\nKeystrokes      #键盘记录\nProxy Pivots    #代理模块\nScreenshots     #查看目标机截图\nScript Console  #脚本控制台\nTargets          #显示目标主机\nWeb Log         #Web日志</code></pre>\n\n<p><strong>Attacks（攻击）</strong></p>\n<p><img src=\"/../all_picture/tool_cs_04_1.png\"><br><img src=\"/../all_picture/tool_cs_04.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">Packages    # 生成后门\n    -- HTML Aplications   # 网页后门\n    -- MS Office MAcro    #office宏后门\n    -- Payload Generator  #生成各种编程语言的后门\n    -- Windows Executable #可执行的exe文件\n    -- Windows Executable(s) #生成无状态的可执行exe文件\nWeb Drive—by   #钓鱼攻击\n    -- Mange  管理器\n    -- Clone Site  ##克隆网站，可以记录受害者提交的数据；\n    -- Host file   # 提供一个文件下载，可以修改Mime信息； 可以配合DNS欺骗实现挂马效果使用\n    -- Script Web Delivery  # 类似于msf 的web_delivery \n    -- Signed Applet Attack # 使用java自签名的程序进行钓鱼攻击\n    -- Smart Applet Attack  #自动检测java版本并进行攻击，针对Java 1.6.0_45以下以及Java 1.7.0_21以下版本；\n    -- System Profiler # 用来获取一些系统信息，比如系统版本，Flash版本，浏览器版本等。\n Spear Phish       #钓鱼攻击</code></pre>\n\n<p><strong>Reporting（报告）</strong></p>\n<p><img src=\"/../all_picture/tool_cs_05.png\"></p>\n<h3 id=\"3-利用CS生成木马\"><a href=\"#3-利用CS生成木马\" class=\"headerlink\" title=\"3.利用CS生成木马\"></a>3.利用CS生成木马</h3><p>1.打开监听器模块，点击add添加新的监听器。</p>\n<p><img src=\"/../all_picture/tool_cs_06.png\"></p>\n<p>2.依照箭头配置完成后save保存，用户名随意。</p>\n<p><img src=\"/../all_picture/tool_cs_07.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">监听器参数：\nname\t                # 为监听器名字，可任意\npayload\t                # payload类型\nHTTP Hosts\t        # shell反弹的主机，也就是我们 CS 服务器的 IP\nHTTP Hosts(Stager)\t# Stager的马请求下载payload的地址\nHTTP Port(C2)\t        # C2监听的端口</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># Cobaltstrike 4.1 版本提供了 8 种监听器\n\nbeacon_xx 系列为 Cobalt Strike 自身内置的监听器，\n即在目标主机执行相应的payload，获取 shell 到 CS 上，\n包括 dns、http、https、smb 四种方式的监听器；\n\nforeign 系列为外部监听器，通常与 MSF 或者 Armitage 联动，\n例如获取 meterpreter 到 MSF上。</code></pre>\n\n<p>3.找到攻击模块-&gt;生成后门，选择Windows Executable。</p>\n<p><img src=\"/../all_picture/tool_cs_08.png\"></p>\n<p>4.选择创建好的监听器。</p>\n<p><img src=\"/../all_picture/tool_cs_09.png\"></p>\n<p>5.点击generate创建，选择创建木马的保存路径，生成artifact.exe木马文件。</p>\n<p>6.目标主机运行木马后，成功上线。</p>\n<p><img src=\"/../all_picture/tool_cs_10.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">Interact  # 互交窗口\n&#39;&#39;&#39;\nBeacon\n成功将所控制的目标机资源上线之后，团队内的其他成员即可对该台机器进行进一步渗透。\n团队成员通过点击目标机右键，选择 Interact 功能（进入 beacon），就可以用它来执行各种命令，开始对目标及进行操作。\n进一步可用help+命令的方式查看具体命令参数说明。\n\n【注意】\n1. 在 Cobalt Strike 中，默认心跳为 60s（即 CS 与受害机默认 60s 才进行一次交互），故执行命令的响应速度很慢，在下载文件时更加明显，所以根据实战环境把时间降低，建议不要太快，否则流量会相对明显。在这里执行命令 sleep 5 可以把交互时间设置为 5 秒。\n2. 同时在 beacon 中，如果想对目标进行命令管理，需要在前面加上shell关键词，如shell whoami、shell ipconfig等。\n&#39;&#39;&#39;\n\n\nAccess   \n    -- Dump Hashes  #  获取hash（只能权限为administor使用）\n    -- elevate      #提权\n    -- Golden Ticket #生成黄金票据注入当前会话\n    -- Make Token    # 凭证转换\n    -- One-liner    # 反弹shell\n    -- Run Mimikatz # 运行 Mimikatz\n    --Spawn As  #用其他用户生成Cobalt Strike的beacon\nExplore\n    -- Browser Pivot  #  劫持目标浏览器进程并代理\n    -- Destop Vnc   # 桌面互交\n    -- File Browser # 文件浏览器\n    -- Net View     # 网络列表\n    -- Port Scan    # 端口扫描\n    -- Process List # 进程列表\n    -- Screenshot   # 截图\nPrivoting\n    -- SOCKS Server # 代理服务\n    -- Listener     # 反向端口转发\n    -- Deploy VPN   # 部署VPN\nSpawn   #新的通讯模式并生成会话\nSession     #会话管理，删除，心跳时间，退出，备注</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Beacon Commands\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n    Command                   Description\n    -------                   -----------\n    argue                     进程参数欺骗\n    blockdlls                 在子进程中阻止非Microsoft的DLLs文件\n    browserpivot              注入受害者浏览器进程\n    bypassuac                 绕过UAC\n    cancel                    取消正在进行的下载\n    cd                        切换目录\n    checkin                   强制让被控端回连一次\n    clear                     清除beacon内部的任务队列\n    connect                   通过TCP连接到Beacon\n    covertvpn                 部署Covert VPN客户端\n    cp                        复制文件\n    dcsync                    从DC中提取密码哈希\n    desktop                   远程VNC\n    dllinject                 反射DLL注入进程\n    dllload                   使用LoadLibrary将DLL加载到进程中\n    download                  下载文件\n    downloads                 列出正在进行的文件下载\n    drives                    列出目标盘符\n    elevate                   尝试提权\n    execute                   在目标上执行程序(无输出)\n    execute-assembly          在目标上内存中执行本地.NET程序\n    exit                      退出beacon\n    getprivs                  对当前令牌启用系统权限\n    getsystem                 尝试获取SYSTEM权限\n    getuid                    获取用户ID\n    hashdump                  转储密码哈希值\n    help                      帮助\n    inject                    在特定进程中生成会话\n    jobkill                   杀死一个后台任务\n    jobs                      列出后台任务\n    kerberos_ccache_use       从ccache文件中导入票据应用于此会话\n    kerberos_ticket_purge     清除当前会话的票据\n    kerberos_ticket_use       从ticket文件中导入票据应用于此会话\n    keylogger                 键盘记录\n    kill                      结束进程\n    link                      通过命名管道连接到Beacon\n    logonpasswords            使用mimikatz转储凭据和哈希值\n    ls                        列出文件\n    make_token                创建令牌以传递凭据\n    mimikatz                  运行mimikatz\n    mkdir                     创建一个目录\n    mode dns                  使用DNS A作为通信通道(仅限DNS beacon)\n    mode dns-txt              使用DNS TXT作为通信通道(仅限D beacon)\n    mode dns6                 使用DNS AAAA作为通信通道(仅限DNS beacon)\n    mode http                 使用HTTP作为通信通道\n    mv                        移动文件\n    net                       net命令\n    note                      给当前目标机器备注       \n    portscan                  进行端口扫描\n    powerpick                 通过Unmanaged PowerShell执行命令\n    powershell                通过powershell.exe执行命令\n    powershell-import         导入powershell脚本\n    ppid                      为生成的post-ex任务设置父PID\n    ps                        显示进程列表\n    psexec                    使用服务在主机上生成会话\n    psexec_psh                使用PowerShell在主机上生成会话\n    psinject                  在特定进程中执行PowerShell命令\n    pth                       使用Mimikatz进行传递哈希\n    pwd                       当前目录位置\n    reg                       查询注册表\n    rev2self                  恢复原始令牌\n    rm                        删除文件或文件夹\n    rportfwd                  端口转发\n    run                       在目标上执行程序(返回输出)\n    runas                     以另一个用户权限执行程序\n    runasadmin                在高权限下执行程序\n    runu                      在另一个PID下执行程序\n    screenshot                屏幕截图\n    setenv                    设置环境变量\n    shell                     cmd执行命令\n    shinject                  将shellcode注入进程\n    shspawn                   生成进程并将shellcode注入其中\n    sleep                     设置睡眠延迟时间\n    socks                     启动SOCKS4代理\n    socks stop                停止SOCKS4\n    spawn                     生成一个会话 \n    spawnas                   以其他用户身份生成会话\n    spawnto                   将可执行程序注入进程\n    spawnu                    在另一个PID下生成会话\n    ssh                       使用ssh连接远程主机\n    ssh-key                   使用密钥连接远程主机\n    steal_token               从进程中窃取令牌\n    timestomp                 将一个文件时间戳应用到另一个文件\n    unlink                    断开与Beacon的连接\n    upload                    上传文件\n    wdigest                   使用mimikatz转储明文凭据\n    winrm                     使用WinRM在主机上生成会话\n    wmi                       使用WMI在主机上生成会话</code></pre>","feature":false,"text":"1.配置和启动配置teamserver，需要root权限。 .&#x2F;teamserver &lt;host&gt; &lt;password&gt; [&#x2F;path&#x2F;to&#x2F;c2.profile] [YYYY-MM-DD] &lt;host&gt;...","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"文章","slug":"文章","count":8,"path":"api/categories/文章.json"}],"tags":[{"name":"渗透工具","slug":"渗透工具","count":1,"path":"api/tags/渗透工具.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%85%8D%E7%BD%AE%E5%92%8C%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">1.配置和启动</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%8F%9C%E5%8D%95%E5%8A%9F%E8%83%BD%EF%BC%88%E4%B8%AD%E8%8B%B1%E5%AF%B9%E7%85%A7%EF%BC%89\"><span class=\"toc-text\">2.菜单功能（中英对照）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%88%A9%E7%94%A8CS%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC\"><span class=\"toc-text\">3.利用CS生成木马</span></a></li></ol>","author":{"name":"南瓜の无名","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/head.jpg","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2023-05-05T05:50:17.266Z","updated":"2023-05-10T11:44:18.660Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/3.jpg","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ...","link":"","photos":[],"count_time":{"symbolsCount":440,"symbolsTime":"1 mins."},"categories":[{"name":"test","slug":"test","count":1,"path":"api/categories/test.json"}],"tags":[{"name":"test","slug":"test","count":1,"path":"api/tags/test.json"}],"author":{"name":"南瓜の无名","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/head.jpg","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},"next_post":{"title":"c语言学习笔记_02单链表","uid":"a6f0cc9299816c24b5762d16aaeb2235","slug":"c语言_02","date":"2023-04-24T01:50:13.000Z","updated":"2023-07-29T06:10:25.433Z","comments":true,"path":"api/articles/c语言_02.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/8.jpg","text":"单链表链表是一种常见的数据结构。根据需求，我们可以构造出单链表、双链表、循环链表和块状链表等。链表的出现很大程度上弥补了数组的先天不足。 struct Test &#123; int x; int y; struct Test *test; &#125;; 在单链表中插入元素 #...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"文章","slug":"文章","count":8,"path":"api/categories/文章.json"}],"tags":[{"name":"c语言基础","slug":"c语言基础","count":2,"path":"api/tags/c语言基础.json"}],"author":{"name":"南瓜の无名","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/head.jpg","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}