{"title":"c语言学习笔记_02单链表","uid":"a6f0cc9299816c24b5762d16aaeb2235","slug":"c语言_02","date":"2023-04-24T01:50:13.000Z","updated":"2023-08-08T13:28:25.095Z","comments":true,"path":"api/articles/c语言_02.json","keywords":null,"cover":"../picture/8.jpg","content":"<h4 id=\"单链表\"><a href=\"#单链表\" class=\"headerlink\" title=\"单链表\"></a>单链表</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">链表是一种常见的数据结构。根据需求，我们可以构造出单链表、双链表、循环链表和块状链表等。链表的出现很大程度上弥补了数组的先天不足。</code></pre>\n\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">struct Test\n&#123;\n    int x;\n    int y;\n    struct Test *test;\n&#125;;</code></pre>\n\n<p><img src=\"/../all_picture/c%E5%8D%95%E9%93%BE%E8%A1%A8_01.png\"></p>\n<h4 id=\"在单链表中插入元素\"><a href=\"#在单链表中插入元素\" class=\"headerlink\" title=\"在单链表中插入元素\"></a>在单链表中插入元素</h4><p><img src=\"/../all_picture/c%E5%8D%95%E9%93%BE%E8%A1%A8_02.png\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct Book\n&#123;\n    char title[128];\n    char author[40];\n    struct Book *next;\n&#125;;\n\nvoid getInput(struct Book *book)\n&#123;\n    printf(&quot;请输入书名：&quot;);\n    scanf(&quot;%s&quot;, book-&gt;title);\n    printf(&quot;请输入作者：&quot;);\n    scanf(&quot;%s&quot;, book-&gt;author);\n&#125;\n\nvoid addBook(struct Book **library)\n&#123;\n    struct Book *book, *temp;\n\n    book &#x3D; (struct Book *)malloc(sizeof(struct Book));\n\n    if (book &#x3D;&#x3D; NULL)\n    &#123;\n        printf(&quot;内存分配失败!\\n&quot;);\n        exit(1);\n    &#125;\n\n    getInput(book);\n\n    if (*library !&#x3D; NULL)\n    &#123;\n        temp &#x3D; *library;    \n        &#x2F;&#x2F; 首先，将 *library 的值赋给 temp，保存了链表的头部节点。\n        *library &#x3D; book;    \n        &#x2F;&#x2F; 将 book 的地址赋给 *library，即将新的书籍节点作为链表的新头部节点。\n        book-&gt;next &#x3D; temp;\n        &#x2F;&#x2F; 将 temp 赋给 book-&gt;next，即将原来的链表头部节点作为新的书籍节点的下一个节点。\n    &#125;\n    else\n    &#123;\n        *library &#x3D; *book;\n        &#x2F;&#x2F; *library &#x3D; *book; 将 book 的值赋给 *library，即将新的书籍节点作为链表的第一个节点。\n\n        book-&gt;next &#x3D; NULL;\n        &#x2F;&#x2F; book-&gt;next &#x3D; NULL; 将新的书籍节点的下一个节点指针 next 设置为 NULL，表示链表只有一个节点。\n    &#125;\n&#125;\n\nvoid printLibrary(struct Book *library)\n&#123;\n    struct Book *book;\n    int count &#x3D; 1;\n\n    book &#x3D; library;\n    while (book !&#x3D; NULL)\n    &#123;\n        printf(&quot;Book%d\\n&quot;, count);\n        printf(&quot;书名：%s\\n&quot;, book-&gt;title);\n        printf(&quot;作者：%s\\n&quot;, book-&gt;author);\n        book &#x3D; book-&gt;next;\n        count++;\n    &#125;\n&#125;\n\nvoid releaseLibrary(struct Book **library)\n&#123;\n    struct Book *temp;\n    while (*library !&#x3D; NULL)\n    &#123;\n        temp &#x3D; *library;\n        *library &#x3D; (*library)-&gt;next;\n        free(temp);\n    &#125;\n&#125;\n\nint main(void)\n&#123;\n    struct Book *library &#x3D; NULL;\n    int ch;\n\n    while (1)\n    &#123;\n        printf(&quot;请问是否需要录入书籍信息：&quot;);\n        do&#123;\n            ch &#x3D; getchar();\n        &#125; while (ch !&#x3D; &#39;Y&#39; &amp;&amp; ch !&#x3D; &#39;N&#39;);\n\n        if (ch &#x3D;&#x3D; &#39;Y&#39;)\n        &#123;\n            addBook(&amp;library);\n        &#125;\n        else\n        &#123;\n            break;\n        &#125;\n    &#125;\n\n    printf(&quot;请问是否需要打印图书信息：&quot;);\n    do&#123;\n            ch &#x3D; getchar();\n        &#125; while (ch !&#x3D; &#39;Y&#39; &amp;&amp; ch !&#x3D; &#39;N&#39;);\n\n        if (ch &#x3D;&#x3D; &#39;Y&#39;)\n        &#123;\n            printLibrary(library);\n        &#125;\n        else\n        &#123;\n            break;\n        &#125;\n\n    releaseLibrary(&amp;library);\n\n    return 0;\n&#125;</code></pre>\n\n<p><img src=\"/../all_picture/c%E5%8D%95%E9%93%BE%E8%A1%A8_03.png\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct Book\n&#123;\n    char title[128];\n    char author[40];\n    struct Book *next;\n&#125;;\n\nvoid getInput(struct Book *book);\nvoid addBook(struct Book **library);\nvoid printLibrary(struct Book *library);\nvoid releaseLibrary(struct Book **library);\n\nvoid getInput(struct Book *book)\n&#123;\n    printf(&quot;请输入书名：&quot;);\n    scanf(&quot;%s&quot;, book-&gt;title);\n    printf(&quot;请输入作者：&quot;);\n    scanf(&quot;%s&quot;, book-&gt;author);\n&#125;\n\nvoid addBook(struct Book **library)\n&#123;\n    struct Book *book, *temp;\n\n    book &#x3D; (struct Book *)malloc(sizeof(struct Book));\n\n    if (book &#x3D;&#x3D; NULL)\n    &#123;\n        printf(&quot;内存分配失败!\\n&quot;);\n        exit(1);\n    &#125;\n\n    getInput(book);\n\n    if (*library !&#x3D; NULL)\n    &#123;\n       temp &#x3D; *library;\n       &#x2F;&#x2F; 定位单链表的尾部位置\n       while (temp-&gt;next !&#x3D; NULL)\n       &#123;\n            temp &#x3D; temp-&gt;next;\n       &#125;\n       &#x2F;&#x2F; 插入数据\n       temp-&gt;next &#x3D; book;\n       book-&gt;next &#x3D; NULL;\n    &#125;\n    else\n    &#123;\n        *library &#x3D; book;\n        book-&gt;next &#x3D; NULL;\n    &#125;\n&#125;\n\nvoid printLibrary(struct Book *library)\n&#123;\n    struct Book *book;\n    int count &#x3D; 1;\n\n    book &#x3D; library;\n    while (book !&#x3D; NULL)\n    &#123;\n        printf(&quot;Book%d\\n&quot;, count);\n        printf(&quot;书名：%s\\n&quot;, book-&gt;title);\n        printf(&quot;作者：%s\\n&quot;, book-&gt;author);\n        book &#x3D; book-&gt;next;\n        count++;\n    &#125;\n&#125;\n\nvoid releaseLibrary(struct Book **library)\n&#123;\n    struct Book *temp;\n    while (*library !&#x3D; NULL)\n    &#123;\n        temp &#x3D; *library;\n        *library &#x3D; (*library)-&gt;next;\n        free(temp);\n    &#125;\n&#125;\n\nint main(void)\n&#123;\n    struct Book *library &#x3D; NULL;\n    int ch;\n\n    while (1)\n    &#123;\n        printf(&quot;请问是否需要录入书籍信息：&quot;);\n        do&#123;\n            ch &#x3D; getchar();\n        &#125; while (ch !&#x3D; &#39;Y&#39; &amp;&amp; ch !&#x3D; &#39;N&#39;);\n\n        if (ch &#x3D;&#x3D; &#39;Y&#39;)\n        &#123;\n            addBook(&amp;library);\n        &#125;\n        else\n        &#123;\n            break;\n        &#125;\n    &#125;\n\n    printf(&quot;请问是否需要打印图书信息：&quot;);\n    do&#123;\n            ch &#x3D; getchar();\n        &#125; while (ch !&#x3D; &#39;Y&#39; &amp;&amp; ch !&#x3D; &#39;N&#39;);\n\n        if (ch &#x3D;&#x3D; &#39;Y&#39;)\n        &#123;\n            printLibrary(library);\n        &#125;\n        else\n        &#123;\n            break;\n        &#125;\n\n    releaseLibrary(&amp;library);\n\n    return 0;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct Book\n&#123;\n    char title[128];\n    char author[40];\n    struct Book *next;\n&#125;;\n\nvoid getInput(struct Book *book);\nvoid addBook(struct Book **library);\nvoid printLibrary(struct Book *library);\nvoid releaseLibrary(struct Book **library);\n\nvoid getInput(struct Book *book)\n&#123;\n    printf(&quot;请输入书名：&quot;);\n    scanf(&quot;%s&quot;, book-&gt;title);\n    printf(&quot;请输入作者：&quot;);\n    scanf(&quot;%s&quot;, book-&gt;author);\n&#125;\n\nvoid addBook(struct Book **library)\n&#123;\n    struct Book *book;\n    static struct Book *tail;\n\n    book &#x3D; (struct Book *)malloc(sizeof(struct Book));\n\n    if (book &#x3D;&#x3D; NULL)\n    &#123;\n        printf(&quot;内存分配失败!\\n&quot;);\n        exit(1);\n    &#125;\n\n    getInput(book);\n\n    if (*library !&#x3D; NULL)\n    &#123;\n       tail-&gt;next &#x3D; book;\n       book-&gt;next &#x3D; NULL;\n    &#125;\n    else\n    &#123;\n        *library &#x3D; book;\n        book-&gt;next &#x3D; NULL;\n    &#125;\n    tail &#x3D; book;\n&#125;\n\nvoid printLibrary(struct Book *library)\n&#123;\n    struct Book *book;\n    int count &#x3D; 1;\n\n    book &#x3D; library;\n    while (book !&#x3D; NULL)\n    &#123;\n        printf(&quot;Book%d\\n&quot;, count);\n        printf(&quot;书名：%s\\n&quot;, book-&gt;title);\n        printf(&quot;作者：%s\\n&quot;, book-&gt;author);\n        book &#x3D; book-&gt;next;\n        count++;\n    &#125;\n&#125;\n\nvoid releaseLibrary(struct Book **library)\n&#123;\n    struct Book *temp;\n    while (*library !&#x3D; NULL)\n    &#123;\n        temp &#x3D; *library;\n        *library &#x3D; (*library)-&gt;next;\n        free(temp);\n    &#125;\n&#125;\n\nint main(void)\n&#123;\n    struct Book *library &#x3D; NULL;\n    int ch;\n\n    while (1)\n    &#123;\n        printf(&quot;请问是否需要录入书籍信息：&quot;);\n        do&#123;\n            ch &#x3D; getchar();\n        &#125; while (ch !&#x3D; &#39;Y&#39; &amp;&amp; ch !&#x3D; &#39;N&#39;);\n\n        if (ch &#x3D;&#x3D; &#39;Y&#39;)\n        &#123;\n            addBook(&amp;library);\n        &#125;\n        else\n        &#123;\n            break;\n        &#125;\n    &#125;\n\n    printf(&quot;请问是否需要打印图书信息：&quot;);\n    do&#123;\n            ch &#x3D; getchar();\n        &#125; while (ch !&#x3D; &#39;Y&#39; &amp;&amp; ch !&#x3D; &#39;N&#39;);\n\n        if (ch &#x3D;&#x3D; &#39;Y&#39;)\n        &#123;\n            printLibrary(library);\n        &#125;\n        else\n        &#123;\n            break;\n        &#125;\n\n    releaseLibrary(&amp;library);\n\n    return 0;\n&#125;</code></pre>\n\n<h4 id=\"搜索单链表\"><a href=\"#搜索单链表\" class=\"headerlink\" title=\"搜索单链表\"></a>搜索单链表</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nstruct Book\n&#123;\n    char title[128];\n    char author[40];\n    struct Book *next;\n&#125;;\n\nvoid getInput(struct Book *book);\nvoid addBook(struct Book **library);\nvoid printLibrary(struct Book *library);\nstruct Book *searchBook(struct Book *library, char *target);\nvoid printBook(struct Book *book);\nvoid releaseLibrary(struct Book **library);\n\nvoid getInput(struct Book *book)\n&#123;\n    printf(&quot;请输入书名：&quot;);\n    scanf(&quot;%s&quot;, book-&gt;title);\n    printf(&quot;请输入作者：&quot;);\n    scanf(&quot;%s&quot;, book-&gt;author);\n&#125;\n\nvoid addBook(struct Book **library)\n&#123;\n    struct Book *book;\n    static struct Book *tail;\n\n    book &#x3D; (struct Book *)malloc(sizeof(struct Book));\n\n    if (book &#x3D;&#x3D; NULL)\n    &#123;\n        printf(&quot;内存分配失败!\\n&quot;);\n        exit(1);\n    &#125;\n\n    getInput(book);\n\n    if (*library !&#x3D; NULL)\n    &#123;\n       tail-&gt;next &#x3D; book;\n       book-&gt;next &#x3D; NULL;\n    &#125;\n    else\n    &#123;\n        *library &#x3D; book;\n        book-&gt;next &#x3D; NULL;\n    &#125;\n    tail &#x3D; book;\n&#125;\n\nvoid printLibrary(struct Book *library)\n&#123;\n    struct Book *book;\n    int count &#x3D; 1;\n\n    book &#x3D; library;\n    while (book !&#x3D; NULL)\n    &#123;\n        printf(&quot;Book%d\\n&quot;, count);\n        printf(&quot;书名：%s\\n&quot;, book-&gt;title);\n        printf(&quot;作者：%s\\n&quot;, book-&gt;author);\n        book &#x3D; book-&gt;next;\n        count++;\n    &#125;\n&#125;\n\nstruct Book *searchBook(struct Book *library, char *target)\n&#123;\n    struct Book *book &#x3D; library;\n    while (book !&#x3D; NULL)\n    &#123;\n        if (!strcmp(book-&gt;title, target) || !strcmp(book-&gt;author, target))\n        &#123;\n            break;\n        &#125;\n        book &#x3D; book-&gt;next;\n    &#125;\n    return book;\n&#125;\n\nvoid printBook(struct Book *book)\n&#123;\n    printf(&quot;书名：%s\\n&quot;, book-&gt;title);\n    printf(&quot;作者：%s\\n&quot;, book-&gt;author);\n&#125;\n\nvoid releaseLibrary(struct Book **library)\n&#123;\n    struct Book *temp;\n    while (*library !&#x3D; NULL)\n    &#123;\n        temp &#x3D; *library;\n        *library &#x3D; (*library)-&gt;next;\n        free(temp);\n    &#125;\n&#125;\n\nint main(void)\n&#123;\n    struct Book *library &#x3D; NULL;\n    struct Book *book;\n    char input[128];\n    int ch;\n\n    while (1)\n    &#123;\n        printf(&quot;请问是否需要录入书籍信息：&quot;);\n        do&#123;\n            ch &#x3D; getchar();\n        &#125; while (ch !&#x3D; &#39;Y&#39; &amp;&amp; ch !&#x3D; &#39;N&#39;);\n\n        getchar();\n\n        if (ch &#x3D;&#x3D; &#39;Y&#39;)\n        &#123;\n            addBook(&amp;library);\n        &#125;\n        else\n        &#123;\n            break;\n        &#125;\n    &#125;\n\n    printf(&quot;请问是否需要打印图书信息：&quot;);\n    do\n    &#123;\n        ch &#x3D; getchar();\n    &#125; while (ch !&#x3D; &#39;Y&#39; &amp;&amp; ch !&#x3D; &#39;N&#39;);\n\n    getchar();\n\n    if (ch &#x3D;&#x3D; &#39;Y&#39;)\n    &#123;\n        printLibrary(library);\n    &#125;\n    printf(&quot;\\n请输入书名或作者：&quot;);\n    scanf(&quot;%s&quot;, input);\n\n    book &#x3D; searchBook(library, input);\n    if(book &#x3D;&#x3D; NULL)\n    &#123;\n        printf(&quot;很抱歉，没能找到！\\n&quot;);\n    &#125;\n    else\n    &#123;\n        do\n        &#123;\n            printf(&quot;已找到符合条件的图书...\\n&quot;);\n            printBook(book);\n        &#125; while (searchBook(book-&gt;next, input) !&#x3D; NULL);\n    &#125;\n\n    releaseLibrary(&amp;library);\n\n    return 0;\n&#125;</code></pre>\n\n<h4 id=\"单链表的优势\"><a href=\"#单链表的优势\" class=\"headerlink\" title=\"单链表的优势\"></a>单链表的优势</h4><p><img src=\"/../all_picture/c%E5%8D%95%E9%93%BE%E8%A1%A8_04.png\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct Node\n&#123;\n    int value;\n    struct Node *next;\n&#125;;\n\nvoid insertNode(struct Node **head, int value)\n&#123;\n    struct Node *previous;\n    struct Node *current;\n    struct Node *new;\n\n    current &#x3D; *head;\n    previous &#x3D; NULL;\n\n    while(current !&#x3D; NULL &amp;&amp; current-&gt;value &lt; value)\n    &#123;\n        previous &#x3D; current;\n        current &#x3D; current-&gt;next;\n    &#125;\n\n    new &#x3D; (struct Node *)malloc(sizeof(struct Node));\n    if(new &#x3D;&#x3D; NULL)\n    &#123;\n        printf(&quot;内存分配失败！\\n&quot;);\n        exit(1);\n    &#125;\n    new-&gt;value &#x3D; value;\n    new-&gt;next &#x3D; current;\n\n    if(previous &#x3D;&#x3D; NULL)\n    &#123;\n        *head &#x3D; new;\n    &#125;\n    else\n    &#123;\n        previous-&gt;next &#x3D; new;\n    &#125;\n&#125;\n\nvoid printNode(struct Node *head)\n&#123;\n    struct Node *current;\n\n    current &#x3D; head;\n    while(current !&#x3D; NULL)\n    &#123;\n        printf(&quot;%d\\n&quot;, current-&gt;value);\n        current &#x3D; current-&gt;next;\n    &#125;\n\n    putchar(&#39;\\n&#39;);\n&#125;\n\nint main(void)&#123;\n    struct Node *head &#x3D; NULL;\n    int input;\n\n    while(1)\n    &#123;\n        printf(&quot;请输入一个整数（输入-1表示结束：)：&quot;);\n        scanf(&quot;%d&quot;,&amp;input);\n        if(input &#x3D;&#x3D; -1)\n        &#123;\n            break;\n        &#125;\n        insertNode(&amp;head, input);\n        printNode(head);\n    &#125;\n\n    return 0;\n&#125;  </code></pre>\n\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct Node\n&#123;\n    int value;\n    struct Node *next;\n&#125;;\n\nvoid insertNode(struct Node **head, int value)\n&#123;\n    struct Node *previous;\n    struct Node *current;\n    struct Node *new;\n\n    current &#x3D; *head;\n    previous &#x3D; NULL;\n\n    while(current !&#x3D; NULL &amp;&amp; current-&gt;value &lt; value)\n    &#123;\n        previous &#x3D; current;\n        current &#x3D; current-&gt;next;\n    &#125;\n\n    new &#x3D; (struct Node *)malloc(sizeof(struct Node));\n    if(new &#x3D;&#x3D; NULL)\n    &#123;\n        printf(&quot;内存分配失败！\\n&quot;);\n        exit(1);\n    &#125;\n    new-&gt;value &#x3D; value;\n    new-&gt;next &#x3D; current;\n\n    if(previous &#x3D;&#x3D; NULL)\n    &#123;\n        *head &#x3D; new;\n    &#125;\n    else\n    &#123;\n        previous-&gt;next &#x3D; new;\n    &#125;\n&#125;\n\nvoid printNode(struct Node *head)\n&#123;\n    struct Node *current;\n\n    current &#x3D; head;\n    while(current !&#x3D; NULL)\n    &#123;\n        printf(&quot;%d\\n&quot;, current-&gt;value);\n        current &#x3D; current-&gt;next;\n    &#125;\n\n    putchar(&#39;\\n&#39;);\n&#125;\n\nvoid deleteNode(struct Node **head, int value)\n&#123;\n    struct Node *previous;\n    struct Node *current;\n\n    current &#x3D; *head;\n    previous &#x3D; NULL;\n    while(current !&#x3D; NULL &amp;&amp; current-&gt;value !&#x3D; value)\n    &#123;\n        previous &#x3D; current;\n        current &#x3D; current-&gt;next;\n    &#125;\n    if(current &#x3D;&#x3D; NULL)\n    &#123;\n        printf(&quot;找不到匹配的节点!\\n&quot;);\n        return;\n    &#125;\n    else\n    &#123;\n        if(previous &#x3D;&#x3D; NULL)\n        &#123;\n            *head &#x3D; current-&gt;next;\n        &#125;\n        else\n        &#123;\n            previous-&gt;next &#x3D; current-&gt;next;\n        &#125;\n        free(current);\n    &#125;\n&#125;\n\nint main(void)&#123;\n    struct Node *head &#x3D; NULL;\n    int input;\n\n    printf(&quot;开始测试插入整数...\\n&quot;);\n    while(1)\n    &#123;\n        printf(&quot;请输入一个整数（输入-1表示结束：)：&quot;);\n        scanf(&quot;%d&quot;,&amp;input);\n        if(input &#x3D;&#x3D; -1)\n        &#123;\n            break;\n        &#125;\n        insertNode(&amp;head, input);\n        printNode(head);\n    &#125;\n\n    printf(&quot;开始测试删除整数...\\n&quot;);\n     while(1)\n    &#123;\n        printf(&quot;请输入一个整数（输入-1表示结束：)：&quot;);\n        scanf(&quot;%d&quot;,&amp;input);\n        if(input &#x3D;&#x3D; -1)\n        &#123;\n            break;\n        &#125;\n        deleteNode(&amp;head, input);\n        printNode(head);\n    &#125;\n\n    return 0;\n&#125;</code></pre>","feature":false,"text":"单链表链表是一种常见的数据结构。根据需求，我们可以构造出单链表、双链表、循环链表和块状链表等。链表的出现很大程度上弥补了数组的先天不足。 struct Test &#123; int x; int y; struct Test *test; &#125;; 在单链表中插入元素 #...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":11,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"c语言基础","slug":"c语言基础","count":2,"path":"api/tags/c语言基础.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%95%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">单链表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E5%8D%95%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">在单链表中插入元素</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%90%9C%E7%B4%A2%E5%8D%95%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">搜索单链表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">单链表的优势</span></a></li></ol>","author":{"name":"南瓜の无名","slug":"blog-author","avatar":"../picture/head_01.jpg","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"windows下cobaltstrike的简单使用笔记（汉化版）","uid":"683422935a9a4a685de276df60649fb9","slug":"工具_cs","date":"2023-04-30T12:30:34.000Z","updated":"2023-08-10T03:49:29.464Z","comments":true,"path":"api/articles/工具_cs.json","keywords":null,"cover":"../picture/20.jpg","text":"1.配置和启动配置teamserver，需要root权限。 .&#x2F;teamserver &lt;host&gt; &lt;password&gt; [&#x2F;path&#x2F;to&#x2F;c2.profile] [YYYY-MM-DD] &lt;host&gt;...","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"文章","slug":"文章","count":12,"path":"api/categories/文章.json"}],"tags":[{"name":"渗透工具","slug":"渗透工具","count":4,"path":"api/tags/渗透工具.json"}],"author":{"name":"南瓜の无名","slug":"blog-author","avatar":"../picture/head_01.jpg","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},"next_post":{}}