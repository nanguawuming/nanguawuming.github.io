{"title":"学习笔记_pwn_基础","uid":"bf12f99c59f93a73ca7d50f72ff5a5cf","slug":"学习笔记_pwn","date":"2023-08-25T12:30:34.000Z","updated":"2023-09-10T08:11:09.339Z","comments":true,"path":"api/articles/学习笔记_pwn.json","keywords":null,"cover":"../picture/33.jpg","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>学习网站：<a href=\"https://ctf-wiki.org/pwn/linux/user-mode/environment/\">https://ctf-wiki.org/pwn/linux/user-mode/environment/</a><br>推荐课程：<a href=\"https://www.bilibili.com/video/BV1mr4y1Y7fW/\">https://www.bilibili.com/video/BV1mr4y1Y7fW/</a></p></blockquote>\n<h3 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>学 pwn 之前先学 8086汇编就可以。</p></blockquote>\n<h4 id=\"常用或不常用的指令\"><a href=\"#常用或不常用的指令\" class=\"headerlink\" title=\"常用或不常用的指令\"></a>常用或不常用的指令</h4><ul>\n<li><code>file</code>指令用于确定给定文件的类型。它会读取文件的特定部分并尝试确定文件的格式，例如可执行文件、共享库、文本文件等。<strong>（重要）</strong></li>\n<li><code>ldd</code>指令用于打印可执行文件或共享库所依赖的共享库列表。它会分析可执行文件或共享库的依赖关系，并列出该文件需要加载的共享库的路径。<strong>（重要）</strong></li>\n<li><code>nm</code>指令用于显示可执行文件或共享库中的符号表信息。它可以列出函数、变量和其他符号的名称以及它们的地址。</li>\n<li><code>hexdump</code>指令用于以十六进制格式显示文件的内容。它会将文件的每个字节转换为十六进制，并显示它们的偏移量和字符表示形式。</li>\n<li><code>objdump -d -M intel</code>指令用于以Intel格式显示目标文件或可执行文件的反汇编代码。<strong>（不常用）</strong><ul>\n<li><code>-d</code>选项表示需要显示反汇编代码。</li>\n<li><code>-M intel</code>选项表示使用Intel格式显示指令。</li>\n</ul>\n</li>\n<li><code>readelf -a</code>指令用于显示目标文件或可执行文件的所有节(Sections)的详细信息。<strong>（不常用）</strong></li>\n</ul>\n<h4 id=\"汇编指令\"><a href=\"#汇编指令\" class=\"headerlink\" title=\"汇编指令\"></a>汇编指令</h4><p>常用汇编指令其实很少：</p>\n<ul>\n<li>MOV</li>\n<li>LEA</li>\n<li>ADD&#x2F;SUB</li>\n<li>PUSH</li>\n<li>POP</li>\n<li>CMP</li>\n<li>JMP</li>\n<li>J[Condition] JCC</li>\n<li>CALL</li>\n<li>LEAVE</li>\n<li>RET</li>\n<li>· · ·</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果你想追求程序极致的运行速度，可以参照英特尔的白皮书手写更复杂的汇编。</p></blockquote>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">sub rbp,0x18    &#x2F;&#x2F; 4\nmov rax,rbp     &#x2F;&#x2F; 3\n↓\nlea rax,[rbp-0x18]  &#x2F;&#x2F; 4\n\nxor ebx,ebx     &#x2F;&#x2F;2\n↓\nmov ebx,0       &#x2F;&#x2F;5\n\ncmp 和 sub 类似，cmp不存值，sub存值。\n\ntest 和 &amp; 类似，\ntest eax,eax    eax&amp;eax   eax&#x3D;0-&gt;0  eax!&#x3D;0-&gt;!0\n↓\ncmp eax,0\n\npush ebp: esp-4，把ebp放入esp指的地方\npop ebp: 把esp指的地方赋值给 ebp，esp+4\n\ncall: push eip ; jmp func\n\nleave: mov esp,ebp ; pop ebp\nret: pop eip</code></pre>\n\n<h4 id=\"强大的动态调试器\"><a href=\"#强大的动态调试器\" class=\"headerlink\" title=\"强大的动态调试器\"></a>强大的动态调试器</h4><ul>\n<li>运行</li>\n<li>步入，步过，步出，步止</li>\n<li>断电（设置，删除，显示）</li>\n<li>查看内存、寄存器、各种参数</li>\n<li>设置内存、寄存器、各种参数（加载文件）</li>\n<li>远程调试</li>\n<li>其他辅助功能</li>\n</ul>\n<h4 id=\"gcc-编译程序\"><a href=\"#gcc-编译程序\" class=\"headerlink\" title=\"gcc 编译程序\"></a>gcc 编译程序</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">GCC中四个编译过程的相应命令：\n- 预处理（Preprocessing）：\n使用gcc -E命令进行预处理，生成预处理后的代码文件。例如：gcc -E source.c -o preprocessed.c\n\n- 编译（Compilation）：\n使用gcc -S命令进行编译，生成汇编代码文件。例如：gcc -S preprocessed.c -o assembly.s\n\n- 汇编（Assembly）：\n使用gcc -c命令进行汇编，生成目标文件。例如：gcc -c assembly.s -o object.o\n\n- 链接（Linking）：\n使用gcc命令进行链接，生成最终的可执行文件。例如：gcc object.o -o executable</code></pre>\n\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">GCC编译32位程序：\nsudo apt-get install gcc-multilib g++-multilib module-assistant\n编译选项：gcc -m32 test.c -o test\ngcc test.c -fno-omit-frame-pointer -o test\ngcc -m32 test.c -fno-omit-frame-pointer -o test\n\n&#x2F;&#x2F; -fno-omit-frame-pointer选项禁用省略帧指针。\n\n&#x2F;&#x2F; &quot;-no-pie&quot;选项：默认情况下，gcc会生成可执行文件以PIE的形式，可执行文件的加载地址是可变的。\n&#x2F;&#x2F; &quot;-no-pie&quot;可以禁用PIE，生成传统的非位置无关可执行文件。\n\n&#x2F;&#x2F; &quot;-static&quot;选项：默认情况下，gcc会生成使用动态链接的可执行文件，可执行文件在运行时需要依赖系统中已安装的共享库。\n&#x2F;&#x2F; &quot;-static&quot;生成静态链接的可执行文件，可执行文件会将所有依赖的库静态地链接到可执行文件中，在运行时不再依赖于系统中的共享库。</code></pre>\n\n<h4 id=\"gdb-动态调试\"><a href=\"#gdb-动态调试\" class=\"headerlink\" title=\"gdb 动态调试\"></a>gdb 动态调试</h4><ul>\n<li><p>(gdb) run 用于直接启动程序的执行。</p>\n</li>\n<li><p>(gdb) start 用于启动程序的执行，但会在程序的入口点处设置一个断点。</p>\n</li>\n<li><p>(gdb) i r 显示当前程序的寄存器状态</p>\n</li>\n<li><p>(gdb) disassemble $rip</p>\n<ul>\n<li>~&#x2F;.gdbinit</li>\n<li>set disassembly-flavor intel</li>\n</ul>\n</li>\n<li><p>(gdb) b *地址 设置断点</p>\n</li>\n<li><p>(gdb) i b 显示当前已设置的断点信息。</p>\n</li>\n<li><p>(gdb) c 跳过当前断点或停止点，用于继续程序的执行。</p>\n</li>\n<li><p>(gdb) disable b 3 禁用编号为3的断点。</p>\n</li>\n<li><p>(gdb) enable b 3 启用编号为3的断点。</p>\n</li>\n<li><p>(gdb) ni 执行下一条机器指令。</p>\n</li>\n<li><p>(gdb) si 单步执行程序并进入函数。</p>\n</li>\n<li><p>(gdb) finish 让程序执行完当前函数并停止。</p>\n</li>\n<li><p>(gdb) <strong>x&#x2F;[格式] [地址]</strong> 查看内存中的数据。</p>\n<ul>\n<li>通过(gdb) x命令，可以以不同的格式查看内存中的数据。以下是一些常见的用法示例：<ul>\n<li>(gdb) x&#x2F;1b [地址]：以字节（byte）格式查看指定地址的内容。</li>\n<li>(gdb) x&#x2F;2w [地址]：以字（word）格式查看指定地址的内容。</li>\n<li>(gdb) x&#x2F;4x [地址]：以十六进制格式查看指定地址的内容。</li>\n<li>(gdb) x&#x2F;s [地址]：以字符串格式查看指定地址的内容。</li>\n<li>(gdb) x&#x2F;20gx [地址]命令用于以十六进制格式查看指定地址附近的20个64位数据。</li>\n<li><code>(gdb) x/20i $rip</code>命令用于查看当前指令地址（$rip）附近的指令。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>(gdb) <strong>set [变量名]&#x3D;[值]</strong> 通过该命令可以修改变量的值。</p>\n<ul>\n<li>set *((unsigned int)$ebp)&#x3D;0x18</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/../all_picture/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8Bpwn_01_01.png\" alt=\"pwn\"></p>\n<h4 id=\"部分寄存器的功能\"><a href=\"#部分寄存器的功能\" class=\"headerlink\" title=\"部分寄存器的功能\"></a>部分寄存器的功能</h4><ul>\n<li>RIP<ul>\n<li>存放当前执行的指令的地址。</li>\n</ul>\n</li>\n<li>RSP<ul>\n<li>存放当前栈帧的栈顶地址。</li>\n</ul>\n</li>\n<li>RBP<ul>\n<li>存放当前栈帧的栈底地址。</li>\n</ul>\n</li>\n<li>RAX<ul>\n<li>通用寄存器。存放函数返回值。</li>\n</ul>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>都可以类比8086汇编的寄存器，很好理解。</p></blockquote>\n<h4 id=\"最简单的-python-脚本示例\"><a href=\"#最简单的-python-脚本示例\" class=\"headerlink\" title=\"最简单的 python 脚本示例\"></a>最简单的 python 脚本示例</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>python 脚本可以发送不可打印字符。</p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># python2\nimport socket\nimport telnetlib\nimport struct\n\n&#39;&#39;&#39;\n def p32(val):\n  # 将32位的整数转化为字符串（小端模式）\n  return struct.pack(&quot;&quot;,val)\n&#39;&#39;&#39;\n\ndef pwn():\n  # 创建一个TCP socket\n  s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n  # 连接服务器 xxx.x.x.x 的 xxxx 端口\n  s.connect((&quot;xxx.x.x.x&quot;, xxxx))\n  # 填充数据\n  payload &#x3D; &#39;a&#39; * 8 + &#39;\\x10&#39;\n  s.sendall(payload + &#39;\\n&#39;)\n  # 创建 telnet 来产生一个控制服务器的 shell\n  t &#x3D; telnetlib.Telnet()\n  t.sock &#x3D; s\n  t.interact()\n\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;:\n  pwn()</code></pre>\n\n<h4 id=\"使用-pwntools-的简单示例\"><a href=\"#使用-pwntools-的简单示例\" class=\"headerlink\" title=\"使用 pwntools 的简单示例\"></a>使用 pwntools 的简单示例</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>官方中文文档：<a href=\"https://pwntools-docs-zh.readthedocs.io/zh_CN/dev/intro.html\">https://pwntools-docs-zh.readthedocs.io/zh_CN/dev/intro.html</a></p></blockquote>\n<p>示例1：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from pwn import *\n\ncontext(log_level&#x3D;&#39;debug&#39;,arch&#x3D;&#39;amd64&#39;,os&#x3D;&#39;linux&#39;)\nio &#x3D; process(&#39;.&#x2F;test&#39;)\n\n# io.recvuntil(&#39;input:\\n&#39;)\n# io.send(&#39;发送的内容&#39;)   # io.sendline(&#39;发送的内容&#39;)‘\npayload &#x3D; b&#39;a&#39;*9 + p64(0x4011b7)\ngdb.attach(io)\npause()\n\ndem &#x3D; b&#39;input\\n&#39;\nio.sendlineafter(dem,payload)\n\nio.interacive()</code></pre>\n\n<p>示例2：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from pwn import *\ncontext(log_level&#x3D;&#39;debug&#39;,arch&#x3D;&#39;i386&#39;,os&#x3D;&#39;linux&#39;)\npwnfile &#x3D; &#39;.&#x2F;test&#39;\nio &#x3D; process(pwnfile)\n# io &#x3D; remote(&#39;&#39;, )\nelf &#x3D; ELF(pwnfile)\nrop &#x3D; ROP(pwnfile)\n\npadding2ebp &#x3D; 0x10  # 0x14\npadding &#x3D; padding2ebp + context.word_size &#x2F;&#x2F; 8\n# 通过调试得到\n\nreturn_addr &#x3D; 0x80691f  # 返回地址\npayload &#x3D; b&#39;a&#39; * padding + p32(return_addr)\n# payload &#x3D; flat([&#39;a&#39;*padding,return_addr])\ndelimiter &#x3D; &#39;input:&#39;\nio.sendlineafter(delimiter,payload)\nio.interactive()</code></pre>\n\n<h4 id=\"pwndbg-调试的一些命令\"><a href=\"#pwndbg-调试的一些命令\" class=\"headerlink\" title=\"pwndbg 调试的一些命令\"></a>pwndbg 调试的一些命令</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pwndbg&gt; cyclic 100 # 生成长度100，特定重复模式的字符串\npwndbg&gt; cyclic -l 四个字符  # 定位重复模式中特定字符的位置\n\npwndbg&gt; distance 0x7fffffffdd60 0x7fffffffdd10\n# 计算两个内存地址之间的距离\n\npwndbg&gt; vmmap   #查看内存分配情况</code></pre>\n\n<h4 id=\"checksec-检查程序安全性\"><a href=\"#checksec-检查程序安全性\" class=\"headerlink\" title=\"checksec 检查程序安全性\"></a>checksec 检查程序安全性</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">checksec binary\n# 查看二进制文件的各种安全保护机制是否开启或禁用</code></pre>\n\n<p>checksec命令会显示以下安全保护机制的状态：</p>\n<ul>\n<li>软件堆栈保护（Stack Canary）：用于检测缓冲区溢出漏洞。</li>\n<li>可执行空间保护（Executable Space Protection）：防止代码注入攻击。</li>\n<li>数据执行保护（Data Execution Prevention）：防止执行非可执行内存中的代码。</li>\n<li>地址空间布局随机化（Address Space Layout Randomization）：随机化内存布局，增加攻击者的难度。</li>\n<li>文件位置独立（Position Independent Executable）：使二进制文件能够在任意地址加载。</li>\n</ul>\n<h3 id=\"栈溢出基础（ret2text）\"><a href=\"#栈溢出基础（ret2text）\" class=\"headerlink\" title=\"栈溢出基础（ret2text）\"></a>栈溢出基础（ret2text）</h3><h4 id=\"read-函数\"><a href=\"#read-函数\" class=\"headerlink\" title=\"read() 函数\"></a>read() 函数</h4><p>read()函数是一个用于从文件描述符中读取数据的系统调用函数。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;unistd.h&gt;\nssize_t read(int fd, void *buf, size_t count);</code></pre>\n\n<p>read() 函数接受三个参数：</p>\n<ol>\n<li><code>fd</code>：文件描述符，用于指定要读取的文件或文件流。通常情况下，标准输入、标准输出和标准错误输出的文件描述符分别为0、1和2。</li>\n<li><code>buf</code>：用于存储读取数据的缓冲区的指针。读取的数据将被存储到该缓冲区中。</li>\n<li><code>count</code>：要读取的最大字节数。read()函数将尝试从文件描述符中读取count个字节的数据。</li>\n</ol>\n<p>read()函数的返回值是一个ssize_t类型的整数，表示实际读取的字节数。如果返回值为-1，则表示读取过程中发生了错误。如果返回值为0，则表示已经到达文件的末尾。</p>\n<h4 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h4><ol>\n<li>call dofun &#x3D; (push eip,jmp)</li>\n<li>push ebp</li>\n<li>mov ebp,esp</li>\n<li>sub esp,0x20</li>\n<li>…</li>\n<li>leave &#x3D; (mov esp,ebp;pop ebp)</li>\n<li>ret &#x3D; pop eip</li>\n</ol>\n<h4 id=\"函数调用约定\"><a href=\"#函数调用约定\" class=\"headerlink\" title=\"函数调用约定\"></a>函数调用约定</h4><ul>\n<li>__cdecl: C&#x2F;C++默认方式，参数从右向左入栈，主调函数负责栈平衡。</li>\n<li>__stdcall: Windows API默认方式，参数从右向左入栈，被调函数负责栈平衡。</li>\n<li>__fastcall: 快速调用方式。所谓快速，这种方式选择将参数优先从寄存器传入（ECX和EDX），剩下的参数再从右向左从栈传入。因为栈是位于内存的区域，而寄存器位于CPU内，故存取方式快于内存，其名曰”__fastcall”</li>\n</ul>\n<h4 id=\"函数调用栈的工作方式（cdecl）\"><a href=\"#函数调用栈的工作方式（cdecl）\" class=\"headerlink\" title=\"函数调用栈的工作方式（cdecl）\"></a>函数调用栈的工作方式（cdecl）</h4><ul>\n<li>x86<ul>\n<li>使用栈来传递参数</li>\n<li>使用 eax 存放返回值</li>\n</ul>\n</li>\n<li>amd64<ul>\n<li>前 6 个参数一次存放于rdi、rsi、rdx、rcx、r8、r9寄存器中</li>\n<li>第七个以后的参数存放于栈中</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"ROP-返回导向编程\"><a href=\"#ROP-返回导向编程\" class=\"headerlink\" title=\"ROP 返回导向编程\"></a>ROP 返回导向编程</h4><ul>\n<li>PLT 程序连接表</li>\n<li>GOT 全局偏移表</li>\n</ul>\n<h4 id=\"pwntools-的简单示例\"><a href=\"#pwntools-的简单示例\" class=\"headerlink\" title=\"pwntools 的简单示例\"></a>pwntools 的简单示例</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from pwn import *\n\ncontext(log_level&#x3D;&#39;debug&#39;,arch&#x3D;&#39;amd64&#39;,os&#x3D;&#39;linux&#39;)\nio &#x3D; process(&#39;.&#x2F;test&#39;)\n\n# io.recvuntil(&#39;input:\\n&#39;)\n# io.send(&#39;发送的内容&#39;)   # io.sendline(&#39;发送的内容&#39;)‘\npayload &#x3D; b&#39;a&#39;*9 + p64(0x地址)\ngdb.attach(io)\npause()\n\ndem &#x3D; b&#39;input\\n&#39;\nio.sendlineafter(dem,payload)\n\nio.interacive()</code></pre>\n","feature":false,"text":" 学习网站：https://ctf-wiki.org/pwn/linux/user-mode/environment/推荐课程：https://www.bilibili.com/video/BV1mr4y1Y7fW/ 前置知识 学 pwn 之前先学 8086汇编就可以。 常用或不...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":11,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"pwn","slug":"pwn","count":2,"path":"api/tags/pwn.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">前置知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E6%88%96%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">常用或不常用的指令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">汇编指令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%BA%E5%A4%A7%E7%9A%84%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%99%A8\"><span class=\"toc-text\">强大的动态调试器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#gcc-%E7%BC%96%E8%AF%91%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">gcc 编译程序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#gdb-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95\"><span class=\"toc-text\">gdb 动态调试</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%83%A8%E5%88%86%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">部分寄存器的功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84-python-%E8%84%9A%E6%9C%AC%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">最简单的 python 脚本示例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-pwntools-%E7%9A%84%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">使用 pwntools 的简单示例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#pwndbg-%E8%B0%83%E8%AF%95%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">pwndbg 调试的一些命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#checksec-%E6%A3%80%E6%9F%A5%E7%A8%8B%E5%BA%8F%E5%AE%89%E5%85%A8%E6%80%A7\"><span class=\"toc-text\">checksec 检查程序安全性</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%88%E6%BA%A2%E5%87%BA%E5%9F%BA%E7%A1%80%EF%BC%88ret2text%EF%BC%89\"><span class=\"toc-text\">栈溢出基础（ret2text）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#read-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">read() 函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">函数调用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A\"><span class=\"toc-text\">函数调用约定</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%88%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F%EF%BC%88cdecl%EF%BC%89\"><span class=\"toc-text\">函数调用栈的工作方式（cdecl）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ROP-%E8%BF%94%E5%9B%9E%E5%AF%BC%E5%90%91%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">ROP 返回导向编程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#pwntools-%E7%9A%84%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">pwntools 的简单示例</span></a></li></ol></li></ol>","author":{"name":"南瓜の无名","slug":"blog-author","avatar":"../picture/head_01.jpg","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"��¼��pwn������װ-kali","uid":"8003ecab942c18e9228405bab8399681","slug":"pwn环境安装","date":"2023-08-25T12:30:34.000Z","updated":"2023-09-10T08:10:42.302Z","comments":true,"path":"api/articles/pwn环境安装.json","keywords":null,"cover":"../picture/32.jpg","text":"��¼��pwn��������-kali��Դ+����apt��Դsudo su vim &#x2F;etc&#x2F;apt&#x2F;sources.list ע�͵��ٷ���Դ�������пƴ��Դ�� #�пƴ� deb http:&#x2F;&#x2F;mirr...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"����","slug":"����","count":1,"path":"api/categories/����.json"}],"tags":[{"name":"pwn","slug":"pwn","count":2,"path":"api/tags/pwn.json"}],"author":{"name":"南瓜の无名","slug":"blog-author","avatar":"../picture/head_01.jpg","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},"next_post":{"title":"杂项摆烂的小记_基础篇_03","uid":"faf6da1b45f063e4da641b33779c9791","slug":"杂项摆烂小记03","date":"2023-08-25T12:30:34.000Z","updated":"2023-09-09T09:40:04.931Z","comments":true,"path":"api/articles/杂项摆烂小记03.json","keywords":null,"cover":"../picture/31.jpg","text":" 这里是杂项难度3的题，虽然这个难度其实没有意义。已经完成112道题了，学习到了很多新的东西，继续加油吧，少年！ 新的盐.swf文件查看帧swf文件，用PotPlayer打开可以进行每一帧的遍历 xortool（异或工具）xortool是一个多字节异或加密破解工具。 github...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"文章","slug":"文章","count":12,"path":"api/categories/文章.json"}],"tags":[{"name":"杂项","slug":"杂项","count":3,"path":"api/tags/杂项.json"}],"author":{"name":"南瓜の无名","slug":"blog-author","avatar":"../picture/head_01.jpg","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}