{"title":"hw面试题目整理_5H","uid":"8f5b9799b7ed902dedcbeb2c8c6a0648","slug":"38_AA_护网面试高频题目整理(持续更新)","date":"2023-08-25T12:30:34.000Z","updated":"2024-11-14T06:21:09.902Z","comments":true,"path":"api/articles/38_AA_护网面试高频题目整理(持续更新).json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/38.jpg","content":"<h2 id=\"hw面试题目整理-5H\"><a href=\"#hw面试题目整理-5H\" class=\"headerlink\" title=\"hw面试题目整理_5H\"></a>hw面试题目整理_5H</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>薪资保密 工作地点保密<br>保持冷静 语速放慢 目光坚定 自信 且沉稳</p></blockquote>\n<h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><h4 id=\"2021-owasp-top10\"><a href=\"#2021-owasp-top10\" class=\"headerlink\" title=\"2021_owasp_top10\"></a>2021_owasp_top10</h4><p>A01 失效的访问控制<br>A02 加密失败(敏感信息泄露)<br>A03 注入式攻击<br>A04 不安全的设计<br>A05 安全配置错误<br>A06 使用易受攻击和过时的组件<br>A07 认证和授权失效<br>A08 软件和数据完整性失效<br>A09 安全日志记录和监控失效<br>A10 服务器端请求伪造（SSRF）</p>\n<h4 id=\"什么是跨域，JSONP与CORS\"><a href=\"#什么是跨域，JSONP与CORS\" class=\"headerlink\" title=\"什么是跨域，JSONP与CORS\"></a>什么是跨域，JSONP与CORS</h4><h5 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h5><p>同源策略:同IP、同端口、同协议。</p>\n<p>浏览器执行JavaScript脚本时，会检查这个脚本属于哪个页面，如果不是同源页面，就不会被执行。</p>\n<h5 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域?\"></a>什么是跨域?</h5><p>跨域：指的是浏览器不能执行其他网站的脚本，它是由浏览器的同源策略造成的，是浏览器的安全限制之一。</p>\n<h5 id=\"JSONP跨域\"><a href=\"#JSONP跨域\" class=\"headerlink\" title=\"JSONP跨域\"></a>JSONP跨域</h5><p>利用JavaScript标签中src属性可以跨域的特性，使用callback参数的函数名来接收数据；<br>只接受GET请求，不支持POST等其他请求；<br>也不支持复杂请求，只支持简单请求。</p>\n<h5 id=\"CORS跨域\"><a href=\"#CORS跨域\" class=\"headerlink\" title=\"CORS跨域\"></a>CORS跨域</h5><p>支持所有的请求，包含GET、POST、OPTION、PUT、DELETE等，既支持复杂请求，也支持简单请求。<br>JSONP和CORS的使用目的相同，并且都需要服务器和客户端同时支持，但CORS的功能更加强大。</p>\n<p>JSONP和CORS的优缺点</p>\n<ol>\n<li>JSONP的主要优势在于对浏览器的支持较好；虽然目前主流浏览器都支持CORS，但IE9及以下不支持CORS；</li>\n<li>JSONP只能用于获取资源（即只读，类似于GET请求）；CORS支持所有类型的HTTP请求，功能完善；</li>\n<li>JSONP只会发送依次请求；而对于复杂请求，COIS会发两次请求；</li>\n</ol>\n<h4 id=\"常见的逻辑漏洞\"><a href=\"#常见的逻辑漏洞\" class=\"headerlink\" title=\"常见的逻辑漏洞\"></a>常见的逻辑漏洞</h4><p>支付漏洞或越权访问</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">例如：支付漏洞\n(1) 密码重置\n验证码直接在HTTP响应中返回；\n验证码未绑定用户，没和手机号和邮箱号做匹配验证；\n未校验用户字段值，改自己密码，最后提交其它UID；\n验证码不失效，可枚举；\n\n(2) 支付订单\n篡改支付金额，运费修改为负数，使总金额降低。\n\n(3) 竞争条件\n在文件上传中和购物时；\nA用户余额10元，B商品5元，C商品6元;\nA利用竞争条件多线程同时发起购买B和C的请求；\n可能的结果有：\n有一件商品购买失败；\n商品都购买成功，但只扣了6元；\n商品都购买成功，但余额为 -1元；</code></pre>\n\n<h4 id=\"如何排查Windows影子用户\"><a href=\"#如何排查Windows影子用户\" class=\"headerlink\" title=\"如何排查Windows影子用户\"></a>如何排查Windows影子用户</h4><p>1、常检查注册表，对陌生账户或不明账户，果断删除；</p>\n<p>2、账户设置好后，导出HKEY_LOCAL_MACHINE&#x2F;SAM&#x2F;SAM&#x2F;Domains&#x2F;Account&#x2F;groups键值并做好备份。然后从注册表中删除此键。需要创建用户和删除账户的时候，再导入该键值。</p>\n<p>3、打开“regedt32.exe”，来到“HKEY_LOCAL_MACHINE&#x2F;SAM”处，设置“SAM”项的权限，将“administrators”所拥有的权限全部取消即可限制查询和添加用户。</p>\n<h4 id=\"CSRF、XSS-及-XXE-有什么区别，以及修复方式？\"><a href=\"#CSRF、XSS-及-XXE-有什么区别，以及修复方式？\" class=\"headerlink\" title=\"CSRF、XSS 及 XXE 有什么区别，以及修复方式？\"></a>CSRF、XSS 及 XXE 有什么区别，以及修复方式？</h4><p>CSRF（跨站请求伪造）：</p>\n<ul>\n<li>特征：攻击者利用用户当前身份执行未经授权的操作，通过伪造用户的请求发送到目标网站，利用用户在目标网站上的已有的会话凭证。</li>\n<li>修复方式：筛选出需要防范 CSRF 的页面然后嵌入Token、再次输入密码、检验 Referer。</li>\n</ul>\n<p>XSS（跨站脚本攻击）：</p>\n<ul>\n<li>特征：攻击者将恶意脚本注入到网页中，当用户访问包含恶意脚本的页面时，浏览器会执行这些脚本，从而达到盗取用户信息、篡改页面内容等目的。</li>\n<li>修复方式：对字符实体进行转义、使用 HTTP Only 来禁 JavaScript 读取Cookie 值、输入时校验、浏览器与 Web 应用端采用相同的字符编码。</li>\n</ul>\n<p>XXE（XML外部实体攻击）：</p>\n<ul>\n<li>特征：攻击者利用XML解析器的漏洞，通过在XML文档中引用外部实体来执行恶意操作，可能导致信息泄露、拒绝服务等安全问题。</li>\n<li>修复方式：禁用或限制XML解析器中外部实体的引用，使用安全的XML解析器，或者对用户输入的XML数据进行严格的验证和过滤。</li>\n</ul>\n<h4 id=\"XSS三种类型\"><a href=\"#XSS三种类型\" class=\"headerlink\" title=\"XSS三种类型\"></a>XSS三种类型</h4><p>存储型 XSS（Stored XSS）：</p>\n<ul>\n<li>在存储型 XSS 攻击中，恶意脚本被存储在目标网站的数据库或文件系统中。</li>\n<li>攻击者通常利用网站上的用户交互功能，如留言板、评论框等，将恶意脚本提交到服务器。</li>\n<li>当其他用户访问包含恶意脚本的页面时，他们的浏览器会执行这些脚本，从而实现攻击目标，如盗取会话 cookie、篡改页面内容等。</li>\n</ul>\n<p>反射型 XSS（Reflected XSS）：</p>\n<ul>\n<li>在反射型 XSS 攻击中，恶意脚本被包含在 URL 参数中，并在服务器端被反射回响应中。</li>\n<li>攻击者通常通过欺骗用户点击包含恶意脚本的链接，或者诱导用户访问恶意构造的URL来触发攻击。</li>\n<li>一旦用户访问了带有恶意脚本的URL，服务器会将恶意脚本反射回响应中，浏览器执行该脚本，从而实现攻击目标。</li>\n</ul>\n<p>DOM型 XSS（DOM-based XSS）：</p>\n<ul>\n<li>在DOM型 XSS 攻击中，恶意脚本被直接插入到页面的DOM结构中，并由客户端的JavaScript执行。</li>\n<li>攻击者通常通过修改页面URL中的片段标识符（Fragment Identifier）或直接操作DOM来触发攻击。</li>\n<li>与存储型和反射型 XSS 不同，DOM型 XSS 攻击不涉及服务器端的代码执行，而是由客户端的JavaScript执行恶意操作。</li>\n</ul>\n<h4 id=\"ssrf可以造成那些危害？\"><a href=\"#ssrf可以造成那些危害？\" class=\"headerlink\" title=\"ssrf可以造成那些危害？\"></a>ssrf可以造成那些危害？</h4><p>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的版本信息；<br>攻击运行在内网或本地的应用程序；<br>对内网 WEB 应用进行指纹识别，通过访问默认文件实现(如：readme文件)；<br>攻击内外网的 web 应用，主要是使用 GET 参数就可以实现的攻击(如：Struts2，sqli)；<br>下载内网资源(如：利用file协议读取本地文件等)；<br>进行跳板；无视cdn；利用Redis未授权访问，HTTP CRLF注入实现getshell</p>\n<h4 id=\"文件上传白名单怎么绕过\"><a href=\"#文件上传白名单怎么绕过\" class=\"headerlink\" title=\"文件上传白名单怎么绕过\"></a>文件上传白名单怎么绕过</h4><ol>\n<li>删掉content-type</li>\n<li>构造多个filename</li>\n<li>content-type后面加TABLE键</li>\n<li>换行boundary</li>\n<li>文件名前面加空格</li>\n<li>文件名前面加单引号<br>白名单绕过：<br>1、搭配文件包含<br>2、搭配解析器漏洞<br>3、根据实际情况查看后缀是否在传参中，查看是否可控<br>4、如果版本太低可以使用00截断</li>\n</ol>\n<h4 id=\"sqlmap-–os-shell-原理详解\"><a href=\"#sqlmap-–os-shell-原理详解\" class=\"headerlink\" title=\"sqlmap –os-shell 原理详解\"></a>sqlmap –os-shell 原理详解</h4><p>对于mysql数据库来说，–os-shell的本质就是写入两个php后门文件，其中的一个可以让我们用来执行命令，而另外一个，如果在网站访问的话，可以让我们可以上传文件。</p>\n<p>需要知道网站的绝对路径，高权限数据库用户，<br>配置secure_file_priv权限，网站路径有写入权限</p>\n<p>导入导出的权限在mysql数据库中是由secure_file_priv参数来控制的，当这个参数后面为null时，表示不允许导入导出，如果为具体文件夹时，表示仅允许在这个文件夹下导入导出，如果后面没有值（为空）时，表示可以在任何文件夹下导入导出。</p>\n<p>当mysql 5.7版本以上的时候，secure_file_priv参数的值默认为null，也就是说，如果管理员没有修改过这个参数后面的数值的话，我们没办法在5.7以上版本使用–os-shell。</p>\n<h4 id=\"sqlmap-–sql-shell-和-–os-shell-的区别\"><a href=\"#sqlmap-–sql-shell-和-–os-shell-的区别\" class=\"headerlink\" title=\"sqlmap –sql-shell 和 –os-shell 的区别\"></a>sqlmap –sql-shell 和 –os-shell 的区别</h4><p>–sql-shell 是在目标数据库上打开交互式的 SQL shell，可以执行 SQL 命令。只能在已经注入目标数据库后使用<br>–os-shell 是在目标服务器上打开交互式shell，可以在目标服务器上执行系统命令，但是需要足够高的权限</p>\n<h4 id=\"如何利用-hatcess\"><a href=\"#如何利用-hatcess\" class=\"headerlink\" title=\"如何利用.hatcess\"></a>如何利用.hatcess</h4><p>配置文件上传的后缀解析。之后在上传指定如txt等文件，将会该文件解析为指定文件；<br>定义重定向，可以作为ssrf攻击；</p>\n<h4 id=\"获取目标站点的绝对路径\"><a href=\"#获取目标站点的绝对路径\" class=\"headerlink\" title=\"获取目标站点的绝对路径\"></a>获取目标站点的绝对路径</h4><ol>\n<li>如果是iis系统,尝试对参数进行恶意传值,使其出现报错页面</li>\n<li>对目标网站进行js代码审计,查看是否存在信息泄露出站点的绝对路径</li>\n<li>使用字典猜解目标站点的绝对路径</li>\n<li>如果目标是thinkphp框架,尝试访问无效的路径,或者对参数进行而已传值使其报错</li>\n<li>phpinfo页面泄露站点的绝对路径</li>\n</ol>\n<h4 id=\"怎样进行信息收集\"><a href=\"#怎样进行信息收集\" class=\"headerlink\" title=\"怎样进行信息收集\"></a>怎样进行信息收集</h4><p><img src=\"https://wiki.wgpsec.org/images/hw/infoscan.png\" alt=\"img\"></p>\n<ol>\n<li>获取目标的真实ip,如果有cdn就绕一下</li>\n<li>通过真实去进行半开放的端口扫描,获取目标服务</li>\n<li>通过审计js代码 + jsfinder工具查看是否存在接口泄露可以使我们进一步的利用</li>\n<li>对站点进行指纹识别,查看cms历史漏洞</li>\n<li>通过乌云查找目标的历史漏洞,查看脆弱点</li>\n<li>通过google黑语法搜索目标站点的敏感关键词 如 登录 后台 学号 上传</li>\n<li>通过目录扫描工具扫描目标站点文件,查看是否存在未授权访问文件或者更多的功能点</li>\n<li>通过潮汐 在线子域名 layer子域名挖掘机进行子域名收集</li>\n<li>通过nmap goby对c端进行信息收集</li>\n</ol>\n<h4 id=\"判断cdn\"><a href=\"#判断cdn\" class=\"headerlink\" title=\"判断cdn\"></a>判断cdn</h4><ol>\n<li>通过境外ip去平目标系统</li>\n<li>主动向我方的请求,如发邮件</li>\n<li>获取多个子域名ip对比</li>\n<li>DNS历史解析记录</li>\n<li>通过网络搜索引擎去搜索</li>\n<li>nslookup命令</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">nslookup -qt&#x3D;any bing.com</code></pre>\n\n<h4 id=\"钓鱼邮件处置思路\"><a href=\"#钓鱼邮件处置思路\" class=\"headerlink\" title=\"钓鱼邮件处置思路\"></a>钓鱼邮件处置思路</h4><p>1、先对需要处理的事件现场情况进行详细的了解，先将受害主机进行断网关机处理，如果有主机安全管理设备，先对所有主机资产进行病毒查杀。<br>2、查看发件人的邮件名，如果是自建的邮件服务器，可以查询域名IP备案信息等，扩大信息收集面。<br>3、通过查看邮件原文，查看发件人的IP地址，在威胁情报系统上进行查询。<br>4、上机排查:<br>a、<code>Netstat -ano(windows)</code>或者<code>netstat-antpleu(linux)</code>查询外联<br>b、记录有问题的进程PID，使用<code>tasklist /svc/fi “PID eq pid” (windows)</code>或者<code>ps aux | grep pid(linux)</code>，定位到进程<br>c、<code>wmic process get name,executablepath,processid|findstr PID</code>查看进程对应的文件路径</p>\n<h4 id=\"服务器存在webshell，如何处理\"><a href=\"#服务器存在webshell，如何处理\" class=\"headerlink\" title=\"服务器存在webshell，如何处理\"></a>服务器存在webshell，如何处理</h4><ol>\n<li>及时隔离主机</li>\n<li>定位事件范围，查看webshell文件创建时间，对webshell取证样本</li>\n<li>通过创建时间，结合日志分析可疑行为，以及启动用户的其他进程，去确定漏洞</li>\n<li>清除webshell及残留文件，参考上题目</li>\n</ol>\n<h4 id=\"windows入侵排查思路\"><a href=\"#windows入侵排查思路\" class=\"headerlink\" title=\"windows入侵排查思路\"></a>windows入侵排查思路</h4><ol>\n<li>检查系统账号安全、</li>\n<li>检查异常端口、进程</li>\n<li>检查启动项、计划任务、服务</li>\n<li>检查系统相关信息，查看系统版本以及补丁信息</li>\n<li>查找可以目录及文件</li>\n<li>日志分析</li>\n</ol>\n<h4 id=\"Linux入侵排查思路\"><a href=\"#Linux入侵排查思路\" class=\"headerlink\" title=\"Linux入侵排查思路\"></a>Linux入侵排查思路</h4><ol>\n<li>检查系统账号安全</li>\n<li>查看历史命令</li>\n<li>检查异常端口</li>\n<li>检查异常进程</li>\n<li>检查开机启动项</li>\n<li>检查定时任务</li>\n<li>检查异常服务</li>\n<li>检查异常文件</li>\n<li>检查系统日志</li>\n</ol>\n<h4 id=\"只有一个登录页面如何去测\"><a href=\"#只有一个登录页面如何去测\" class=\"headerlink\" title=\"只有一个登录页面如何去测\"></a>只有一个登录页面如何去测</h4><p>测试逻辑漏洞点</p>\n<ol>\n<li>密码找回凡是 发送邮件 手机号是否可用拦截</li>\n<li>登录时是否为前段验证,通过修改http回显包是否可用绕过个</li>\n<li>注册功能是否可用覆盖注册admin,注册页面是否存在二阶注入</li>\n<li>验证码是否可以绕过</li>\n<li>用户名是否可以进行暴力破解</li>\n</ol>\n<p>sql注入漏洞</p>\n<ol>\n<li>登录页面是否存在注入漏洞</li>\n<li>注册是否存在</li>\n<li>密码找回处是否存在</li>\n</ol>\n<p>js代码是否存在js接口泄露</p>\n<ol>\n<li>有些功能点屏蔽掉,但是js代码可以看到,通过控制台可以触发</li>\n<li>通过jsfinder查看是否存在可用接口</li>\n<li>通过源码查看是否存在接口泄露</li>\n</ol>\n<p>目录扫描</p>\n<ol>\n<li>探测是否存在未授权访问</li>\n<li>探测二级目录 三级目录</li>\n</ol>\n<p>查看漏洞库是否存在历史漏洞</p>\n<p>提取页面关键词去引擎搜索</p>\n<h4 id=\"网站有验证码-能想到哪些功能点来利用-挖漏洞-？\"><a href=\"#网站有验证码-能想到哪些功能点来利用-挖漏洞-？\" class=\"headerlink\" title=\"网站有验证码,能想到哪些功能点来利用(挖漏洞)？\"></a>网站有验证码,能想到哪些功能点来利用(挖漏洞)？</h4><p>通用设计缺陷</p>\n<ul>\n<li>验证码无效</li>\n</ul>\n<p>有验证码模块,但是验证模块与业务功能没有关联性,此为无效验证,无论输入什么都正确</p>\n<ul>\n<li>验证码由客户端生成 验证</li>\n</ul>\n<p>验证码由客户端js生成并且仅仅在客户端用js验证,通过抓包查看是否有验证码字段或者是关闭js看能否通过验证.</p>\n<ul>\n<li>验证码有回显</li>\n</ul>\n<p>验证码在html或者cookie中显示,或者输出到response headers的其他字段,可被直接查看</p>\n<ul>\n<li>验证码固定</li>\n</ul>\n<p>也叫验证码重复使用,是指验证码没有设置使用期限,在验证码首次认证成功后没有删除在session中的验证码,使得验证码可以被多次成功验证,从而造成危害.</p>\n<ul>\n<li>验证码可以爆破</li>\n</ul>\n<p>服务端未对验证时间 次数做出限制,存在爆破的可能性,简单的系统存在可以直接爆破的可能性,但是做过一些防护的系统还得进行一些绕过才能进行爆破</p>\n<ul>\n<li>验证码可猜解</li>\n</ul>\n<p>验证码比较简单,可以通过推测猜到有哪些验证吗</p>\n<ul>\n<li>短信轰炸</li>\n</ul>\n<p>没有对发送短信验证码的发送时间 用户 ip做出限制</p>\n<ul>\n<li><p>任意用户注册</p>\n</li>\n<li><p>任意用户密码重置</p>\n</li>\n</ul>\n<h4 id=\"do结尾的是什么语言\"><a href=\"#do结尾的是什么语言\" class=\"headerlink\" title=\".do结尾的是什么语言\"></a>.do结尾的是什么语言</h4><p>.do结尾的网页文件通常是用Java语言编写的，特别是在使用Struts框架时。在Struts框架中，.do通常被用作一种URL模式，它映射到Servlet，该Servlet会处理来自Web浏览器的请求，并将其转发到相应的服务器页面。.do并不是一个真正的文件扩展名，而是一个URL模式，用于在Web应用中路由请求。</p>\n<h4 id=\"agent内存马进行无文件落地注入原理\"><a href=\"#agent内存马进行无文件落地注入原理\" class=\"headerlink\" title=\"agent内存马进行无文件落地注入原理\"></a>agent内存马进行无文件落地注入原理</h4><p>Java Agent内存马是一种无文件攻击手段，也被称为无文件马。它利用Java Agent技术，在JVM中修改类的行为，从而实现恶意方法的注入。具体来说，Agent内存马分为Agent和注入Agent两部分。Agent会重写transform方法，并加入恶意代码，而注入Agent则会遍历VirtualMachine中的类，找到目标类，并将Agent附加到目标应用中。由于这种内存马并没有在具体的内存对象中添加Filter、Listener等，所以很难通过传统的方式在内存中查看到它。</p>\n<h4 id=\"agent内存马动态加载和静态加载的区别\"><a href=\"#agent内存马动态加载和静态加载的区别\" class=\"headerlink\" title=\"agent内存马动态加载和静态加载的区别\"></a>agent内存马动态加载和静态加载的区别</h4><p>在Agent内存马的场景中，静态加载意味着恶意代码或功能在Agent启动时就被注入到目标进程中，并且一直存在于内存中，可以随时被目标进程调用。这种方式可能更容易被安全系统检测到，因为它在进程启动时就产生了明显的痕迹。</p>\n<p>相比之下，动态加载的内存马可能更加隐蔽。它可以在需要时才将恶意代码或功能加载到内存中，从而更难被检测到。例如，内存马可以在收到特定指令或满足某些条件时才动态加载和执行恶意代码，从而增加了其隐蔽性和灵活性。</p>\n<h4 id=\"agent内存马查杀\"><a href=\"#agent内存马查杀\" class=\"headerlink\" title=\"agent内存马查杀\"></a>agent内存马查杀</h4><p>无法通过<code>java agent</code>技术拿到当前被修改的字节码,检测<code>Agent</code>马需要从<code>sa-jdi.jar</code>这个可以查看JVM中所有已经加载的类的GUI工具，想办法<code>dump</code>得到当前字节码</p>\n<p>可以<code>dump</code>下来认为存在风险的类当前字节码然后反编译人工审核,如果是内存马的话</p>\n<p>javaagent技术配合javassist技术能动态的获取到内存中字节码，对关键类进行校验,存在恶意代码直接替换成重新从javassist中取出来的该类的原始实现</p>\n<h4 id=\"水坑攻击和鱼叉攻击的区别\"><a href=\"#水坑攻击和鱼叉攻击的区别\" class=\"headerlink\" title=\"水坑攻击和鱼叉攻击的区别\"></a>水坑攻击和鱼叉攻击的区别</h4><p>水坑攻击是一种利用网站的弱点，在其中植入攻击代码，以攻击访问该网站的特定用户群的攻击方式。黑客会分析目标网站的上网规律，寻找攻击目标经常访问的网站的弱点，并先将此网站“攻破”并植入攻击代码。一旦攻击目标访问该网站，就会“中招”，即被植入恶意程序或者直接被盗取个人重要信息。这种攻击方式利用了用户对网站的信任，隐蔽性较强，且效率较高。</p>\n<p>鱼叉攻击则是黑客将木马程序作为电子邮件的附件，并起上一个极具诱惑力的名称，发送给目标电脑，诱使受害者打开附件，从而感染木马。这种攻击方式需要黑客对目标进行一定的了解，以便制作出更具诱惑力的电子邮件和附件，因此其针对性较强。</p>\n<h4 id=\"HTTP-返回状态码\"><a href=\"#HTTP-返回状态码\" class=\"headerlink\" title=\"HTTP 返回状态码\"></a>HTTP 返回状态码</h4><p>是用来表示 HTTP 请求响应的状态，由三位数字组成。<br>根据作用可以分为五大类：1xx（信息性状态码）、2xx（成功状态码）、3xx（重定向状态码）、4xx（客户端错误状态码）和 5xx（服务器错误状态码）。</p>\n<p>以下是常见的14种HTTP状态码及其含义:<br>200 OK ：请求成功。 客户端请求的资源已成功处理，返回结果。<br>204 No Content ：请求成功，但返回的响应报文中不含实体的主体部分（没有资源可以返回）。<br>300 Multiple Choices ：客户请求的文档可以在多个位置找到，服务器返回一个列表以供选择。<br>301 Moved Permanently ：请求的网页已永久移动到新位置。<br>302 Found ：请求的网页已临时移动到新位置。<br>304 Not Modified ：文档没有改变，客户端可以使用缓存的版本。<br>400 Bad Request ：客户端请求的语法错误，服务器无法理解。<br>401 Unauthorized ：请求要求用户的身份认证。<br>403 Forbidden ：服务器理解请求客户端的请求，但是拒绝执行此请求。<br>404 Not Found ：请求的资源不存在，服务器上没有找到。<br>500 Internal Server Error ：服务器内部错误，无法完成请求。<br>503 Service Unavailable ：服务器正忙，无法处理请求。</p>\n<h4 id=\"wireshark简单的过滤规则\"><a href=\"#wireshark简单的过滤规则\" class=\"headerlink\" title=\"wireshark简单的过滤规则\"></a>wireshark简单的过滤规则</h4><p>过滤 ip:<br>过滤源 ip 地址:ip.src1.1.1.1;,目的 ip 地址:ip.dst1.1.1.1;<br>过滤端口:<br>过滤 80 端口:tcp.port80,源端口:tcp.srcport80,目的端口:tcp.dstport80<br>协议过滤:<br>直接输入协议名即可,如 http 协议 http<br>http 模式过滤:<br>过滤 get&#x2F;post 包 http.request.mothod”GET&#x2F;POST”</p>\n<h4 id=\"TCP三次握手\"><a href=\"#TCP三次握手\" class=\"headerlink\" title=\"TCP三次握手\"></a>TCP三次握手</h4><p>客户端发送SYN包到服务器。<br>服务器收到SYN包，回复一个SYN+ACK包。<br>客户端收到服务器的SYN+ACK包后，回复一个ACK包，完成三次握手。</p>\n<h3 id=\"应急响应\"><a href=\"#应急响应\" class=\"headerlink\" title=\"应急响应\"></a>应急响应</h3><h4 id=\"应急响应基本流程思路-简要\"><a href=\"#应急响应基本流程思路-简要\" class=\"headerlink\" title=\"应急响应基本流程思路(简要)\"></a>应急响应基本流程思路(简要)</h4><ol>\n<li>抑制范围：隔离受害主机，使受害面不继续扩大</li>\n<li>收集信息：收集客户信息和中毒主机信息，包括样本</li>\n<li>判断类型：判断是否为安全事件，何种安全事件，勒索、挖矿、断网、DDos等等</li>\n<li>深入分析：日志分析、进程分析、启动项分析，样本分析方便后期溯源</li>\n<li>清理处置：杀掉进程，删除文件，打补丁，删除异常系统服务，清楚后门账号防止事件扩大，处理完毕后恢复生产</li>\n<li>产出报告：整理并输出完整的安全事件报告</li>\n</ol>\n<h4 id=\"Linux应急响应\"><a href=\"#Linux应急响应\" class=\"headerlink\" title=\"Linux应急响应\"></a>Linux应急响应</h4><p><strong>1. 排查用户信息</strong></p>\n<ol>\n<li>查看特权用户:</li>\n</ol>\n<pre class=\"line-numbers language-linux\" data-language=\"linux\"><code class=\"language-linux\">cat &#x2F;etc&#x2F;passwd\n# 查看用户信息文件\n\ncat &#x2F;etc&#x2F;shadow\n# 查看影子文件\n\nawk -F: &#39;$3&#x3D;&#x3D;0&#123;print $1&#125;&#39; &#x2F;etc&#x2F;passwd\ncat &#x2F;etc&#x2F;passwd | grep x:0\n# 查看系统是否还存在其他的特权账户，uid为0，默认系统只存在root一个特权账户</code></pre>\n\n<ol start=\"2\">\n<li><p>查看当前登录用户，以及其登录ip。pts代表远程登录，tty代表本地登陆。<br>who</p>\n</li>\n<li><p>查看目前登入系统的用户，以及他们正在执行的程序。<br>w</p>\n</li>\n<li><p>查看现在的时间、系统开机时长、目前多少用户登录，系统在过去的1分钟、5分钟和15分钟内的平均负载。<br>uptime</p>\n</li>\n<li><p>查看密码文件上一次修改的时间，如果最近被修改过，那就可能存在问题。<br>stat &#x2F;etc&#x2F;passwd</p>\n</li>\n<li><p>查看除了不可登录以外的用户都有哪些，有没有新增的<br>cat &#x2F;etc&#x2F;passwd | grep -v nologin</p>\n</li>\n<li><p>查看能用bash shell登录的用户。<br>cat &#x2F;etc&#x2F;passwd | grep &#x2F;bin&#x2F;bash</p>\n</li>\n</ol>\n<p><strong>2. 历史命令</strong><br>很多的服务器会有存在多用户登陆情况，登陆root用户可查看其他用户的相关账户登录信息，.bash_history保存了用户的登陆所操作的命令信息。</p>\n<p>查看历史命令<br>history</p>\n<p>保存历史命令<br>cat .bash_history &gt;&gt;history.txt</p>\n<p><strong>3. 端口</strong><br>查看端口开放和连接情况<br>netstat -pantu</p>\n<p>如果发现可疑外联IP，即可根据对应PID查找其文件路径<br>ls -l &#x2F;proc&#x2F;pid&#x2F;exe</p>\n<p><strong>4. 进程</strong><br>查看进程<br>ps -aux</p>\n<p>查看关联进程<br>ps -aux | grep pid</p>\n<p>查看cpu占用率前十的进程<br>ps aux –sort&#x3D;pcpu | head -10</p>\n<p><strong>5. 自启项</strong><br>查看开机启动项<br>systemctl list-unit-files | grep enabled</p>\n<p><strong>6. 定时任务</strong><br>查看定时任务<br>crontab  -l</p>\n<p>查看指定用户定时任务<br>crontab -u root -l<br>查看root用户任务计划</p>\n<p><strong>7. 进程监控</strong><br>进程动态监控，默认根据cpu的占用情况进行排序的，按b可根据内存使用情况排序。<br>top</p>\n<p>监控指定程序<br>top -p pid</p>\n<p>静态监控<br>ps -ef</p>\n<p><strong>8. host文件</strong><br>查看host文件是否被篡改<br>cat &#x2F;etc&#x2F;hosts</p>\n<p><strong>9. 登录日志</strong><br>统计爆破主机root账号的失败次数及ip：<br>grep “Failed password for root” &#x2F;var&#x2F;log&#x2F;secure | awk ‘{print $11}’ | sort | uniq -c | sort -nr | more</p>\n<p>查看成功登录的日期、用户名、IP：<br>grep “Accepted “ &#x2F;var&#x2F;log&#x2F;secure | awk ‘{print $1,$2,$3,$9,$11}’</p>\n<p><strong>10. 命令状态</strong><br>查看命名修改时间，防止被替换<br>stat &#x2F;bin&#x2F;netstat</p>\n<h4 id=\"windows应急响应\"><a href=\"#windows应急响应\" class=\"headerlink\" title=\"windows应急响应\"></a>windows应急响应</h4><p><strong>1.1 系统账户相关</strong><br>注意事项：弱口令、22&#x2F;3389 等端口是否对外</p>\n<p>查看账号的方法：</p>\n<p>net user（无法列出$用户）<br>lusrmgr.exe（无法找到注册表方式建立的用户）<br>查看注册表（最准）HKEY_LOCAL_MACHINE\\SAM\\SAM\\Domains\\Account\\Users<br>D 盾有查看账户的功能<br>查看登录日志：<br>eventvwr.msc，然后使用 Log Parser 进行日志审计。</p>\n<p>BTW：可以通过改注册表的方式，来建立隐藏的账户</p>\n<p><strong>1.2 进程、端口相关</strong><br>查看开放的端口：netstat -ano</p>\n<p>重点看状态是 ESTABLISHED 的端口：netstat -ano | findstr ‘estab’</p>\n<p>查看路由：netstat -rn</p>\n<p>查看系统信息：msinfo32，依次点击 软件环境→正在运行任务，可以看到当前的进程</p>\n<p>查找PID对应的进程： tasklist | findstr PID</p>\n<p>杀死进程：</p>\n<p>taskkill &#x2F;f &#x2F;pid 123 &#x2F;t<br>taskkill &#x2F;f &#x2F;im explorer.exe &#x2F;t<br>查看进程对应的文件：依次输入 wmic– process</p>\n<p>显示 进程–PID–服务：?tasklist &#x2F;svc</p>\n<p>查看 Windows 服务所对应的端口：<br>%system%&#x2F;system32&#x2F;drivers&#x2F;etc&#x2F;services（一般 %system% 就是 C:\\Windows ）</p>\n<p>遇到可疑的 IP，可以使用微步在线查看 IP 的信誉，alfred 快速搜索：<br><a href=\"https://x.threatbook.cn/nodev4/ip/%7Bquery%7D\">https://x.threatbook.cn/nodev4/ip/{query}</a></p>\n<p>防火墙配置：netsh firewall show all</p>\n<p><strong>1.3 启动项、计划任务、服务</strong></p>\n<ol>\n<li>启动项相关</li>\n</ol>\n<p>开机启动文件夹：【开始】&gt;【所有程序】&gt;【启动】<br>对应的路径：C:\\Users\\xxxx\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</p>\n<p>系统配置的启动项：msconfig</p>\n<p>注册表的启动项：</p>\n<p>HKEY_CURRENT_USER\\software\\micorsoft\\windows\\currentversion\\run HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Runonce<br>组策略：gpedit.msc 依次选择 【计算机配置】【Windows 设置】【脚本】【启动】</p>\n<p>使用工具：Autoruns</p>\n<ol start=\"2\">\n<li>服务相关</li>\n</ol>\n<p>查看服务：services.msc</p>\n<ol start=\"3\">\n<li>系统信息</li>\n</ol>\n<p>查看系统信息及补丁：systeminfo</p>\n<ol start=\"4\">\n<li>可疑文件和目录</li>\n</ol>\n<p>自动生成的用户目录：</p>\n<p>Window 2003 C:\\Documents and Settings<br>Window 2008R2 C:\\Users<br>最近打开的文件：%UserProfile%\\Recent</p>\n<p>排查的几个点：</p>\n<p>回收站、浏览器下载记录、浏览器历史记录<br>时间排序，查看最新的文件<br>修改时间在创建时间之前的文件<br>5. 日志相关</p>\n<p>查看日志：eventvwr.msc<br>打开事件查看器去查看目录</p>\n<h4 id=\"windows日志相关\"><a href=\"#windows日志相关\" class=\"headerlink\" title=\"windows日志相关\"></a>windows日志相关</h4><p><strong>2.1 日志目录</strong><br>Windows 2000 &#x2F; Server2003 &#x2F; Windows XP 的日志目录<br>%SystemRoot%\\System32\\Config*.evt</p>\n<p>Windows Vista &#x2F; 7 &#x2F; 10 &#x2F; Server2008 的日志目录<br>%SystemRoot%\\System32\\winevt\\Logs*.evtx</p>\n<p>系统日志（System.evtx）：驱动程序、系统组件和应用软件的崩溃以及数据丢失错误等</p>\n<p>应用程序日志（Application.evtx）：记录程序运行方面的事件</p>\n<p>安全日志（Security.evtx）：登录日志、对象访问日志、进程追踪日志、特权使用、帐号管理、策略变更、系统事件。安全日志也是调查取证中最常用到的日志。默认设置下，安全性日志是关闭的，管理员可以使用组策略来启动安全性日志，或者在注册表中设置审核策略，以便当安全性日志满后使系统停止响应<br>修改配置策略，默认的话只会记录一些简单的，可以按照下面这个改配置<br>修改方法：开始 → 管理工具 → 本地安全策略 → 本地策略 → 审核策略</p>\n<p><strong>2.2 日志分析工具 - Log Parser</strong><br>登录成功的所有事件<br>LogParser.exe -i:EVT –o:DATAGRID  “SELECT *  FROM c:\\Security.evtx where EventID&#x3D;4624”</p>\n<p>指定登录时间范围的事件：<br>LogParser.exe -i:EVT –o:DATAGRID  “SELECT *  FROM c:\\Security.evtx where TimeGenerated&gt;’2018-06-19 23:32:11’ and TimeGenerated&lt;’2018-06-20 23:34:00’ and EventID&#x3D;4624”</p>\n<p>提取登录成功的用户名和IP：<br>LogParser.exe -i:EVT  –o:DATAGRID  “SELECT EXTRACT_TOKEN(Message,13,’ ‘) as EventType,TimeGenerated as LoginTime,EXTRACT_TOKEN(Strings,5,’|’) as Username,EXTRACT_TOKEN(Message,38,’ ‘) as Loginip FROM c:\\Security.evtx where EventID&#x3D;4624”</p>\n<p>登录失败的所有事件：<br>LogParser.exe -i:EVT –o:DATAGRID  “SELECT *  FROM c:\\Security.evtx where EventID&#x3D;4625”</p>\n<p>提取登录失败用户名进行聚合统计：<br>LogParser.exe  -i:EVT “SELECT  EXTRACT_TOKEN(Message,13,’ ‘)  as EventType,EXTRACT_TOKEN(Message,19,’ ‘) as user,count(EXTRACT_TOKEN(Message,19,’ ‘)) as Times,EXTRACT_TOKEN(Message,39,’ ‘) as Loginip FROM c:\\Security.evtx where EventID&#x3D;4625 GROUP BY Message”</p>\n<p>LogParser.exe -i:EVT –o:DATAGRID  “SELECT TimeGenerated,EventID,Message FROM c:\\System.evtx where EventID&#x3D;6005 or EventID&#x3D;6006”</p>\n<h4 id=\"windows常用命令\"><a href=\"#windows常用命令\" class=\"headerlink\" title=\"windows常用命令\"></a>windows常用命令</h4><p><strong>0x03、快捷指令</strong></p>\n<p><strong>系统相关</strong>、】</p>\n<ol>\n<li>compmgmt.msc—计算机管理<br>【包括 计划任务、事件查看器、共享文件夹、本地用户和组、设备管理器、磁盘管理、服务、WMI】</li>\n<li>devmgmt.msc—-设备管理器 【包含于compmgmt】</li>\n<li>lusrmgr.msc—-本地用户和组【包含于compmgmt】4. perfmon.msc—-计算机性能监测程序 【包含于compmgmt】</li>\n<li>diskmgmt.msc—磁盘管理实用程序 【包含于compmgmt】</li>\n<li>fsmgmt.msc—–共享文件夹管理器 【包含于compmgmt】</li>\n<li>services.msc—本地服务设置    【包含于compmgmt】</li>\n<li>eventvwr.msc—事件查看器     【包含于compmgmt】</li>\n<li>wmimgmt.msc—-打开windows管理体系结构(WMI) 【包含于compmgmt】</li>\n<li>gpedit.msc—-组策略</li>\n<li>regedt32——注册表编辑器    【与 regedit 类似】</li>\n<li>Msconfig.exe–系统配置实用程序 【包括引导、服务、启动项和工具】</li>\n<li>rsop.msc——组策略结果集 </li>\n<li>regedit.exe—注册表 </li>\n<li>dcomcnfg——打开系统组件服务 【包括 组件服务、事件查看器、服务】</li>\n<li>wscript——-windows脚本宿主设置 </li>\n<li>certmgr.msc—证书管理实用程序 【排查电脑内恶意证书】</li>\n<li>secpol.msc—-本地安全策略 </li>\n<li>services.msc–本地服务设置 </li>\n<li>gpedit.msc—-组策略</li>\n<li>sigverif——文件签名验证程序 【可以快速筛选出来没有通过签名验证的程序】</li>\n</ol>\n<p><strong>程序快速启动</strong></p>\n<ol>\n<li>explorer——-打开资源管理器 </li>\n<li>notepad——–打开记事本</li>\n<li>charmap——–打开字符映射表 </li>\n<li>calc———–打开计算器 </li>\n<li>taskmgr——–打开任务管理器</li>\n<li>mstsc———-远程桌面连接 </li>\n<li>write———-打开写字板 </li>\n<li>mspaint——–打开画图板 </li>\n<li>magnify——–放大镜实用程序 </li>\n<li>mmc———–打开控制台  </li>\n<li>Sndvol32——打开音量控制程序 </li>\n<li>eudcedit——打开造字程序 </li>\n<li>cliconfg——SQL SERVER 客户端网络实用程序</li>\n<li>osk———–打开屏幕键盘 </li>\n<li>odbcad32——ODBC数据源管理器 </li>\n<li>iexpress——捆绑工具，系统自带【可以用来制作免杀马】</li>\n</ol>\n<p><strong>磁盘相关</strong></p>\n<ol>\n<li>cleanmgr——-打开磁盘清理工具</li>\n<li>chkdsk.exe—–Chkdsk磁盘检查<br>检查相关</li>\n<li>dxdiag———检查DirectX信息</li>\n<li>winver———检查Windows版本</li>\n<li>sfc &#x2F;scannow—扫描错误并复原</li>\n<li>sfc.exe——–系统文件检查器</li>\n</ol>\n<p><strong>net 相关</strong><br>查看域中当前的主机列表：<br>net view &#x2F;domain</p>\n<p>查看当前域中的用户<br>net user &#x2F;domain</p>\n<p>增加一个本地用户<br>net user username password &#x2F;add</p>\n<p>将新增的用户加到本地管理员组<br>net localgroup “Administrators” username &#x2F;add</p>\n<p>查看域中的密码策略<br>net accounts &#x2F;domain</p>\n<p>查看本地组<br>net localgroup “Group”</p>\n<p>查看域中的组信息<br>net group &#x2F;domain</p>\n<p>查看域中指定组的成员<br>net group “Domain group” &#x2F;domain</p>\n<p>查看当前机器所在的域名<br>net config workstation</p>\n<p>查看当前服务器所在的域名<br>net config server</p>\n<p><strong>系统显示相关</strong><br>显示系统信息<br>systeminfo</p>\n<p>查看远程主机的系统信息<br>systeminfo &#x2F;S ip &#x2F;U domain\\user &#x2F;P Pwd</p>\n<p>显示进程和服务信息<br>tasklist &#x2F;svc</p>\n<p>显示所有进程以及DLL信息<br>tasklist &#x2F;m</p>\n<p>显示进程和所有者<br>tasklist &#x2F;v</p>\n<p>查看远程主机的进程列表<br>tasklist &#x2F;S ip &#x2F;v</p>\n<p>显示具体的服务信息（包括二进制路径和运行使用）<br>sc qc Spooler</p>\n<p><strong>网络信息</strong><br>打印路由表<br>route print</p>\n<p>保存当前主机上的所有WiFi信息<br>netsh wlan export profile folder&#x3D;. key&#x3D;clear</p>\n<p>设置当前配置禁用防火墙<br>netsh advfirewall set currentprofile state off</p>\n<p>设置端口转发<br>netsh interface portproxy add v4tov4 listenport&#x3D;3000 listenaddress&#x3D;l.l.l.l connectport&#x3D;4000 connectaddress&#x3D;2.2.2.2</p>\n<p>启用远程访问<br>reg add “HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server” &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f</p>\n<p>启用远程协助<br>reg add “HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server” &#x2F;v fAllowToGetHelp &#x2F;t REG_DWORD &#x2F;d 1 &#x2F;f</p>\n<p>修改远程访问端口<br>reg add “HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp” &#x2F;v PortNumber &#x2F;t REG_DWORD &#x2F;d 12345 &#x2F;f</p>\n<p><strong>windows工具</strong><br>Procexp —–查看进程的详细信息，比如 加载的 dll 文件、签名、内存使用等<br>autoruns —-查看计划任务、自启动、服务等信息<br>TCPView —–查看网络连接的情况<br>PSExec ——轻量级的 telnet 工具</p>\n<p>Registry Workshop：好用的注册表工具<br>Event Log Explorer：查看系统日志</p>\n<h4 id=\"webshell应急响应\"><a href=\"#webshell应急响应\" class=\"headerlink\" title=\"webshell应急响应\"></a>webshell应急响应</h4><h5 id=\"Webshell检测\"><a href=\"#Webshell检测\" class=\"headerlink\" title=\"Webshell检测\"></a>Webshell检测</h5><p><strong>2.1、基于流量的Webshell检测</strong><br>基于流量的Webshel检测方便部署，我们可通过流量镜像直接分析原始信息。基于payload的行为分析，我们不仅可对已知的Webshell进行检测，还可识别出未知的、伪装性强的Webshell，对Webshell的访问特征 (IP&#x2F;UA&#x2F;Cookie) 、payload特征、 path特征、 时间特征等进行关联分析，以时间为索引，可还原攻击事件。</p>\n<p><strong>2.2、基于文件的Webshell检测</strong><br>我们通过检测文件是否加密(混淆处理) ，创建Webshell样本hash库，可对比分析可疑文件。对文件的创建时间、修改时间、文件权限等进行检测，以确认是否为Webshell。</p>\n<p><strong>2.3、基于日志的Webshell检测</strong><br>对常见的多种日志进行分析，可帮助我们有效识别Webshell的上传行为等。通过综合分析，可回溯整个攻击过程。</p>\n<h5 id=\"Webshell应急响应排查\"><a href=\"#Webshell应急响应排查\" class=\"headerlink\" title=\"Webshell应急响应排查\"></a>Webshell应急响应排查</h5><p><strong>1、Windows排查</strong><br>利用Webshell扫描工具(如D盾)对应用部署目录进行扫描，如网站D: \\WWW\\目录，或者将当前网站目录文件与此前备份文件进行比对，查看是否存在新增的不一致内容，确定是否包含Webshell相关信息， 并确定Webshel位置及创建时间。然后利用文本文件打开，进一步分析发现可疑内容。</p>\n<p><strong>2、Linux排查</strong><br>在Windows系统中使用的Webshell检测方法在Linux系统中同样适用。在Linux系统中，可用河马Webshell查杀工具扫描，也可手工搜索可能包含Webshell特征的文件。</p>\n<p>&#x2F;&#x2F;搜索目录下适配当前应用的网页文件，查看内容是否有Webshell特征</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">find .&#x2F; type f -name &quot;*.jsp&quot; | xargs grep &quot;exec(&quot; \nfind .&#x2F; type f -name &quot;*.php&quot; | xargs grep &quot;eval(&quot; \nfind .&#x2F; type f -name &quot;*.asp&quot; | xargs grep &quot;execute(&quot; \nfind .&#x2F; type f -name &quot;*.aspx&quot; | xargs grep &quot;eval(&quot; </code></pre>\n\n<p>&#x2F;&#x2F;对于免杀Webshell，可以查看是否使用编码</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">find .&#x2F; type f -name &quot;*.php&quot; | xargs grep &quot;base64_decode&quot; </code></pre>\n\n<p><strong>判断Webshell事件发生时间：</strong><br>根据异常现象发生时间，结合网站目录中Webshell文件的创建时间，可大致定位事件发生的时间段。以便后续依据此时间进行溯源分析、追踪攻击者的活动路径。</p>\n<p><strong>对攻击路径进行溯源分析：</strong><br>如果网站被植入暗链或出现单击链接跳转到其他网站(如博彩网站、色情网站等)的情况，应首先排查网站首页相关js，查看是否被植入了恶意跳转的js。<br>若网站首页被篡改或有其他被攻击的现象，可以根据网站程序信息，如程序目录、文件上传目录、war包部署目录，使用工具(如D盾)和搜索关键词(如eval、 base64_ decode、assert)方式，定位到Webshell文件并清除。然后根据日志进行溯源分析，同时除了进行Web应用层排查，还应对系统层进行全面排查，防止攻击者在获取Webshel后执行了其他的权限维持操作。</p>\n<p><strong>系统排查</strong><br>攻击者上传Webshell后，往往还会执行进一步的操作，如提权、添加用户、写入系统后门等，实现持久化驻留。</p>\n<p><strong>windows入侵排查</strong><br>1、用户信息排查<br>用户排查：<br>使用net user命令，可直接查看用户信息(此方法看不到隐藏用户)，若发现存在非管理员使用账户，则可能为异常账户；<br>如果需查看某个账户的详细信息，可使用net user username命令。<br>隐藏用户排查：<br>打开计算机管理–&gt;本地用户和组，可查询隐藏用户。用户名称以$结尾的为隐藏用户。</p>\n<p>克隆用户排查：<br>可使用注册表，利用F值进行对比，以排查克隆用户。也可直接使LP_Check工具排查克隆用户。</p>\n<p>2、进程、服务、驱动、启动项排查<br>进程排查：<br>在排查可疑进程时，可以关注进程名称，对于异常的、不常见的名称要格外注意，另外可以重点观察进程的路径、CPU占用信息等。打开系统信息和任务管理器窗口，均可查看进程名称及其对应的执行文件。</p>\n<p>进程信息还可以使用PCHunter工具查看，信息中黑色的条目代表微软进程；<br>蓝色的条目代表非微软进程，可能是第三方应用程序的进程，蓝色缺少文件厂商信息的进程需多加关注；<br>红色的条目代表可疑进程、隐藏服务、被挂钩函数。</p>\n<p>服务排查：<br>在系统信息窗口–&gt;软件环境–&gt;服务，可查看服务的启动情况及其对应的启动文件；或使用services.msc 命令，也可直接查看服务。查找异常服务。</p>\n<p>驱动、启动项排查：<br>命令行msconfig打开启动项；<br>Get-WmiObject Win32_PnPSignedDriver| select DeviceName, DriverVersion命令可查看驱动；</p>\n<p>3、网络连接排查<br>使用系统自带的netstat -ano命令，可查看当前网络连接情况，如果当前服务器只允许对指定IP地址建立连接，那么若发现未在指定范围内的连接情况，则很可能是异常连接。</p>\n<p>也可以使用工具(如TCPView)查看网络连接详细信息。TCPView可用于检测当前系统中的进程及其对应的连接状态。当进程标记为绿色时，表示该连接为新发起的连接，当进程标记为红色时，表示该连接为结束状态。</p>\n<p>4、任务计划排查<br>攻击者在攻击成功后，添加任务计划往往是为了持久化控制。任务计划日志通常存放在C:\\WINDOWS\\System32\\Tasks目录下，可以直接打开系统自带的任务计划程序窗口进行查看。若发现非自定义的任务计划，则较为可疑，需进行排查。</p>\n<p>5、文件排查<br>攻击者在攻击成功后可能会在本地留下过程文件，这时需要应急响应工程师排查各个盘符下的相关敏感目录，以便确定是否存在异常文件。</p>\n<p>temp相关目录：</p>\n<p>temp指系统临时文件夹，用于存储系统临时文件。在Windows系统中，常见temp目录主要分布在如下位置:<br>C:\\Windows\\temp<br>C:\\Users\\Administrator\\AppData\\Local\\temp</p>\n<p>在寻找可疑文件时，先重点查看攻击时间范围内的文件，然后通过文件命令来判断。一般凡是在非系统System32或Syswow64目录下的svchost.exe文件基本为恶意文件；另外，命名特殊的文件也要重点排查。发现可疑文件后，可以提取样本做进一步的鉴定。</p>\n<p>recent相关目录：<br>可通过查看最近打开的文件，判断可疑文件，目录如下:<br>C:\\Documents and Settings\\Administrator\\recent<br>C:\\Documents and Settings\\Default User\\recent</p>\n<p><strong>4.2、Linux系统排查</strong><br><strong>1、用户信息排查</strong></p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">&#x2F;&#x2F;查看UID为0的用户\nawk -F: &#39;&#123;if($3&#x3D;&#x3D;0)print $1&#125;&#39; &#x2F;etc&#x2F;passwd\n&#x2F;&#x2F;查看能够登录的用户\ncat &#x2F;etc&#x2F;passwd ｜ grep -v &quot;nologin&quot; ｜ grep -v &quot;false&quot;\n&#x2F;&#x2F;查看是否存在空口令用户\nawk -F: &#39;length($2)&#x3D;&#x3D;0 &#123;print $1&#125;&#39; &#x2F;etc&#x2F;shadow</code></pre>\n\n<p><strong>2、进程、服务、网络连接排查</strong><br>ps aux 命令查看系统进程；<br>kill -9 PID 命令，可结束PID；<br>netstat -anp 命令，可查看网络连接、进程、端口及对应的PID等，排查时可优先关注对外连接的进程，或连接高危端口的进程;<br>ls -alh &#x2F;proc&#x2F;PID，可查看其对应的可执行程序;<br>rm -rf filename命令删除进程;</p>\n<p>如果root用户都无法删除相关文件，那么可能是文件被加上了i属性(设定文件不能被删除、改名、设定连接关系，同时不能写入或新增内容)。可以使用lsatter filename命令查看文件属性，然后使用chattr -i filename命令移除i属性，然后执行删除命令。</p>\n<p>lsof -p PID命令查看PID对应的可执行程序。<br>lsof -i:port命令查看指定端口对应的可执行程序。<br>top命令：可以根据CPU、内存占用率查看可疑进程。</p>\n<p>查看隐藏进程。可以借助unhide工具排查隐藏进程。unhide是一个小巧的网络取证工具，能发现隐藏的进程和TCP&#x2F;UDP端口。该工具在Linux、UNIX、MS-Windows等操作系统中都可用。</p>\n<p>chkconfig –list命令，可查看系统运行的服务，核查是否存在异常服务。</p>\n<p><strong>3、开机自启动排查</strong><br>攻击者在攻击成功后往往会设置开机自启动，以实现持久化控制。<br>在Linux系统中，系统启动内核挂载根文件系统，然后启动并运行一个init程序，init进程的任务就是运行开机启动的程序，init是非内核进程中第一个被启动运行的，因此它的PID的值总是1，init读取其配置文件来进行初始化工作。</p>\n<p>Linux系统为不同的场合分配不同的开机启动程序，又称为“运行级别”(run level) ，如下表所示：</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">运行级别\t说明\n运行级别0\t系统停机状态，系统默认运行级别不能为0，否则将不能正常启动\n运行级别1\t单用户工作状态，root 权限，用于系统维护，禁止远程登录\n运行级别2\t多用户状态(没有NFS )\n运行级别3\t完全的多用户状态(有NFS)，登录后进入控制台命令行模式\n运行级别4\t系统未使用，保留\n运行级别5\tX11控制台，登录后进入GUI模式\n运行级别6\t系统正常关闭并重启，默认运行级别不能为6，否则将不能正常启动</code></pre>\n\n<p>7个运行级别分别对应7个目录，对应&#x2F;etc&#x2F;rc[0-6].d下的7个文件夹（rc0.d—&gt;rc6.d），每个目录下有对应的启动文件，具体文件路径都是在&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;目录中。<br>其中，文件名：字母S[K]+两位数字+程序名”的形式。字母S表示Start，启动；字母K表示Kill，关闭。<br>在这里插入图片描述<br>旧版本的linux下&#x2F;etc&#x2F;rc.d&#x2F;目录下还有init.d目录和rc.local文件；新版本linux是在&#x2F;etc目录下查看。<br>init.d目录通常用于存放一些脚本， 包括linux系统中以rpm包安装时设定的一些服务的启动脚本，类似于Windows系统中的注册表；<br>在这里插入图片描述</p>\n<p>显示详细信息<br>rc.local文件会在用户登录之前读取，在每次系统启动时都会执行一次，也就是说，如果有任何需要在系统启动时运行的工作，那么只需写入&#x2F;etc&#x2F;rc.d&#x2F;rc.local配置文件即可。<br>点击查看Linux中没有rc.local文件的解决方法</p>\n<p><strong>进行应急响应处置时应重点关注以下目录文件(依系统而定) :</strong><br>1、查看运行级别:<br>    # runlevel<br>2、配置运行级别<br>    # vi  &#x2F;etc&#x2F;inittab<br>    # id&#x3D;5：initdefault  系统开机后直接进入哪个运行级别<br>3、查看启动项文件：<br>    # more &#x2F;etc&#x2F;rc.local &#x2F;etc&#x2F;rc.d&#x2F;rc[0<del>6].d ls -l &#x2F;etc&#x2F;rc.d&#x2F;rc3.d&#x2F;<br>4、查看init.d下的所有文件信息<br>    # ls -alt &#x2F;etc&#x2F;init.d<br>5、查看init.d下的rc.local文件内容<br>    # cat &#x2F;etc&#x2F;init.d&#x2F;rc.local<br>6、rc.local为开机启动配置文件，查看rc.local文件内容<br>    # cd &#x2F;etc&#x2F;rc.local<br>    # cd &#x2F;etc&#x2F;rc.d&#x2F;rc[0</del>6].d</p>\n<p><strong>4、定时任务排查</strong><br>攻击者通常用定时任务来进行持久化控制：<br>crontab -l命令是用户级别的，保存在&#x2F;var&#x2F;spool&#x2F;cron&#x2F;{user}中，每个用户都可以使用crontab -e命令编辑自己的定时任务列表。使用crontab -I命令，可查看当前用户的定时任务，检查是否有后门木马程序启动相关信息。</p>\n<p>&#x2F;etc&#x2F;crontab是系统级别的定时任务，只有root账户可以修改。另外，还需要注意的有&#x2F;etc&#x2F;cron.hourly、&#x2F;etc&#x2F;cron.daily、 &#x2F;etc&#x2F;cron.weekly、&#x2F;etc&#x2F;cron.monthly等周期性执行脚本的目录。<br>使用ls &#x2F;etc&#x2F;cron*命令，可查看etc目录系统级定时任务相关文件。例如，攻击者若想每小时执行一个脚本，则只需将脚本放到&#x2F;etc&#x2F;cron.hourly下，并且赋予执行权限即可。</p>\n<p><strong>5、rootkit排查</strong><br>rootkit是种特殊的恶意软件，功能是在安装目标上隐藏自身及指定的文件、 进程和网络连接<br>等信息。rootkit一般会与木马、后门等其他恶意程序结合使用。</p>\n<p>ls -alt &#x2F;bin命令，可查看相关系统命令的修改时间，判断是否有更改。<br>ls -alh &#x2F;bin 命令，可查看相关文件大小，若明显偏大，则很可能被替换。<br>rpm -Va命令，可查看发生过变化的软件包，若一切校验结果均正常，则不会产生任何输出。<br>第三方查杀工具，如chkrootkit、 rkhunter进行查杀 。</p>\n<p><strong>6、文件排查</strong><br>通过对一些敏感文件及敏感目录的排查，可判断是否存在攻击者的攻击存留文件，以及修改访<br>问过的文件。<br>ls -al命令，可查看隐藏的文件。<br>find &#x2F; mtime 0命令，可查看最近24小时内修改过的文件。<br>stat filename命令，可查看文件的修改、创建、访问时间。应重点关注与事件发生时间接近的文件的情况，或者修改、创建、访问时间存在逻辑错误的文件的情况。<br>ls -alh &#x2F;tmp命令，可查看&#x2F;tmp目录文件。<br>ls -alh &#x2F;root&#x2F;.ssh&#x2F;命令，可查看是否存在恶意的ssh公钥，一旦发现非已知ssh公钥，则很可能是攻击者写入的。</p>\n<h4 id=\"挖矿木马应急响应\"><a href=\"#挖矿木马应急响应\" class=\"headerlink\" title=\"挖矿木马应急响应\"></a>挖矿木马应急响应</h4><p>4.1 发现可疑进程<br>利用top命令，观察发现cpu占用率极高，目标进程名称php，pid822。</p>\n<p>4.2 根据pid定位病毒文件路径<br>有以下两种方法可以定位，lsof -p $pid 以及 ll &#x2F;proc&#x2F;$pid&#x2F;exe。</p>\n<p>lsof 主要目的是获取进程id涉及到的原始文件路径以及相关的网络通信。</p>\n<p>ll &#x2F;proc&#x2F;$pid&#x2F;exe 主要用于定位原始文件路径。</p>\n<p>4.3 通过网络定位可疑进程<br>通过netstat -antp命令可以确认当前受害者主机的tcp通信以及对应的pid。这也是一种定位可疑进程的方法，在该命令执行后在终端对通信的ip进行威胁情报关联可以辅助定位。</p>\n<p>4.4 crontab持久化排查<br>crontab -l，查看当前用户的计划任务。发现一条开机重启的任务，经过路径分析关联定位属于挖矿病毒所创建。</p>\n<p>执行crontab -e可以进行编辑，该操作可以针对于计划任务较多的主机。如果受害者主机只有一条计划任务且为该病毒创建的可以直接执行 crontab -r 删除即可。</p>\n<p>4.5 病毒杀不掉？<br>在已经定位到病毒pid以及原始路径和持久化位置后，开始进行病毒清理工作。优先杀掉进程，随后彻底删除病毒样本随后crontab -r 删除计划任务。发现病毒死灰复燃，起了一个新的进程以及对应的pid。</p>\n<p>经过网络抓包分析，样本被删除后会执行wget或者curl进行挖矿病毒样本落地并执行。</p>\n<p>分析成因：<br>持久化脚本，定时检测通信，按照进程或者通信ip，如果不存在则重新从c2端下载挖矿病毒样本。<br>进程守护操作<br>在文件不被删除的情况下，pid检测，当被退出则重新执行样本。<br>文件被删除情况下，如果关联路径无法找到则重新从c2端下载挖矿病毒样本。</p>\n<h5 id=\"linux查找守护进程（进程守护定位）\"><a href=\"#linux查找守护进程（进程守护定位）\" class=\"headerlink\" title=\"linux查找守护进程（进程守护定位）\"></a>linux查找守护进程（进程守护定位）</h5><p>在4.5 章节分析完杀不掉的原因后，分别按照两个成因进行分析，经过分析后发现该病毒有进程守护的操作。</p>\n<p>使用进程树可以关联分析病毒进程的相关进程（子进程）。此思路尤为重要，注意处置人员在分析排查过程中切勿陷入思维陷阱，将简单的问题复杂化。以后在遇到类似的病毒排查清理此操作可以着重关注子进程，牵扯到进程守护。</p>\n<p>可以使用两个命令来查看病毒进程的相关子进程。<br>ps -afjx<br>使用命令，可以查看守护进程，标志是TPGID为-1。<br>pstree -p $pid</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">ps常用的几个命令如下：\nps ef\nps aux\nps axjf\n选项的含义：\n\ne : 显示所有进程\na:显示一个终端所有的进程\nu:显示进程的归属用户及内存使用情况\nx:显示没有关联控制终端的进程\nj:显示进程归属的进程组id、会话id、父进程id\nf:以ascii形式显示出进程的层次关系</code></pre>\n\n<h4 id=\"ssh日志默认路径：\"><a href=\"#ssh日志默认路径：\" class=\"headerlink\" title=\"ssh日志默认路径：\"></a>ssh日志默认路径：</h4><p>1.&#x2F;var&#x2F;log&#x2F;auth.log</p>\n<p>2.&#x2F;var&#x2F;log&#x2F;secure</p>\n<h4 id=\"中间件默认配置文件存放路径：\"><a href=\"#中间件默认配置文件存放路径：\" class=\"headerlink\" title=\"中间件默认配置文件存放路径：\"></a>中间件默认配置文件存放路径：</h4><h5 id=\"apache-linux-默认配置文件\"><a href=\"#apache-linux-默认配置文件\" class=\"headerlink\" title=\"apache+linux 默认配置文件\"></a>apache+linux 默认配置文件</h5><p>&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf或&#x2F;etc&#x2F;init.d&#x2F;httpd</p>\n<h5 id=\"IIS6-0-win2003-配置文件\"><a href=\"#IIS6-0-win2003-配置文件\" class=\"headerlink\" title=\"IIS6.0+win2003 配置文件\"></a>IIS6.0+win2003 配置文件</h5><p>C:&#x2F;Windows&#x2F;system32&#x2F;inetsrv&#x2F;metabase.xml</p>\n<h5 id=\"IIS7-0-WIN-配置文件\"><a href=\"#IIS7-0-WIN-配置文件\" class=\"headerlink\" title=\"IIS7.0+WIN 配置文件\"></a>IIS7.0+WIN 配置文件</h5><p>C:\\Windows\\System32\\inetsrv\\config\\applicationHost.config</p>\n<h4 id=\"日志存储默认路径：\"><a href=\"#日志存储默认路径：\" class=\"headerlink\" title=\"日志存储默认路径：\"></a>日志存储默认路径：</h4><p>1.apache+Linux日志默认路径：&#x2F;etc&#x2F;httpd&#x2F;logs&#x2F;accesslog或&#x2F;var&#x2F;log&#x2F;httpd&#x2F;accesslog</p>\n<p>2.apache+win2003日志默认路径：D:\\xampp\\apache\\logs\\access.log、D:\\xampp\\apache\\logs\\error.log</p>\n<p>3.IIS6.0+win2003默认日志文件：C:\\WINDOWS\\system32\\Logfiles</p>\n<p>4.IIS7.0+win2003 默认日志文件：%SystemDrive%\\inetpub\\logs\\LogFiles</p>\n<p>5.nginx 日志文件：日志文件在用户安装目录logs目录下,假设安装路径为&#x2F;usr&#x2F;local&#x2F;nginx,那日志目录就是在&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs下面</p>\n<h3 id=\"重要漏洞\"><a href=\"#重要漏洞\" class=\"headerlink\" title=\"重要漏洞\"></a>重要漏洞</h3><h4 id=\"Redis未授权漏洞怎么利用-6379\"><a href=\"#Redis未授权漏洞怎么利用-6379\" class=\"headerlink\" title=\"Redis未授权漏洞怎么利用:6379\"></a>Redis未授权漏洞怎么利用:6379</h4><p>Redis未授权漏洞的原理主要在于Redis服务的不当配置，导致服务暴露在公共网络上，并且没有设置有效的身份验证机制。默认情况下，Redis会绑定在0.0.0.0的6379端口，并且如果没有采取额外的安全措施，如添加防火墙规则来限制访问，那么任何能够访问到该服务器的人都可以连接到Redis服务。</p>\n<p>当Redis没有设置密码认证时（默认情况下密码为空），攻击者可以免密码远程登录Redis服务。一旦获得了未授权访问，我们就可以利用Redis自身提供的命令进行各种操作，例如读取、修改或删除数据。</p>\n<p>更严重的是，攻击者可以利用Redis的config命令进行写文件操作。例如，攻击者可以将自己的SSH公钥写入到目标服务器的&#x2F;root&#x2F;.ssh文件夹中的authorized_keys文件里，这样我们就可以直接使用对应的私钥通过SSH服务登录目标服务器。此外，攻击者还可能通过Redis执行恶意代码、创建计划任务或写入Webshell等进一步控制服务器。</p>\n<h4 id=\"fastjson反序列化漏洞原理及特征\"><a href=\"#fastjson反序列化漏洞原理及特征\" class=\"headerlink\" title=\"fastjson反序列化漏洞原理及特征\"></a>fastjson反序列化漏洞原理及特征</h4><p>Fastjson漏洞主要涉及到其反序列化机制。Fastjson是一个Java库，用于将Java对象转换为JSON格式（序列化）和将JSON字符串转换为Java对象（反序列化）。为了提升灵活性和便利性，Fastjson提供了AutoType功能，允许在反序列化过程中自动加载并实例化指定类。</p>\n<p>当Fastjson对JSON字符串进行反序列化时，会读取@type字段的内容，并尝试将JSON内容反序列化为指定的Java对象。如果攻击者能够构造恶意的JSON数据，其中包含恶意的@type字段，指向一个具有潜在安全风险的类，那么Fastjson在反序列化过程中就可能会执行这个类的恶意代码，从而导致安全问题。</p>\n<p>fastjson简要原理：fastjson解析字符串的时候存在@type属性就能调用 @type 对象中的getter和setter方法。<br>不同版本的fastjson是对类名的一个进行绕过，如添加冒号，双写LL，添加中括号等。</p>\n<h4 id=\"fastjson流量特征\"><a href=\"#fastjson流量特征\" class=\"headerlink\" title=\"fastjson流量特征\"></a>fastjson流量特征</h4><p>在请求包里面中发送恶意的 json 格式 payload，漏洞在处理 json 对象的时候，没有对@type 字段进行过滤，从而导致攻击者可以传入恶意的 TemplatesImpl 类，而这个类有一个字段就是_bytecodes，有部分函数会根据这个_bytecodes 生成 java 实例，这就达到fastjson 通过字段传入一个类，再通过这个类被生成时执行构造函数。</p>\n<h4 id=\"fastjson无回显判断\"><a href=\"#fastjson无回显判断\" class=\"headerlink\" title=\"fastjson无回显判断\"></a>fastjson无回显判断</h4><p>通过dnslog判断<br>通过defineClass回显<br>RMI绑定实例<br>URLClassLoder将回显结果封装到异常信息抛出拿到回显<br>利用中间件找request和response做回显<br>查找唯一不重名的css，js或者其他文件。在该文件目录写文件</p>\n<h4 id=\"fastjson不出网利用\"><a href=\"#fastjson不出网利用\" class=\"headerlink\" title=\"fastjson不出网利用\"></a>fastjson不出网利用</h4><p>目前公开已知的poc有两个：<br>org.apache.tomcat.dbcp.dbcp2.BasicDataSource<br>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</p>\n<p>第一种利用方式需要一个特定的触发条件:解析JSON的时候需要使用Feature才能触发，参考如下代码：JSONObject.parseObject(sb.toString(), new Feature[] {Feature.SupportNonPublicField});#第二种利用方式: 则需要应用部署在Tomcat应用环境中，因为Tomcat应用环境自带tomcat-dbcp.jar 对于SpringBoot这种自带Tomcat可以直接以单个jar文件部署的需要在maven中配置tomcat- dbcp。</p>\n<p>而且对于不同的Tomcat版本使用的poc也不同：Tomcat 8.0以后使用org.apache.tomcat.dbcp.dbcp2.BasicDataSource? Tomcat8.0以下使用 org.apache.tomcat.dbcp.dbcp.BasicDataSource</p>\n<h4 id=\"java反序列化cc1和cc6的区别-cc3呢？\"><a href=\"#java反序列化cc1和cc6的区别-cc3呢？\" class=\"headerlink\" title=\"java反序列化cc1和cc6的区别?cc3呢？\"></a>java反序列化cc1和cc6的区别?cc3呢？</h4><p><strong>CC1</strong><br>低版本可以使用，如8u65，高版本jdk8u71就不能利用了。</p>\n<p>通过动态代理利用invoke方法，实现可控方法。主要有两条利用链。</p>\n<p>利用TransfomedMap中的checkSetValue()方法，或者LazyMap中的get方法。</p>\n<p><img src=\"https://image.3001.net/images/20230913/1694617222_6501ce86254867e1dee57.png!small\"></p>\n<p><strong>CC6</strong><br>不限制jdk版本，和CC版本。</p>\n<p>在jdku871中对CC1进行了主要修复：<br>针对checkSetValue链中，readObject中整个移除了对checkSetValue的操作，针对LazyMap链则将memberValues设置为了客户端不可控，而是通过一个Filed类来进行读取。</p>\n<p>TiedMapEntry.hashCode<br>最后执行代码部分还是和CC1一样，区别就是在get同方法这里，CC6找的是TiedMapEntry.hashCode</p>\n<p><strong>CC3</strong><br>不同于CC1与CC6，CC3采用的是动态类加载，即加载恶意代码进行攻击的，而非调用命令执行。相较于cc1链，它的入口类和cc1的相同，还是AnnotationInvocationHandler。<br>CC3把InvokerTransformer类替换成了InstantiateTransformer这个类，重点在于它调用了InstantiateTransformer类的transform方法，可以任意代码执行。</p>\n<h4 id=\"log4j2远程代码执行漏洞原理及特征\"><a href=\"#log4j2远程代码执行漏洞原理及特征\" class=\"headerlink\" title=\"log4j2远程代码执行漏洞原理及特征\"></a>log4j2远程代码执行漏洞原理及特征</h4><p>Apache log4j2漏洞是由于Log4j2提供的lookup功能下的Jndi Lookup模块出现问题所导致的，该功能模块在输出日志信息时允许开发人员通过相应的协议去请求远程主机上的资源。而开发人员在处理数据时，并没有对用户输入的信息进行判断，导致Log4j2请求远程主机上的含有恶意代码的资源并执行其中的代码，从而造成远程代码执行漏洞。</p>\n<p>特征:数据包里有{jndi:ladp&#x2F;&#x2F;}字段</p>\n<h4 id=\"spring-rce漏洞原理\"><a href=\"#spring-rce漏洞原理\" class=\"headerlink\" title=\"spring rce漏洞原理\"></a>spring rce漏洞原理</h4><p>在 AbstractPropertyAccessor#setPropertyValues() 的方法中，http请求每一个键值对，都会设置到bean对象上。然后会在 getBeanWrapperForPropertyPath 中解析http的key。类似class.modle 这样子。然后它会去调用生一个的get+属性名。在这里就是调用了class的setModle方法。因为本身是有益的。但是攻击者通过这个，可以去引用不是bean对象的属性。在这个漏洞中则是去引用tomcat的一个日志文件位置去进行修改.<br>在Java9新增了可以通过 Class.getModule 方法。通过 getModule 的结果可以调用 getClassloader的方式继续访问更多对象的属性</p>\n<h4 id=\"WeblogicXML-decoder反序列化漏洞原理及特征-7001\"><a href=\"#WeblogicXML-decoder反序列化漏洞原理及特征-7001\" class=\"headerlink\" title=\"WeblogicXML_decoder反序列化漏洞原理及特征:7001\"></a>WeblogicXML_decoder反序列化漏洞原理及特征:7001</h4><p>WebLogic XMLDecoder反序列化漏洞主要涉及到WebLogic Server在处理特定XML数据时的安全问题。这个漏洞产生的主要原因在于WebLogic的WLS Security组件在解析用户传入的XML数据时使用了XMLDecoder，而XMLDecoder在反序列化过程中存在安全漏洞。</p>\n<p>具体来说，当WebLogic Server接收到一个精心构造的XML请求时，WLS Security组件会调用XMLDecoder来解析这个请求。如果攻击者在XML数据中嵌入了恶意的序列化对象，XMLDecoder在反序列化过程中可能会执行这些恶意对象中的代码，从而导致任意代码执行。</p>\n<h4 id=\"WeblogicT3反序列化漏洞原理及特征\"><a href=\"#WeblogicT3反序列化漏洞原理及特征\" class=\"headerlink\" title=\"WeblogicT3反序列化漏洞原理及特征\"></a>WeblogicT3反序列化漏洞原理及特征</h4><p>T3是WebLogic Server使用的专有协议，用于在WebLogic服务器和其他Java程序（如客户端或其他WebLogic Server实例）之间传输数据。当WebLogic服务器接收到通过T3协议发送的序列化数据时，它会对这些数据进行反序列化。如果攻击者能够构造恶意的序列化数据，我们就可以在反序列化过程中执行恶意代码或访问敏感信息。</p>\n<h4 id=\"Struts2漏洞原理及特征\"><a href=\"#Struts2漏洞原理及特征\" class=\"headerlink\" title=\"Struts2漏洞原理及特征\"></a>Struts2漏洞原理及特征</h4><p>Struts2在处理用户请求时，使用了OGNL表达式语言来解析请求参数。攻击者可以构造恶意的OGNL表达式，并在HTTP请求中注入，从而在服务器上执行任意代码。</p>\n<p>016漏洞成因是在Struts2.3.15.1之前的版本中，框架对”action:”、”redirect:”和”redirectAction:”等前缀参数的处理存在安全问题。当用户使用这些前缀提交数据时，Struts2会将用户提交的内容拼接入OGNL表达式中执行。</p>\n<p>045漏洞成因是当Struts2框架使用基于Jakarta Multipart parser的文件上传功能时，如果Content-Type不正确，会抛出一个异常。异常信息中会包含Content-Type的属性值。在处理这个异常的过程中，Struts2会将异常信息中的某些部分解析为OGNL表达式并执行。受影响的Struts2版本范围包括2.3.5到2.3.31以及2.5到2.5.10。</p>\n<p>特征是使用OGNL语法，payload中含有memberaccess字段，相关特征应该在catalina.out日志文件中有体现</p>\n<h4 id=\"shiro550和shiro721区别\"><a href=\"#shiro550和shiro721区别\" class=\"headerlink\" title=\"shiro550和shiro721区别\"></a>shiro550和shiro721区别</h4><p>Apache Shiro是一个功能强大且易于使用的Java安全框架，用于处理身份验证、授权、加密和会话管理，这两个漏洞都涉及到Shiro的rememberMe功能。</p>\n<p>Shiro 550漏洞允许攻击者进行远程代码执行，主要存在于Shiro 1.2.4 版本之前。该漏洞的原理是Shiro在处理rememberMe Cookie时，使用了固定的AES加密密钥进行加密和解密。由于密钥是硬编码在代码中的，攻击者可以构造恶意的序列化对象，对其进行AES加密和Base64编码，然后将其作为Cookie中的rememberMe字段值发送。当Shiro接收到这个恶意的Cookie时，会进行解密和反序列化操作，从而执行攻击者指定的任意代码。</p>\n<p>相比之下，Shiro 721的AES加密密钥是系统随机生成的，这使得通过猜测密钥进行攻击的难度大大增加。然而，Shiro 721仍然存在潜在的漏洞，即当攻击者能够获取到有效的rememberMe Cookie时，他们可以利用这个Cookie作为Padding Oracle Attack的前缀，然后精心构造恶意的rememberMe Cookie值来实现反序列化漏洞攻击。这种攻击方式相对复杂且难度较高，但仍然存在一定的安全风险。</p>\n<h4 id=\"shiro有密钥无链怎么利用\"><a href=\"#shiro有密钥无链怎么利用\" class=\"headerlink\" title=\"shiro有密钥无链怎么利用\"></a>shiro有密钥无链怎么利用</h4><p>Commons-Beanutils 提供PropertyUtils getProperty 方法使用者可以调用任意javabean对象里的getter方法。</p>\n<p>getter方法的利用链流程</p>\n<p>PropertyUtils类的 getProperty()方法 –&gt; 调用另一个反射对象的getProperty()方法 –&gt; PropertyUtilsBean类的getProperty()方法 –&gt; 又调用了一个getNestedProperty()方法 –&gt;getSimpleProperty 方法 –&gt; getReadMethod实</p>\n<h4 id=\"常见端口重要漏洞\"><a href=\"#常见端口重要漏洞\" class=\"headerlink\" title=\"常见端口重要漏洞\"></a>常见端口重要漏洞</h4><h5 id=\"web服务类\"><a href=\"#web服务类\" class=\"headerlink\" title=\"web服务类\"></a>web服务类</h5><pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">tomcat--80&#x2F;8080&#x2F;8009\n        manager弱口令（漏洞利用可以上传war包getshell）\n        put上传webshell\n        HTTP慢速攻击\n        ajr文件包含漏洞-CVE-2020-1938\n        \nJboss--8080\n       后台弱口令\n       console后台部署war包\n       JAVA反序列化\n       远程代码执行\n       \nwebSphere--9080\n       后台弱口令\n       任意文件泄露\n       AVA反序列化\n       \nweblogic--7001&#x2F;7002\n       后台弱口令\n       console后台部署war包\n       SSRF\n       测试页面上传webshell\n       JAVA反序列化\n             CVE-2018-2628\n             CVE-2018-2893\n             CVE-2017-10271\n             CVE-2019-2725\n             CVE-2019-2729\n\nGlassfish--8080&#x2F;4848\n      暴力破解\n      任意文件读取\n      认证绕过\n      \nJetty--8080\n      远程共享缓冲区溢出\n      \nApache--80&#x2F;8080\n      HTTP慢速攻击\n      解析漏洞\n      目录遍历\n\nApache Solr--8983\n      远程命令执行\n      CVE-2017-12629\n      CVE-2019-0193\n\nIIS--80\n      put上传webshell\n      IIS解析漏洞\n      IIS提权\n      IIS远程远程代码执行-CVE-2017-7269\n      \n Resin--8080\n      目录遍历\n      远程文件读取\n      \nAxis2--8080\n      后台弱口令\n      \n Lutos--1352\n      后台弱口令\n      信息泄露\n      跨站脚本攻击\n\nNginx--80&#x2F;443\n      HTTP慢速攻击\n      解析漏洞</code></pre>\n\n<h5 id=\"数据库类\"><a href=\"#数据库类\" class=\"headerlink\" title=\"数据库类\"></a>数据库类</h5><pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">Mysql--3306\n      弱口令\n      身份认证漏洞-cve-2012-2122\n      拒绝服务攻击\n      phpmyadmin万能密码or弱口令\n      UDF&#x2F;MOF提权\n\n Mssql--1433\n      弱口令\n      存储过程提权\n\nOralce--1521\n       弱口令\n       TNS漏洞\n       \nRedis--6379\n       弱口令\n       未经授权访问\n\nPostgreSQL--5432\n       弱口令\n       缓冲区溢出-cve-2014-2669\n\nMongoDB--27001\n       弱口令\n       未经授权访问\n       \nDB2--5000\n       安全限制绕过进行未经授权操作-cve-2015-1922\n       \nSysBase--5000&#x2F;4100\n       弱口令\n       命令注入\n       \nMemcache--11211\n       未经授权访问\n       配置漏洞\n       \nElasticSearch--9200&#x2F;9300\n       未经授权访问\n       远程代码执行\n       文件办理\n       写入webshell </code></pre>\n\n<h5 id=\"大数据类\"><a href=\"#大数据类\" class=\"headerlink\" title=\"大数据类\"></a>大数据类</h5><pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">Hadoop--50010\n      远程命令执行\n      \nZookeeper--2181\n      未经授权访问</code></pre>\n\n<h5 id=\"文件共享\"><a href=\"#文件共享\" class=\"headerlink\" title=\"文件共享\"></a>文件共享</h5><pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">Ftp--21\n     弱口令\n     匿名访问\n     上传后门\n     远程溢出\n     跳转攻击\n     \nNFS--2049\n     未经授权访问\n     \nSamba--137\n     弱口令\n     未经授权访问\n     远程代码执行-CVE-2015-0240\n     \nLDAP--389\n     弱口令\n     注入\n     未经授权访问</code></pre>\n\n<h5 id=\"远程访问\"><a href=\"#远程访问\" class=\"headerlink\" title=\"远程访问\"></a>远程访问</h5><pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">SSH--22\n     弱口令\n     28退格漏洞\n     OpenSSL漏洞\n     用户名枚举\n     \nTelent--23\n     弱口令\n     \nRDP--3389\n     弱口令\n     Shitf粘滞键后门\n     缓冲区溢出\n     MS12-020\n     CVE-2019-0708\n     \nVNC--5901\n     弱口令\n     认证口令绕过\n     拒绝服务攻击-CVE-2015-5239\n     权限提升-CVE-2013-6886\n     \nPcanywhere--5632\n     拒绝服务攻击\n     权限提升\n     代码执行\n     \nX11--6000\n      未经授权访问-CVE-1999-0526</code></pre>\n\n<h5 id=\"邮件服务\"><a href=\"#邮件服务\" class=\"headerlink\" title=\"邮件服务\"></a>邮件服务</h5><pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">SMTP--25&#x2F;465\n      弱口令\n      未经授权访问\n      邮件伪造\n      \nPOP3--110&#x2F;995\n      弱口令\n      未经授权访问\n      \nIMAP--143&#x2F;993\n       弱口令\n       任意文件读取</code></pre>\n\n<h5 id=\"其他服务类\"><a href=\"#其他服务类\" class=\"headerlink\" title=\"其他服务类\"></a>其他服务类</h5><pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">DNS--53\n       DNS区域传输\n       DNS劫持\n       DNS欺骗\n       DNS缓存投毒\n       DNS隧道\n       \nDHCP--67&#x2F;68\n       DHCP劫持\n       DHCP欺骗\n       \nSNMP--161\n       弱口令\n       \nRlogin--512&#x2F;513&#x2F;514\n       rlogin登录\n       \nRsync--873\n       未经授权访问\n       本地权限提升\n       \nZabbix--8069\n        远程命令执行\n        \nRMI--1090&#x2F;1099\n        JAVA反序列化\n        \nDocker--2375\n        未经授权访问</code></pre>\n\n<h3 id=\"流量特征\"><a href=\"#流量特征\" class=\"headerlink\" title=\"流量特征\"></a>流量特征</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>简单的来说，菜刀和蚁剑采用静态加密的方式，其流量的攻击特征较为明显，而冰蝎和哥斯拉采用了动态加密的方式，更容易绕过安全设备的检测。</p></blockquote>\n<h4 id=\"webshell-菜刀\"><a href=\"#webshell-菜刀\" class=\"headerlink\" title=\"webshell-菜刀\"></a>webshell-菜刀</h4><p>菜刀webshell只使用url编码+base64编码。<br>shell特征就是传输参数名为z0，还存在ini_set(“display_errors”,”0”)</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">webshell参数z0对应$_POST[z0]接收到的数据，且固定为QGluaV9zZXQ开头。\n进行base64解码后可看到代码：\n@ini_set(&quot;display_errors&quot;,&quot;0&quot;);\n@set_time_limit(0);@set_magic_quotes_runtime(0);\n这段意思是首先关闭报错和magic_quotes，接下来去获取主机的信息。</code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">payload特征：\nPHP: &lt;?php @eval($_POST[&#39;caidao&#39;]);?#\nASP: &lt;%eval request(“caidao”)%#\nASP.NET: &lt;%@ Page Language&#x3D;“Jscript”%#&lt;%eval(Request.Item[“caidao”],“unsafe”);%#</code></pre>\n\n<h4 id=\"webshell-蚁剑\"><a href=\"#webshell-蚁剑\" class=\"headerlink\" title=\"webshell-蚁剑\"></a>webshell-蚁剑</h4><p>请求时可选择多种编码器，如果采用默认的方式，则仅进行url编码。</p>\n<p>进行连接时会进行两次请求。</p>\n<p>第一次请求的payload和菜刀相似，也是@ini_set(“display_errors”,”0”);@set_time_limit(0);@set_magic_quotes_runtime(0);意思是关闭报错和magic_quotes，接下来区获取主机信息。</p>\n<p>这段代码基本是所有WebShell客户端链接PHP类WebShell都有的一种代码。</p>\n<p>第二次请求会把主机的目录列出来。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">由于蚁剑中包含了很多加密、绕过插件，所以导致很多流量被加密后无法识别，但是蚁剑混淆加密后还有一个比较明显的特征，即为参数名大多以“_0x.....&#x3D;”这种形式（下划线可替换为其他）\n所以，以_0x开头的参数名，后面为加密数据的数据包也可识别为蚁剑的流量特征。</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">payload特征：\nPhp中使用assert，eval执行；\nasp 使用eval；\n在jsp使用的是Java类加载（ClassLoader）,同时会带有base64编码解码等字符特征；\n\n响应包的结果返回格式为  随机数 结果  随机数</code></pre>\n\n<h4 id=\"webshell-冰蝎\"><a href=\"#webshell-冰蝎\" class=\"headerlink\" title=\"webshell-冰蝎\"></a>webshell-冰蝎</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">paylaod分析：\n在php代码中同样会存在eval或assert等字符特征；\n在aps中会在for循环进行一段异或处理；\n在jsp中则利用java的反射，所以会存在ClassLoader，getClass().getClassLoader()等字符特征；</code></pre>\n\n<h4 id=\"webshell-冰蝎2-0\"><a href=\"#webshell-冰蝎2-0\" class=\"headerlink\" title=\"webshell-冰蝎2.0\"></a>webshell-冰蝎2.0</h4><p>使用 AES加密+base64编码发起三次请求。</p>\n<p>第一次GET请求服务端产生密钥写入 session，session 和当前会话绑定，不同的客户端的密钥也是不同的。</p>\n<p>第二次GET请求是为了获取密钥 key，服务端会生成16位的AES密钥。</p>\n<p>第三次使用 key 的AES加密进行通信，通信也采用了base64编码。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">进行请求时内置了十几个User-Agent头，每次请求时会随机选择其中的一个。\n因此当发现一个ip的请求头中的user-agent在频繁变换，就可能是冰蝎。</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">流量特征：\n第一阶段请求中返回包状态码为200，返回内容必定是16位的密钥.\n请求包存在：\nAccept: text&#x2F;html, image&#x2F;gif, image&#x2F;jpeg, ; q&#x3D;.2, &#x2F;; q&#x3D;.2\n\n建立连接后的cookie存在特征字符\n所有请求 Cookie的格式都为: Cookie: PHPSESSID&#x3D;; path&#x3D;&#x2F;；</code></pre>\n\n<h4 id=\"webshell-冰蝎3-0\"><a href=\"#webshell-冰蝎3-0\" class=\"headerlink\" title=\"webshell-冰蝎3.0\"></a>webshell-冰蝎3.0</h4><p>使用AES加密+base64编码发起两次请求。</p>\n<p>与冰蝎2.0相比，冰蝎3.0取消了动态密钥获取的请求，</p>\n<p>AES的密钥直接固定为连接密码32位md5的前16位，默认连接密码是”rebeyond”(即密钥是md5(‘rebeyond’) [0:16]&#x3D;e45e329feb5d925b)。</p>\n<p>服务端和客户端不再进行密钥的交互传递。</p>\n<p>两次请求中，</p>\n<p>第一次请求用于判断是否可以建立连接。</p>\n<p>第二次发送 phpinfo 等代码执行，获取网站的信息。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">与冰蝎2.0相似，进行请求时内置了十几个User-Agent头，每次请求时会随机选择其中的一个。\n连接jsp的webshell的请求数据包中的content-type字段常见为application&#x2F;octet-stream。</code></pre>\n\n<pre class=\"line-numbers language-/\" data-language=\"/\"><code class=\"language-/\">流量特征：\n请求包中content-length 为5740或5720（可能会根据Java版本而改变）\n每一个请求头中存在\nPragma: no-cache，Cache-Control: no-cache\nAccept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</code></pre>\n\n<h4 id=\"webshell-冰蝎4-0\"><a href=\"#webshell-冰蝎4-0\" class=\"headerlink\" title=\"webshell-冰蝎4.0\"></a>webshell-冰蝎4.0</h4><p>提供了传输协议自定义的功能，让用户对流量的加密和解密进行自定义，实现流量加解密协议的去中心化。</p>\n<p>v4.0版本不再有连接密码的概念，自定义传输协议的算法就是连接密码。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">Accept字段（弱特征），通常是Accept: application&#x2F;json, text&#x2F;javascript, *&#x2F;*; q&#x3D;0.01 \n意思是浏览器可接受任何文件，但最倾向application&#x2F;json 和 text&#x2F;javascript。\n\nContent-Type字段（弱特征），通常是Content-type: Application&#x2F;x-www-form-urlencoded\n\n与冰蝎的前述版本相似，进行请求时内置了十几个User-Agent头，每次请求时会随机选择其中的一个。</code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">连接的端口有一定的特征，\n冰蝎与webshell建立连接的同时，javaw也与目的主机建立tcp连接，\n每次连接使用本地端口在49700左右(就是比较大的端口)，\n每连接一次，每建立一次新的连接，端口就依次增加。\n使用长连接，避免了频繁的握手造成的资源开销。\n默认情况下，请求头和响应头里会带有 Connection：Keep-Alive\n有固定的请求头和响应头，请求字节头：dFAXQV1LORcHRQtLRlwMAhwFTAg&#x2F;M ，\n响应字节头：TxcWR1NNExZAD0ZaAWMIPAZjH1BFBFtHThcJSlUXWEd\n默认时，冰蝎 webshell都有“e45e329feb5d925b” 一串密钥，与冰蝎3.0相同。</code></pre>\n\n<h4 id=\"冰蝎3与冰蝎4的区别\"><a href=\"#冰蝎3与冰蝎4的区别\" class=\"headerlink\" title=\"冰蝎3与冰蝎4的区别\"></a>冰蝎3与冰蝎4的区别</h4><p>v3.0 和 v4.0 的区别很明显在于这里 KaTeX parse error: Undefined control sequence: &#x3D;key ，v3.0 版本当中会把 key 作为 session 传入；接着判断 extension_loaded ，也就是判断服务端是否存在 openssl 拓展，如果不存在就用 base64 解码，然后使用 key 进行异或加密，这也是冰蝎 v4.0 版本当中的 xor_base64 加密方式；如果服务端能够加载 openssl 拓展，就使用 AES128 解密，这里对应冰蝎 v4.0 版本当中的 aes 加密方式。</p>\n<h4 id=\"webshell-哥斯拉\"><a href=\"#webshell-哥斯拉\" class=\"headerlink\" title=\"webshell-哥斯拉\"></a>webshell-哥斯拉</h4><p>1.强特征：cookie字段，最后一个Cookie的值出现;（尾值出现分号）</p>\n<p>2.请求中的Accept头是（弱特征）<br>Accept:text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,&#x2F;;q&#x3D;0.8<br>ccept:text&#x2F;html, image&#x2F;gif, image&#x2F;jpeg, *; q&#x3D;.2, &#x2F;; q&#x3D;.2。<br>这个也可修改，只能作为辅助检测的特征。</p>\n<p>3.paylod特征：jsp会出现xc,pass字符和Java反射，base64加解码等特征，php，asp则为普通的一句话木马。</p>\n<p>4.还有响应，哥斯拉会响应三次，而且我认为还有一个地方需要注意的就是webshell连接，所以一般会设置长时间连接，所以connection这里会是keep-alive，<br>哥斯拉建立连接时会发起三次请求，第一次请求数据超级长，用于建立 session，第二三次请求确认连接，第二、三次的请求和响应基本是一致的。</p>\n<p>5.响应体的数据有一定特征，哥斯拉会把一个32位的md5字符串按照一半拆分，分别放在base64编码的数据的前后两部分。<br>整个响应包的结构体征为：md5前十六位+base64+md5后十六位。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">payload特征：\njsp会出现xc,pass字符和Java反射（ClassLoader，getClass().getClassLoader()），base64加解码等特征\nphp，asp则为普通的一句话木马</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">流量分析：\n所有请求中Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,&#x2F;;q&#x3D;0.8\n所有响应中Cache-Control: no-store, no-cache, must-revalidate,\n以上两个只能作为弱特征参考\n同时在所有请求中Cookie中后面都存在&quot; ；&quot;特征</code></pre>\n\n<h4 id=\"cs流量特征\"><a href=\"#cs流量特征\" class=\"headerlink\" title=\"cs流量特征\"></a>cs流量特征</h4><p>CS的通信流量中，会定期发送心跳包以保持连接。这些心跳包在流级上的上下行数据长度通常是固定的，而且间隔一定时间就会发送，这使得其流量在时间上呈现出一定的规律性。<br>当服务端需要下发指令时，会通过心跳包接收指令。此时，服务器返回的包可能会更长，甚至包含需要加载的dll模块数据。指令执行完后，客户端会通过POST请求发送执行的结果数据，其中body部分会通过加密和base64编码。不同指令的执行时间间隔可能不同，这可以通过观察POST请求和GET请求的间隔来判断。<br>在请求的返回包中，通信数据通常隐藏在类似jquery*.js的文件中。<br>还可以关注其使用的默认端口（如50050）以及SSL证书等特征。</p>\n<p>源码特征：checksum8 （92L 93L）</p>\n<h4 id=\"metasploit流量特征\"><a href=\"#metasploit流量特征\" class=\"headerlink\" title=\"metasploit流量特征\"></a>metasploit流量特征</h4><p>1，端口号：msf默认使用4444端口作为反向连接端口<br>2，数据内容：msf数据包通常包含特定字符串:(“meterpreter”、”revshell”等)</p>\n<h4 id=\"frp流量特征\"><a href=\"#frp流量特征\" class=\"headerlink\" title=\"frp流量特征\"></a>frp流量特征</h4><p>{“version”:”0.38.0”,”hostname”:””,”os”:”windows”,”arch”:”amd64”,”user”:””,”privilege_key”:”a155174bb09e0de606a35e5258887bf8a”,”timestamp”:1700179954,”run_id”:””,”metas”:null,”pool_count”:1}</p>\n<h3 id=\"项目相关\"><a href=\"#项目相关\" class=\"headerlink\" title=\"项目相关\"></a>项目相关</h3><h4 id=\"用过哪些厂商的设备\"><a href=\"#用过哪些厂商的设备\" class=\"headerlink\" title=\"用过哪些厂商的设备\"></a>用过哪些厂商的设备</h4><p>青藤的设备是安装到每个主机上的agent，所以青藤的设备所能做的主要是对本主机上的监控，如命令，进程，文件等等，有区别与其他厂商的设备是抓取网络流量。所以青藤的问题主要围绕在内网的问题。</p>\n<p>青藤万相·主机自适应安全平台<br>青藤猎鹰·威胁狩猎平台</p>\n<h4 id=\"在项目上，漏洞扫描需要注意那些事项\"><a href=\"#在项目上，漏洞扫描需要注意那些事项\" class=\"headerlink\" title=\"在项目上，漏洞扫描需要注意那些事项\"></a>在项目上，漏洞扫描需要注意那些事项</h4><p>跟客户确认是否充许登录扫描、扫描并发连接数及线程数、<br>是否充许暴力破解，什么时间段扫描、<br>通知客户备份一下数据，开启业务系统及网站运维监控，以免断机可及时恢复。</p>\n<h4 id=\"HW前期通常有哪些事情需要准备？\"><a href=\"#HW前期通常有哪些事情需要准备？\" class=\"headerlink\" title=\"HW前期通常有哪些事情需要准备？\"></a>HW前期通常有哪些事情需要准备？</h4><p>前期比较重要的就是资产梳理、安全测试、整改加固、安全策略优化、安全意识培训等等<br>资产梳理：主要协助客户对旗下资产进行梳理汇总<br>安全测试：组织几次安全渗透测试可分为内外网渗透测试<br>安全意识培训：宣讲钓鱼邮件防范，个人不使用弱密码，安装杀软等<br>HW期间下线部分服务器，或者某段时间暂停对外开放服务。</p>\n<h4 id=\"HW中常见的安全设备有哪些？\"><a href=\"#HW中常见的安全设备有哪些？\" class=\"headerlink\" title=\"HW中常见的安全设备有哪些？\"></a>HW中常见的安全设备有哪些？</h4><p>入侵检测：IDS<br>入侵防御：IPS<br>流量威胁检测设备：腾讯御界、奇安信天眼、绿盟、深信服等等<br>流量监测：科来<br>应用防火墙（WAF）：绿盟WAF、腾讯云WAF、深信服WAF、阿里云WAF等等<br>蜜罐：默安蜜罐、知道创宇蜜罐等等<br>防火墙：防火墙（玄武盾）、山石防火墙、360网康&#x2F;网神防火墙<br>态势感知：绿盟态势感知、奇安信态势感知（目前部分金融客户对攻击IP封禁在态势感知系统上统一做封禁处理）<br>SOC：绿盟、奇安信</p>\n<h4 id=\"谈谈IDS和IPS是什么？有什么作用？\"><a href=\"#谈谈IDS和IPS是什么？有什么作用？\" class=\"headerlink\" title=\"谈谈IDS和IPS是什么？有什么作用？\"></a>谈谈IDS和IPS是什么？有什么作用？</h4><p>入侵检测：IDS，类似防火墙，主要用于入网流量检测<br>入侵防御：IPS，对杀软和防火墙的补充，阻止病毒攻击以及点到点应用滥用</p>\n<h4 id=\"态势感知、SOC产品的功能\"><a href=\"#态势感知、SOC产品的功能\" class=\"headerlink\" title=\"态势感知、SOC产品的功能\"></a>态势感知、SOC产品的功能</h4><p>全流量收集、大数据分析、<br>访问日志展示、攻击日志展示告警、资产管理、大屏展示、<br>脆弱性识别-弱口令-数据传输未加密-漏洞、<br>受害主机攻击汇总、内网横向攻击分析、<br>报表功能</p>\n<h4 id=\"态势感知有了解过吗\"><a href=\"#态势感知有了解过吗\" class=\"headerlink\" title=\"态势感知有了解过吗?\"></a>态势感知有了解过吗?</h4><p>态势感知是基于网络环境、动态的、整体的洞悉网络安全风险，以安全大数据为基础，以企业的业务为核心，进行实时的异常检测，实现安全分析智能化与威胁可视化，并提供威胁情报共享、安全态势感知和高级威胁侦测分析等服务</p>\n<h4 id=\"EDR是什么？举例，作用？\"><a href=\"#EDR是什么？举例，作用？\" class=\"headerlink\" title=\"EDR是什么？举例，作用？\"></a>EDR是什么？举例，作用？</h4><p>终端检测与响应<br>360天擎、深信服EDR、亚信EDR<br>通过云端的威胁情报、机器学习、异常行为分析等，主动发现安全威胁，自动化阻止攻击。</p>\n<h4 id=\"WAF产品如何来拦截攻击？\"><a href=\"#WAF产品如何来拦截攻击？\" class=\"headerlink\" title=\"WAF产品如何来拦截攻击？\"></a>WAF产品如何来拦截攻击？</h4><p>Waf 产品有三种<br>1、云 Waf<br>用户不需要在自己的网络中安装软件程序或部署硬件设备，就可以对网站实施安全防护，它的主要实现方式是利用 DNS 技术，通过移交域名解析权来实现安全防护。用户的请求首先发送到云端节点进行检测，如存在异常请求则进行拦截否则将请求转发至真实服务器<br>▲杀毒软件<br>（用户访问域名的时候，会经过这类产品的代理扫描，发现问题就会直接拦下，没问题的在进行转发）<br>例如：360安全卫士、百度云加速</p>\n<p>2、Web 防护软件<br>安装在需要防护的服务器上，实现方式通常是 Waf 监听端口或以 Web 容器扩展方式进行请求检测和阻断</p>\n<p>3、硬件 Web 防火墙<br>Waf 串行部署在 Web 服务器前端，用于检测、阻断异常流量。常规硬件 Waf 的实现方式是通过代理技术代理来自外部的<br>流量</p>\n<h4 id=\"WAF有哪些防护方式？\"><a href=\"#WAF有哪些防护方式？\" class=\"headerlink\" title=\"WAF有哪些防护方式？\"></a>WAF有哪些防护方式？</h4><p>1、Web基础防护<br>可防范常规的 web 应用攻击，如 SQL 注入攻击、XSS 跨站攻击等，可检测 webshell，检查 HTTP 上传通道中的网页木马，打开开关即实时生效</p>\n<p>2、CC 攻击防护（DDOS（分布式拒绝服务）的一种）<br>可根据 IP、Cookie 或者 Referer 字段名设置灵活的限速策略，有效缓解 CC 攻击<br>▲CC与DDOS的区别（DDos是针对的是IP的攻击，CC攻击的是对网页的攻击）</p>\n<p>3、精准访问防护<br>对常见 HTTP 字段进行条件组合， 支持定制化防护策略如CSRF防护，通过自定义规则的配置，更精准的识别恶意伪造<br>请求、保护网站敏感信息、提高防护精准性</p>\n<p>4、IP 黑白名单<br>添加终拦截与始终放行的黑白名单 IP，增加防御准确性</p>\n<p>5、网页防篡改<br>对网站的静态网页进行缓存配置，当用户访问时返回给用户缓存的正常页面，并随机检测网页是否被篡改</p>\n<h4 id=\"根据设备告警（WEB）如何分析流量\"><a href=\"#根据设备告警（WEB）如何分析流量\" class=\"headerlink\" title=\"根据设备告警（WEB）如何分析流量\"></a>根据设备告警（WEB）如何分析流量</h4><p>\\1. 下载告警pcap数据包，根据告警提示攻击类型，过滤payload信息，定位流量<br>\\2. 判断是否攻击成功，需具体分析攻击请求响应内容或使用其payload进行攻击测试等<br>\\3. 最终可根据流量分析给出判定类型：扫描、攻击尝试、攻击成功、攻击失败</p>\n<h4 id=\"WEB中间件加固：TOMCAT、APACHE、IIS有哪些加固点？\"><a href=\"#WEB中间件加固：TOMCAT、APACHE、IIS有哪些加固点？\" class=\"headerlink\" title=\"WEB中间件加固：TOMCAT、APACHE、IIS有哪些加固点？\"></a>WEB中间件加固：TOMCAT、APACHE、IIS有哪些加固点？</h4><p>web中间件：更改默认端口、低权限运维、降权网站根目录、自定义错误页面、删除自带网页，反序列化漏洞ssrf任意文<br>件上传war后门文件部署<br>tomcat:远程代码执行，war后门文件部署<br>apache:解析漏洞，目录遍历<br>iis:常见漏洞“：遇到特殊符号会进行截断，比如：“.asp”，从而认为文件后缀为“.asp”</p>\n<h4 id=\"WINDOWS和LINUX加固？（操作系统加固）\"><a href=\"#WINDOWS和LINUX加固？（操作系统加固）\" class=\"headerlink\" title=\"WINDOWS和LINUX加固？（操作系统加固）\"></a>WINDOWS和LINUX加固？（操作系统加固）</h4><p>windows：删除无用账号、禁用来宾账号、设置密码复杂度、关闭默认共享、关闭自启</p>\n<p>linux：删除无用账号、配置密码策略（复杂度、过期时间）、限制su命令使用（限制用户使用su命令变更为其他用户，<br>防止不当的角色切换）、限制ssh远程登陆root、减少命令记录数（.bash_history）、升级内核版本</p>\n<h4 id=\"MYSQL加固呢？（数据库加固）\"><a href=\"#MYSQL加固呢？（数据库加固）\" class=\"headerlink\" title=\"MYSQL加固呢？（数据库加固）\"></a>MYSQL加固呢？（数据库加固）</h4><p>mysql：使用低权限用户配置网站、启用mysql日志记录、禁用文件导入导出<br>sql server：使用低权限用户配置网站、关闭xp—cmdshell功能</p>\n<h4 id=\"根据设备告警（内网）如何展开排查\"><a href=\"#根据设备告警（内网）如何展开排查\" class=\"headerlink\" title=\"根据设备告警（内网）如何展开排查\"></a>根据设备告警（内网）如何展开排查</h4><p>\\1. 定位主要扫描、攻击机器<br>\\2. 根据业务情况，进行隔离处理<br>\\3. 排查主要扫描、攻击机器正在执行进程、历史命令，定位攻击者扫描工具、扫描结果等<br>\\4. 提取攻击者操作信息、攻击样本后，清理查杀攻击者后?、工具等<br>\\5. 根据攻击者扫描结果，对存在的漏洞展开修补工作<br>\\6. 分析主要扫描、攻击机器如何沦陷，溯源攻击链，展开攻击链修补工作</p>\n<h4 id=\"暴力破解加固方法？\"><a href=\"#暴力破解加固方法？\" class=\"headerlink\" title=\"暴力破解加固方法？\"></a>暴力破解加固方法？</h4><p>添加强度较高的验证码，不易被破解<br>修改密码设置规则，提高用户的密码强度<br>同一账号登陆次数锁定，生成锁定日志<br>定期排查弱口令</p>\n<h4 id=\"你能说明文件上传的原理吗？\"><a href=\"#你能说明文件上传的原理吗？\" class=\"headerlink\" title=\"你能说明文件上传的原理吗？\"></a>你能说明文件上传的原理吗？</h4><p>绕过上传限制，上传可执行代码文件</p>\n<p>PHP：如果系统中存在可以上传文件的功能点，就可以上传后门脚本文件，通过一些方法绕过上传限制，如果能访问后门的话，系统存在文件上传漏洞，可以借助后门执行命令<br>Java：上传 jsp 代码<br>Asp&#x2F;Aspx<br>Python：因为脚本需要译后生成 pyc 字节码文件，所以不存在文件上传</p>\n<h4 id=\"文件上传功能的检测点有哪些？\"><a href=\"#文件上传功能的检测点有哪些？\" class=\"headerlink\" title=\"文件上传功能的检测点有哪些？\"></a>文件上传功能的检测点有哪些？</h4><p>客户端的JS检测（主要检测文件名后缀）<br>服务端检测（MINE类型检测、文件后缀名、文件格式头）</p>\n<h4 id=\"文件上传攻击特征？\"><a href=\"#文件上传攻击特征？\" class=\"headerlink\" title=\"文件上传攻击特征？\"></a>文件上传攻击特征？</h4><p>能够上传文件的接口，应用程序对用户上传文件类型不校验或者校验不严格可绕过，导致任意类型文件上传，攻击者可上<br>传 webshell 拿到服务器权限，在这个过程中攻击者必然会上传恶意脚本文件<br>特征：上传文件保存处出现可执行脚本</p>\n<h4 id=\"文件上传加固方法？\"><a href=\"#文件上传加固方法？\" class=\"headerlink\" title=\"文件上传加固方法？\"></a>文件上传加固方法？</h4><p>后端限制文件上传白名单，头像不允许上传 svg<br>上传后文件随机重命名，不要输出保存文件位置<br>图片文件可以二次渲染，使用对象存储 oss<br>文件目录取消执行权限，PHP 设置 basedir（根目录）</p>\n<h4 id=\"JAVA内存马如何排查？\"><a href=\"#JAVA内存马如何排查？\" class=\"headerlink\" title=\"JAVA内存马如何排查？\"></a>JAVA内存马如何排查？</h4><p>如何查杀：使用工具进行检测查杀<br>1、如果是jsp注入，日志中排查可疑jsp的访问请求。<br>2、如果是代码执行漏洞，排查中间件的error.log，查看是否有可疑的报错，判断注入时间和方法<br>3、根据业务使用的组件排查是否可能存在java代码执行漏洞以及是否存在过webshell，排查框架漏洞，反序列化漏洞。<br>4、如果是servlet或者spring的controller类型，根据上报的webshell的url查找日志（日志可能被关闭，不一定有），根据url最早访问时间确定被注入时间。<br>5、如果是filter或者listener类型，可能会有较多的404但是带有参数的请求，或者大量请求不同url但带有相同的参数，或者页面并不存在但返回200</p>\n<h4 id=\"PHP内存马如何排查？\"><a href=\"#PHP内存马如何排查？\" class=\"headerlink\" title=\"PHP内存马如何排查？\"></a>PHP内存马如何排查？</h4><p>如何查杀：使用工具进行检测查杀<br>php不死马也就是内存马<br>排查就两点；检测执行文件是否在文件系统真实存在；确认攻击后去重启服务消除内存执行</p>\n<h4 id=\"ASPX内存马如何排查？\"><a href=\"#ASPX内存马如何排查？\" class=\"headerlink\" title=\"ASPX内存马如何排查？\"></a>ASPX内存马如何排查？</h4><p>如何查杀：使用工具进行检测查杀<br>github有人写了一个排查的aspx脚本，放到网站目录下访问，会返回内存中filter（过滤器0列表，排查未知、可疑的就行吗，<br>检测执行文件是否在文件系统真实存在；</p>\n<h4 id=\"发现一条攻击告警如何判断是否为真实有效攻击事件思路？\"><a href=\"#发现一条攻击告警如何判断是否为真实有效攻击事件思路？\" class=\"headerlink\" title=\"发现一条攻击告警如何判断是否为真实有效攻击事件思路？\"></a>发现一条攻击告警如何判断是否为真实有效攻击事件思路？</h4><p>分析请求、响应内容，判断是否攻击成功<br>首先看告警事件名称判断是网络攻击事件还是web攻击事件，<br>网络攻击事件：定位五元组信息（源IP、目的IP、源端口、目的端口、协议），对整个僵、木、蠕传播链进行分析，以攻击IP作为受害IP进行检索查找攻击源，<br>WEB攻击事件：通过数据包的请求体、响应体、状态码等。</p>\n<h4 id=\"大量告警判断是否为误报\"><a href=\"#大量告警判断是否为误报\" class=\"headerlink\" title=\"大量告警判断是否为误报\"></a>大量告警判断是否为误报</h4><h5 id=\"“哪些告警属于无效告警？”\"><a href=\"#“哪些告警属于无效告警？”\" class=\"headerlink\" title=\"“哪些告警属于无效告警？”\"></a>“哪些告警属于无效告警？”</h5><p>比如说：攻击方通过对目标资产所处的C段进行批量扫描，但C段的资产并非都是处于「活跃」状态，甚至根本没有这个资产。而安全设备还是因为这个「攻击尝试行为」产生了告警，那么这种告警就属于「无效告警」。</p>\n<h5 id=\"“怎么判断告警是误报？”\"><a href=\"#“怎么判断告警是误报？”\" class=\"headerlink\" title=\"“怎么判断告警是误报？”\"></a>“怎么判断告警是误报？”</h5><p>比如说：攻击方尝试利用现成的「EXP&amp;POC集成脚本工具」对资产目标进行检测扫描，安全设备检测到「攻击尝试行为」中的攻击特征就会产生告警。在通常情况下，可以把告警中的URL的“网页状态码”、“页面回显数据”作为「误报告警」判断的条件之一。</p>\n<h5 id=\"“如何对「待分析告警」关联分析？”\"><a href=\"#“如何对「待分析告警」关联分析？”\" class=\"headerlink\" title=\"“如何对「待分析告警」关联分析？”\"></a>“如何对「待分析告警」关联分析？”</h5><p>从「待分析告警」中提取攻击特征，通过「攻击特征规则库」进行匹配，看能否获取到「情报线索」。</p>\n<p>&#x2F;index&#x2F;index&#x2F;index?options&#x3D;id)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23 **<br>比如说，在「待分析告警」数据发现这一段Payload，通过「攻击特征规则库」关联到它属于「ThinkPHP5 - 注入漏洞」。但我们通过「资产指纹信息库」进行核查发现「受攻击的资产」并没有使用「ThinkPHP5」框架。</p>\n<p>按照这个分析逻辑，将整个流程脚本化输出。就可以排除「待分析告警」中那些真实的攻击尝试行为，却又未攻击成功的告警。然后，人工再对剩余的少量「待分析告警」进行分析研判，从其中捕获到「真实有效」的攻击事件的可能性相对于以往的分析方式会大的多。如果捕获到「真实有效」的攻击事件，还可以利用「资产指纹信息库」巡查具有同样指纹特征的设备是否也存在类似的漏洞。</p>\n<h4 id=\"安全设备出现误报怎么办？\"><a href=\"#安全设备出现误报怎么办？\" class=\"headerlink\" title=\"安全设备出现误报怎么办？\"></a>安全设备出现误报怎么办？</h4><p>可以对事件进行分析如果确认不构成实际危害（通常体现在部分web低危攻击事件）考虑对事件进行加白，如不能加白<br>（通常体现在内网僵尸网络、木马事件、蠕虫等等）需要对安全事件进行更细致的分析，定位问题发生点。</p>\n<h4 id=\"如何区分扫描流量和手动攻击流量\"><a href=\"#如何区分扫描流量和手动攻击流量\" class=\"headerlink\" title=\"如何区分扫描流量和手动攻击流量\"></a>如何区分扫描流量和手动攻击流量</h4><p>扫描数据量大，请求有规律<br>手动攻击流量数据量较少，攻击流量大多和业务关联性较大</p>\n<h4 id=\"如何分析被代理出来的数据流\"><a href=\"#如何分析被代理出来的数据流\" class=\"headerlink\" title=\"如何分析被代理出来的数据流\"></a>如何分析被代理出来的数据流</h4><p>分析数据包请求头中的 xff、referer、UA 等收集有用的信息<br>基于网络欺骗与浏览器指纹的WEB攻击溯源</p>\n<h4 id=\"webshell安全加固\"><a href=\"#webshell安全加固\" class=\"headerlink\" title=\"webshell安全加固\"></a>webshell安全加固</h4><p>Webshell防御方法<br>1、配置必要的防火墙，并开启防火墙策略，防止暴露不必要的服务为攻击者提供利用条件。<br>2、对服务器进行安全加固，例如，关闭远程桌面功能、定期更换密码、禁止使用最高权限用户运行程序、使用HTTPS加密协议等。<br>3、加强权限管理，对敏感目录进行权限设置，限制上传目录的脚本执行权限，不允许配置执行权限等。<br>4、安装Webshell检测工具，根据检测结果对已发现的可疑Webshell痕迹立即隔离查杀，并排查漏洞。<br>5、时常备份数据库等重要文件。<br>6、需要保持日常维护，并注意服务器中是否有来历不明的可执行脚本文件。<br>7、采用白名单机制上传文件，不在白名单内的一律禁止上传，上传目录权限遵循最小权限原则。</p>\n<h3 id=\"内网渗透\"><a href=\"#内网渗透\" class=\"headerlink\" title=\"内网渗透\"></a>内网渗透</h3><h4 id=\"DC、AD、AS、KDC、TGS、TGT\"><a href=\"#DC、AD、AS、KDC、TGS、TGT\" class=\"headerlink\" title=\"DC、AD、AS、KDC、TGS、TGT\"></a>DC、AD、AS、KDC、TGS、TGT</h4><p><img src=\"https://alious-1314078558.cos.ap-beijing.myqcloud.com/image-20230320190706697.png\" alt=\"image-20230320190706697\"></p>\n<h4 id=\"域认证方式\"><a href=\"#域认证方式\" class=\"headerlink\" title=\"域认证方式\"></a>域认证方式</h4><p>1.client向kerberos服务请求，希望获取访问server的权限。 kerberos得到了这个消息，首先得判断client是否是可信赖的， 也就是白名单黑名单的说法。这就是AS服务完成的工作，通过在AD中存储黑名单和白名单来区分client。成功后，返回AS返回TGT给client。</p>\n<p>2.client得到了TGT后，继续向kerberos请求，希望获取访问 server的权限。kerberos又得到了这个消息，这时候通过client 消息中的TGT，判断出了client拥有了这个权限，给了client访问server的权限ticket。</p>\n<p>3.client得到ticket后，终于可以成功访问server。这个ticket只是针对这个server，其他server需要向TGS申请。</p>\n<h4 id=\"票据传递攻击\"><a href=\"#票据传递攻击\" class=\"headerlink\" title=\"票据传递攻击\"></a>票据传递攻击</h4><p>票据传递攻击（Pass the Ticket，简称PtT）是一种基于Kerberos认证的攻击方式，常被用于后渗透阶段的权限维持。在Kerberos认证中，客户端通过身份认证服务（AS）认证后，会获得一个Logon Session Key和票据授权票据（TGT，Ticket Granting Ticket）。攻击者如果获得了有效的Kerberos票据，就可以直接使用该票据来访问网络资源，而无需知道用户的明文密码。</p>\n<p>票据传递攻击主要分为两种类型：黄金票据和白银票据。黄金票据攻击利用的前提是攻击者得到了域内krbtgt用户的NTLM哈希或AES-256的值，利用这些值，攻击者可以伪造TGT和Logon Session Key，从而跳过AS验证，直接进入下一步的客户端与票据授权服务器（TGS）的交互。这样，攻击者就能拥有域管理员的权限，可以在域内自由访问各种资源。白银票据攻击则是利用服务账号的NTLM哈希或AES-256的值来伪造服务票据，实现对特定服务的访问。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">krbtgt用户是系统在创建域时自动生成的账号，密码是随机生成的，无法登录主机，是KDC(密钥分发中心)的服务账号。\n在域环境中，每个用户账号的票据都是由 krbtgt 用户所生成的</code></pre>\n\n<h4 id=\"黄金票据和白银票据的区别\"><a href=\"#黄金票据和白银票据的区别\" class=\"headerlink\" title=\"黄金票据和白银票据的区别\"></a>黄金票据和白银票据的区别</h4><p>黄金票据是指攻击者通过某种方式获取了Kerberos认证中的关键要素，即<code>Krbtgt</code>账户的NTLM哈希值，从而能够伪造一个有效的票据授予票据（TGT）。拥有黄金票据的攻击者可以访问任何Kerberos服务，这意味着我们可以绕过正常的身份验证过程，并获得对网络的广泛访问权限。黄金票据之所以强大，是因为它允许攻击者以任何用户的身份访问任何服务。</p>\n<p>白银票据则是一种伪造的服务票据（Service Ticket, ST）。与黄金票据不同，白银票据不与Kerberos的密钥分发中心（KDC）进行交互，而是直接伪造一个服务票据来与目标服务进行交互。为了创建白银票据，攻击者需要知道服务账户的密码哈希值。由于白银票据是针对特定服务的，因此它的权限范围比黄金票据更有限。白银票据通常用于访问特定的服务，如CIFS（用于文件共享）或LDAP（用于目录服务）。</p>\n<h4 id=\"约束委派攻击和非约束委派攻击\"><a href=\"#约束委派攻击和非约束委派攻击\" class=\"headerlink\" title=\"约束委派攻击和非约束委派攻击\"></a>约束委派攻击和非约束委派攻击</h4><ul>\n<li>非约束委派攻击利用</li>\n</ul>\n<p>用户 A 去访问服务B，服务 B 的服务账户开启了非约束委派，那么当用户 A 访问服务 B 的时候会将用户 A 的 TGT 发送给服务 B 并保存进内存，服务 B 能够利用用户 A 的身份去访问用户 A 能够访问的任意服务。</p>\n<ul>\n<li>约束委派攻击利用</li>\n</ul>\n<p>约束委派 即 Kerberos 的扩展协议 S4U2Proxy，服务账号只能获取某用户的 TGS ，从而只能模拟用户访问特定的服务，这也相对应非约束委派更安全一些。</p>\n<h4 id=\"windows存放hash的文件\"><a href=\"#windows存放hash的文件\" class=\"headerlink\" title=\"windows存放hash的文件\"></a>windows存放hash的文件</h4><p>在Windows系统中，用户密码的哈希值通常存储在<code>C:\\Windows\\System32\\config\\SAM</code>（安全账户管理器）文件中。<br>此外，如果是在域控制器上，哈希值还可能存储在<code>NTDS.dit</code>文件中。</p>\n<h4 id=\"kdc默认端口\"><a href=\"#kdc默认端口\" class=\"headerlink\" title=\"kdc默认端口\"></a>kdc默认端口</h4><p>KDC（Kerberos认证服务器的关键分发中心）的默认端口通常是88。<br>Kerberos协议在这个端口上侦听票证请求。<br>此外，KDC还有一个用于管理操作的默认端口，即749，这是admin服务的端口。</p>\n<h4 id=\"pth-hash传递用哪个端口\"><a href=\"#pth-hash传递用哪个端口\" class=\"headerlink\" title=\"pth hash传递用哪个端口\"></a>pth hash传递用哪个端口</h4><p>在哈希传递（Pass-the-Hash, PtH）攻击中，通常利用SMB（Server Message Block）服务来进行。<br>SMB服务默认使用的端口是139（用于NetBIOS会话服务）和445（用于SMB over TCP&#x2F;IP，也称为直接托管SMB）。</p>\n<h4 id=\"关于域内渗透攻击\"><a href=\"#关于域内渗透攻击\" class=\"headerlink\" title=\"关于域内渗透攻击\"></a>关于域内渗透攻击</h4><ul>\n<li>信息探测：<ul>\n<li>攻击者首先会尝试收集有关域的信息，如域控制器地址、域内用户和管理员信息列表等。</li>\n<li>使用工具如BloodHound、PVEFindADUser、PsLoggedOn等进一步定位域管理员和寻找域控的最佳攻击路径。</li>\n</ul>\n</li>\n<li>凭证窃取：<ul>\n<li>在没有域用户凭据时，攻击者可能会使用暴力破解或密码喷洒等手段获取域用户凭证。</li>\n<li>攻击者还可以通过LSASS窃取凭证、DCSync、ntds.dit文件提取等方式收集目标主机上的相关凭证。</li>\n</ul>\n</li>\n<li>权限提升：<ul>\n<li>攻击者可能会利用漏洞获取服务器system权限，进而找到域管理的账号、进程或身份验证令牌，从而获取域管理员权限。</li>\n<li>利用如MS14-068、NetLogon特权提升漏洞(CVE-2020-1472)等已知的漏洞，攻击者可以直接将域内普通用户权限提升至域管权限。</li>\n</ul>\n</li>\n<li>横向移动：<ul>\n<li>拥有了用户凭证后，攻击者会在内网中横向移动，扩大资产范围，并不断重复信息收集的步骤。</li>\n<li>横向移动的攻击手法包括IPC连接、At&#x2F;Schtasks计划任务、PsExec、WMI、WMIRM、哈希传递攻击(Pass the hash)、票据传递攻击(Pass the ticket)等。</li>\n</ul>\n</li>\n<li>权限维持：<ul>\n<li>攻击者在获取域控权限后，会通过一定的持久化操作以维持域管权限，如使用黄金票据等。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"你最常用的隐蔽隧道是什么？\"><a href=\"#你最常用的隐蔽隧道是什么？\" class=\"headerlink\" title=\"你最常用的隐蔽隧道是什么？\"></a>你最常用的隐蔽隧道是什么？</h4><p>frp、reg，毒刺、nps、ew</p>\n<h4 id=\"正向连接和反向连接\"><a href=\"#正向连接和反向连接\" class=\"headerlink\" title=\"正向连接和反向连接\"></a>正向连接和反向连接</h4><p><strong>正向连接</strong><br>正向连接是受害主机监听一个端口，由控制主机主动去连接受害主机的过程，适用于受害主机具有公网ip的情况下。例如，当受害主机具有公网ip，被控主机kali可以通过ip地址访问到受害主机，所以能够使用正相连接来控制受害主机。</p>\n<p>即：攻击机主动连接被攻击机</p>\n<p><strong>反向连接</strong><br>反向连接是控制主机监听一个端口，由受害主机反向去连接控制主机的过程，适用于受害主机出网（或出网且没有公网ip）的情况。例如，受害主机是一台位于内网，并且没有公网ip且能访问互联网的主机，控制主机无法直接通过ip地址访问到受害主机。所以此时需要在控制主机上监听一个端口，让受害机主动连接控制主机，从而实现对控制主机的控制。</p>\n<p>由于反向连接是被攻击者主动连接攻击者，所以不受防火墙策略的限制</p>\n<p>即：被攻击机主动连接攻击机</p>\n<p>在实战中，正向连接往往受限于被控主机上的防火墙屏蔽及权限不足等情况，而反向连接可以很好地突破这些限制</p>\n<p><strong>总结</strong><br>如果被控主机出网，优先考虑使用反向连接<br>如果被控主机有公网ip又不出网，考虑使用正向连接</p>\n<h4 id=\"正向代理与反向代理的区别？利用场景有哪些差异？\"><a href=\"#正向代理与反向代理的区别？利用场景有哪些差异？\" class=\"headerlink\" title=\"正向代理与反向代理的区别？利用场景有哪些差异？\"></a>正向代理与反向代理的区别？利用场景有哪些差异？</h4><p>正向代理主要代理的是客户端，即代替客户端去取得网络信息。它充当客户端的“代言人”，帮助客户端获取外部资源并将其返回。而反向代理则是代理服务器，代表服务器向客户端提供服务。它位于客户端和服务器之间，作为服务器群集的入口点，将客户端的请求分发到多台服务器上。</p>\n<ul>\n<li>正向代理的利用场景：</li>\n</ul>\n<p>正向代理可以突破访问限制，当某些资源被封锁或限制访问时，用户可以通过正向代理服务器来访问这些资源。<br>正向代理服务器可以缓存常用的资源，从而加快访问速度。<br>用户在访问网络时，可以通过正向代理隐藏自己的真实IP地址，保护隐私。</p>\n<ul>\n<li>反向代理的利用场景：</li>\n</ul>\n<p>在大型网站或应用中，反向代理服务器可以根据负载均衡策略，将请求分发到不同的服务器上，以平衡服务器负载，提高性能和可用性。<br>通过隐藏真实的服务器架构和IP地址，反向代理服务器可以提高整个系统的安全性，防止恶意攻击。<br>反向代理服务器可以处理SSL&#x2F;TLS加密和解密任务，提高整个系统的加密通信性能。</p>\n<h4 id=\"获取域控权限的几种思路\"><a href=\"#获取域控权限的几种思路\" class=\"headerlink\" title=\"获取域控权限的几种思路\"></a>获取域控权限的几种思路</h4><ol>\n<li><p>通过域控相关的漏洞</p>\n</li>\n<li><p>通过域内的中继</p>\n</li>\n<li><p>通过抓取域管登录服务器的hash</p>\n</li>\n<li><p>CVE-2022-26923域内最新提权漏洞</p>\n</li>\n<li><p>通过攻击Exchange服务器、DNS服务器、SCCM服务器、WSUS服务器等</p>\n</li>\n<li><p>通过获取域控制器的localgroup中特权组成员的权限来获取域控权限</p>\n</li>\n<li><p>通过委派来获取域控权限</p>\n</li>\n<li><p>通过域控运维堡垒机</p>\n</li>\n<li><p>通过运维人员的个人主机</p>\n</li>\n<li><p>通过与域控相关的web服务器</p>\n</li>\n</ol>\n<h4 id=\"S4uself与s4yproxy是什么？\"><a href=\"#S4uself与s4yproxy是什么？\" class=\"headerlink\" title=\"S4uself与s4yproxy是什么？\"></a>S4uself与s4yproxy是什么？</h4><p>S4U2self (Service for User to S4U2Self) 可以代表任意用户请求针对其自身的kerberos服务票据</p>\n<p>S4U2proxy (Service for User to Proxy) : 可以以上一步用户的名义请求其它服务的服务票据</p>\n<h4 id=\"工作组与域的区别？\"><a href=\"#工作组与域的区别？\" class=\"headerlink\" title=\"工作组与域的区别？\"></a>工作组与域的区别？</h4><p>工作组：所有的计算机都是对等的，没有计算机可以控制另一台计算机。每台计算机都具有一组用户帐<br>户。若要登录到工作组中的任何计算机，您必须具有该计算机上的帐户。<br>域：如果具有域上的用户帐户，您就可以登录到域中的任何计算机，而无需具有该计算机上的帐户</p>\n<h4 id=\"如何快速定位域控？\"><a href=\"#如何快速定位域控？\" class=\"headerlink\" title=\"如何快速定位域控？\"></a>如何快速定位域控？</h4><p>扫描同时开放389(ldap)，和53(dns)<br>通过net time时间服务器定位<br>通过dns服务器定位<br>通过查看域控组定位<br>通过spn扫描定位</p>\n<h4 id=\"如何查找双网卡机器？\"><a href=\"#如何查找双网卡机器？\" class=\"headerlink\" title=\"如何查找双网卡机器？\"></a>如何查找双网卡机器？</h4><p>查看设备管理器：在Windows系统中，你可以通过“我的电脑”图标右键点击，然后依次选择“属性”、“硬件”、“设备管理器”。在设备管理器中找到“网络适配器”并展开，如果看到两行网络适配器，那么就是双网卡；如果只有一行，那就是单网卡。<br>查看网络接口：如果你能看到电脑的硬件部分，可以检查是否有两个RJ45网络接口。如果有两个这样的接口，那么这台电脑就是双网卡机器。<br>查看网络连接：你也可以通过查看“网上邻居”右键属性，看有几个本地连接图标，或者通过“我的电脑”右键管理设备管理器看有几个网络适配器来判断是否为双网卡。</p>\n<h4 id=\"服务器提权思路\"><a href=\"#服务器提权思路\" class=\"headerlink\" title=\"服务器提权思路\"></a>服务器提权思路</h4><p><strong>linux</strong></p>\n<ol>\n<li>内核漏洞提权</li>\n<li>SUID提权</li>\n<li>sudo提权</li>\n<li>数据库提权思路</li>\n<li>第三方软件提权思路</li>\n<li>cve pkexec和dirty pipe</li>\n</ol>\n<p><strong>windows</strong></p>\n<ol>\n<li>令牌窃取提权</li>\n<li>组策略首选项提权</li>\n<li>权限配置错误</li>\n</ol>\n<h4 id=\"权限维持思路\"><a href=\"#权限维持思路\" class=\"headerlink\" title=\"权限维持思路\"></a>权限维持思路</h4><p><strong>windows</strong></p>\n<ol>\n<li>logon scripts后门</li>\n<li>映像劫持</li>\n<li>注册表自启动后门</li>\n<li>屏幕保护程序后门</li>\n<li>计划任务后门</li>\n<li>服务自启动后门</li>\n<li>黄金票据</li>\n<li>白银票据</li>\n<li>组策略设置脚本启动</li>\n<li>DLL劫持</li>\n</ol>\n<p><strong>Linux</strong></p>\n<ol>\n<li>一句话添加用户和密码</li>\n<li>SUID Shell</li>\n<li>ssh公私钥免密登录</li>\n<li>软连接</li>\n<li>SSH wrapper</li>\n<li>strace后门</li>\n<li>crontab反弹shell</li>\n<li>openssh后门</li>\n<li>PAM后门</li>\n<li>rookit后门</li>\n</ol>\n<h3 id=\"木马免杀\"><a href=\"#木马免杀\" class=\"headerlink\" title=\"木马免杀\"></a>木马免杀</h3><p>免杀的话主要分为两种,一种是静态文件免杀,另一种是动态行为免杀</p>\n<p>也有些师傅喜欢分为</p>\n<ol>\n<li>二进制免杀(无源码),只能通过修改asm代码 二进制数据 其他数据来完成免杀</li>\n<li>有源码的免杀,可以通过修改源代码来完成免杀,也可以结合二进制免杀的技术</li>\n</ol>\n<h4 id=\"静态文件免杀\"><a href=\"#静态文件免杀\" class=\"headerlink\" title=\"静态文件免杀\"></a>静态文件免杀</h4><p><strong>静态查杀种类</strong><br>a.特征码识别(病毒库在本地,模糊哈希匹配</p>\n<p>b.云查杀(病毒库在云服务器</p>\n<p>c.校验和法(本质还是特征码)</p>\n<p>d.启发式扫描,通过机械学系把家族病毒特征归纳,聚类</p>\n<p><strong>MYCCL查找特征码修改</strong><br>找到杀软查杀的特征码，修改，替换，编码等等在不影响程序运行的情况下，把特征码改的面目全非，删掉也可以</p>\n<p><strong>加花指令</strong><br>这是最有效也是最常用的方式，要点在于如何加话指令</p>\n<p><strong>对shellcode进行加密编码</strong><br>比如在特定位置添加垃圾字符,</p>\n<p>用硬编码的单字节密钥对字节进行异或加减法运算</p>\n<p>把字节移位某些特定位置</p>\n<p>交换连字节</p>\n<h4 id=\"动态行为免杀\"><a href=\"#动态行为免杀\" class=\"headerlink\" title=\"动态行为免杀\"></a>动态行为免杀</h4><p>某些敏感操作监控</p>\n<p>注册表\t组策略\t防火墙\t敏感程序\t各种win32api\t文件夹</p>\n<p>绕过方法的话就是</p>\n<p><strong>白加黑</strong><br>让win的一些白文件去执行敏感操作</p>\n<p><strong>替换&#x2F;找未导出的&#x2F;重写&#x2F;寻找底层api</strong><br><strong>替换调用顺序</strong><br><strong>通过调用其它进行功能来完成 API 的功能</strong><br>比较经典的如，通过 rundll32.exe 来完成 dll 加载，通过 COM 来操作文件等等。</p>\n<p><strong>分离免杀</strong></p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">shellcode从文本提取 \nshellcode与加载器分离\n远程加载shellcode（shellcode放在另一台主机上，走http协议下载）\n管道运输\n隐写在图片上，powershell加载</code></pre>\n\n\n\n<h3 id=\"溯源反制\"><a href=\"#溯源反制\" class=\"headerlink\" title=\"溯源反制\"></a>溯源反制</h3><h4 id=\"基本步骤\"><a href=\"#基本步骤\" class=\"headerlink\" title=\"基本步骤\"></a>基本步骤</h4><h5 id=\"攻击源捕获\"><a href=\"#攻击源捕获\" class=\"headerlink\" title=\"攻击源捕获\"></a>攻击源捕获</h5><ol>\n<li>安全设备报警，如扫描IP，威胁阻断、病毒木马、入侵事件等；</li>\n<li>日志与流量分析，异常的通讯流量，攻击源与攻击目标；</li>\n<li>服务器资源异常，异常的文件、账号、进程、端口、启动项、计划任务和服务等；</li>\n<li>钓鱼邮件，获取恶意文件样本、钓鱼网站url等</li>\n<li>蜜罐系统，获取攻击者ID，电脑信息、浏览器指纹、行为、意图的相关信息；</li>\n</ol>\n<h4 id=\"域前置溯源\"><a href=\"#域前置溯源\" class=\"headerlink\" title=\"域前置溯源\"></a>域前置溯源</h4><p>可达到的效果：通过一个高信任域名隐藏自己的真实域名与ip，且受害主机上的流量只有跟cdn通信的，不会有跟真实c2的</p>\n<p>技术实现重点：</p>\n<ol>\n<li>需要基于https</li>\n<li>需要知道cdn上的其他高信誉域名或者ip</li>\n<li>需要修改headers头</li>\n</ol>\n<p>原理：同一个cdn厂商下倘若有两个域名a.com，b.com，这时候我们使用curl命令访问第一个a.com并将host名改为b.com这时候，实际访问的是b.com的内容。而一般的监测机制是不会检测host头的</p>\n<p>1.cdn服务器的回源地址为真实的恶意c2服务器,那么可以通过对比资产测绘平台的返回数据包和cdn端的返回数据包来缩小范围,从而定位到真实的c2服务器</p>\n<p>2.通过逆向木马样本解密得到请求url,然后伪造请求获取响应,进一步缩小范围,真实的c2服务器</p>\n<p>3.把cdn流量跑完</p>\n<h4 id=\"CDN溯源\"><a href=\"#CDN溯源\" class=\"headerlink\" title=\"CDN溯源\"></a>CDN溯源</h4><p>配置cdn的域名的A记录解析使其能解析到C2的ip</p>\n<p>可达到的效果: 受害主机上只会有跟cdn的ip通信的流量，不会有跟真实C2通信的流量，可以保护C2的ip，但是域名还是会暴露</p>\n<h4 id=\"重定向技术隐藏C2\"><a href=\"#重定向技术隐藏C2\" class=\"headerlink\" title=\"重定向技术隐藏C2\"></a>重定向技术隐藏C2</h4><p>可达到的效果：受害者上只会有与重定向机器之间的流量，不会有与真实c2服务器的流量，重定向服务器会将非beacon的请求重定向到一些高信誉域名上，达到迷惑的目的，不过如果受害者ban掉了重定向机器的ip，对攻击者的损失也是很大的</p>\n<h4 id=\"对于云c2技术的反制\"><a href=\"#对于云c2技术的反制\" class=\"headerlink\" title=\"对于云c2技术的反制\"></a>对于云c2技术的反制</h4><ul>\n<li>判断流量特征<ul>\n<li>如果是stage,会有一个payload下载阶段,大小约为210kb,payload未解密之前间隔有大批量重复字符串(cs本身特征)</li>\n<li>未经魔改的云函数配置在stage下载阶段访问&#x2F;bootstrap-2.min.js (配置文件特征),同时返回包有很大一串加密数据,且路径遵循<code>checksum8</code>的ascii之和与256取余计算值等于92(cs本身特征)</li>\n<li>未经魔改的云函数会访问&#x2F;api&#x2F;getit这样类似api的模式,可以重点关注(配置文件特征)</li>\n<li>云函数的host是<code>service-173y3w0z-xxxxxxxxxx.sh.apigw.tencentcs.com</code>这样的格式,有点类似域前置,host为白域名,可以着重注意host为<code>apigw.tencentcs.com</code>格式的流量,如果业务部门没有这样的业务,特殊时期,可以直接封禁这个域名<code>apigw.tencentcs.com</code>(云函数特征)</li>\n<li>请求头中会有云函数的特有特征,如<ul>\n<li>X-Request-Id: 请求的id<br>X-Api-FuncName: 函数名<br>X-Api-AppId: 对应账号但是不是账号<br>X-Api-ServiceId: 服务id<br>X-Api-HttpHost: 就是把appid 账号id 还有腾讯云函数的域名放一起<br>X-Api-Status: 200 返回值<br>X-Api-UpstreamStatus: 200 返回值</li>\n</ul>\n</li>\n<li>抓包看流量,通信的IP是腾讯云的CDN服务器IP</li>\n</ul>\n</li>\n<li>反制手段<ul>\n<li>批量上线钓鱼马<ul>\n<li>从cs客户端可以看出,上线后的ip过一会就会自动变一次(云函数特性),一次性上线大量ip会让红队直接无法分辨(直接放同一个虚拟机都行,因为每次云函数的特性,所以每个心跳包都是一个新的请求,都会分配一个新ip)</li>\n</ul>\n</li>\n<li>消耗云函数额度<ul>\n<li>云函数隐藏C2 和 cdn很像,都有同一个弱点,就是访问是需要计费的,所以可以使用脚本把红队的额度跑掉就好,这样红队的所有马都无法上线<ul>\n<li>工具 <a href=\"https://github.com/a1phaboy/MenoyGone\">https://github.com/a1phaboy/MenoyGone</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>虚假上线<ul>\n<li>重放心跳包进行上线,但是红队无法执行任何命令</li>\n</ul>\n</li>\n<li>截图举报<ul>\n<li>收集好证据,主要是 host名 X-Api-FuncName X-Api-AppId 这些带有明显云函数的特征的证据,(X-Api-AppId这个很重要)说明该人正在使用云函数对我司进行恶意攻击,请求对其暂时封禁.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"蓝队溯源红队的经历\"><a href=\"#蓝队溯源红队的经历\" class=\"headerlink\" title=\"蓝队溯源红队的经历\"></a>蓝队溯源红队的经历</h4><p>针对ip溯源一二</p>\n<p>一般来说,红队大部分都是使用代理节点进行测试,假如我们捕获或者从样本里面分析拿到了真实的ip,那么以下的操作场景就有用了,或者使用钓鱼反调的方式去获取到真实的ip</p>\n<p>来自创宇盾等节点的流量ip</p>\n<p>ip,假设前面还有一层云waf cdn厂商等.那么需要协调到提供服务的厂商,快速获取到云waf或者cdn之前的节点真实ip.然后拿到了真实的ip,就变成了一些常规的溯源操作</p>\n<p>whois 域名反查</p>\n<p>ip,初步可以进行whois查询,以及域名反查,查看历史的解析,以及历史的ip用有记录,运气好的话,假如攻击队队员使用的是自己的博客之类的vps常用节点,那么很有可能通过这个手法进行溯源到相关人员</p>\n<p>探测端口 服务 进行反渗透</p>\n<p>ip,对该ip进行端口探测,服务探测,进行反渗透,一般来说红队的vps都是在一些国内的一些vps主机供应商或者云服务供应商那边购买,假如是国内的话,可以通过公安网警来进行协助查水表,获取真实人员的身份.假如我们反渗透成功,那么可以提取历史登入记录,历史ip,网络连接,进程 以及攻击工具 进程 内存镜像等方式进行取证分析.</p>\n<p>威胁情报</p>\n<p>ip,对使用威胁情报进行综合分析,查看该ip他人对该ip打的标签,历史解析记录,历史变更记录,以及该ip上面关联的相关样本,这些都能够获取到进行进一步分析.</p>\n<p>邮箱 qq 手机号 社工库</p>\n<p>通过ip的whois获取到了相关人员的qq或者邮箱或者手机号,那么可以使用社工库,进行社工查询.比如twitter的社工库机器人或者自行研究的社工库进行综合关联分析</p>\n<p>qq 微信 抖音 陌陌 等接口</p>\n<p>获取到了手机号,那么可以通过qq  微信 抖音 陌陌 等接口进行关联,一般获取到了手机号初步可以通过这种简单易行的手法去溯源到红队人员</p>\n<p>ga数据 运营商数据</p>\n<p>有办法能通过ga资源,或者直接通过运营商拿数据,那就更好了</p>\n<h4 id=\"常见红队被反杀的姿势\"><a href=\"#常见红队被反杀的姿势\" class=\"headerlink\" title=\"常见红队被反杀的姿势\"></a>常见红队被反杀的姿势</h4><ol>\n<li>使用个人工作pc,且浏览器里面保存了百度 163 sina等登录凭据,攻击对抗过程中踩到蓝队的蜜罐,被jsonp劫持漏洞捕获安全社交id,从而被溯源到了真实的姓名和所在公司</li>\n<li>可能是蓝队封禁ip太厉害的原因,红队个人或者团队,使用自己的网站进行vps进行扫描,vps上含有团伙组织https证书,或者vps ip绑定的域名跟安全社交id对应,从而被溯源到真实姓名和所在的公司</li>\n<li>部分攻击队写的扫描器payload里面含有攻击者的信息,如使用了私有的dnslog 攻击载荷里面含有安全社交id 含有个人博客资源请求等</li>\n<li>投递的钓鱼邮件里面的木马样本被蓝队采集,逆向 反控c2c 溯源到个人信息</li>\n<li>虚拟机逃逸打到实体机,暴露个人全部真实信息的</li>\n</ol>\n<h4 id=\"反制红队基础设施的操作\"><a href=\"#反制红队基础设施的操作\" class=\"headerlink\" title=\"反制红队基础设施的操作\"></a>反制红队基础设施的操作</h4><p>cobalt strike反制</p>\n<p>在防守里面,必不可少的是钓鱼邮件,或者社工钓鱼,一般来说钓鱼的样本无非这几种,exe elf可执行文件,以及加了料的doc类宏木马,一般而言,目前红队主要是通过cobalt strike生成相关上线的shell 那么针对cobalt strike如何进行反制呢</p>\n<ol>\n<li>批量上线钓鱼马,启几百个进程mddos红方的cs端.假如我们获取到了红方的cs样本,那么第一种方法可以批量启几百个进程运行该样本(注意隔离环境),然后红方的cs端几乎瘫痪,无法使用</li>\n<li>爆破cs密码 一般而言,红队的cs设施为了多人运动,密码通常不会太复杂,很大机会是弱口令为主,甚至teamserver端口50050,那么针对cs端控制端,可以直接进行密码爆破</li>\n</ol>\n<p>附cs 爆破密码脚本</p>\n<p>?\t3.假上线,我们只需要发送心跳包,即可模拟上线,并且攻击者无法执行命令.使用时更改换IP或域名、port、cookie</p>\n<p>针对dnslog的反制 </p>\n<p>通过流量设备审计到他人的dnslog平台的url payload,那么针对他的url payload可以进行反制.一般而言,常见的dnslog平台,蓝队防守的时候可以对厂家爱你的dnslog平台进行屏蔽.那么针对自行搭建的dnslog平台有以下思路</p>\n<p>dnslog反制,可以批量ping捕获到的dnslog,然后而已扰乱他自行搭建的,恶意制造各种垃圾dnslog数据,让他无法获取到有效的信息,直接让红队人员被迫抛弃一个红队基础设施.具体可以写一个脚本比如站长之家之类的进行批量平,进行探测存活</p>\n<p>httplog反制同理,可以使用爬虫节点,批量进行request请求捕获的http url即可,这样红队的dnslog平台几乎彻底报废.</p>\n<h3 id=\"java内存马\"><a href=\"#java内存马\" class=\"headerlink\" title=\"java内存马\"></a>java内存马</h3><h4 id=\"内存马的分类\"><a href=\"#内存马的分类\" class=\"headerlink\" title=\"内存马的分类\"></a>内存马的分类</h4><ol>\n<li>servlet-api类<ul>\n<li>filter型</li>\n<li>servlet型</li>\n</ul>\n</li>\n<li>spring类<ul>\n<li>拦截器</li>\n<li>controller型</li>\n</ul>\n</li>\n<li>java Instrumentation类<ul>\n<li>agent型</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"agent型内存马出现的两种形式-原理\"><a href=\"#agent型内存马出现的两种形式-原理\" class=\"headerlink\" title=\"agent型内存马出现的两种形式(原理)\"></a>agent型内存马出现的两种形式(原理)</h4><ul>\n<li>一个是在<code>memshell</code>项目中使用的<code>Instrumentation.retransformerClasses</code>来实现的</li>\n<li>一个是现在冰蝎3中调用<code>Instrumentation.redefineclasses</code>方法实现的</li>\n</ul>\n<p>这两个的实现途径的区别就是被<code>redefineClasses</code>方法重载过的类，其重载后的类的字节码无法在下一次调用<code>redefineClasses</code>或<code>retransformClasses</code>中获取到，所以我们就没办法获取到其字节码并做过滤以及检测；被<code>retransformClasses</code>方法重载后的类，该类的字节码可以被下次重载时调用，这也是为什么最后冰蝎在其agent内存马实现的时候使用redefineClass方法的原因，这样可以躲避javaagent技术实现的查杀</p>\n<h4 id=\"filter内存马\"><a href=\"#filter内存马\" class=\"headerlink\" title=\"filter内存马\"></a>filter内存马</h4><h5 id=\"filter内存马原理\"><a href=\"#filter内存马原理\" class=\"headerlink\" title=\"filter内存马原理\"></a>filter内存马原理</h5><ol>\n<li>创建一个恶意 Filter</li>\n<li>利用 FilterDef 对 Filter 进行一个封装</li>\n<li>将 FilterDef 添加到 FilterDefs 和 FilterConfig</li>\n<li>创建 FilterMap ，将我们的 Filter 和 urlpattern 相对应，存放到 filterMaps中（由于 Filter 生效会有一个先后顺序，所以我们一般都是放在最前面，让我们的 Filter 最先触发）</li>\n</ol>\n<h5 id=\"filter内存马的判别思路\"><a href=\"#filter内存马的判别思路\" class=\"headerlink\" title=\"filter内存马的判别思路\"></a>filter内存马的判别思路</h5><p><strong>filter名字很特别</strong></p>\n<p>内存马的filter名一般比较特别,有shell或者随机数等关键字.这个特征较弱,因为这取决于内存马的构造者的习惯,构造完全可以设置一个看起来很正常的名字</p>\n<p><strong>filter优先级是第一位</strong></p>\n<p>为了确保内存马在各种环境下都可以访问,往往需要把filter匹配优先级调至最高,这在shiro反序列化中是刚需.但是在其他场景之下就非必须,只能作为一个可疑点</p>\n<p><strong>对比web.xml中没有filter配置</strong></p>\n<p>回顾<code>Tomcat</code>或<code>Spring</code>内存马：<code>Filter</code>和<code>Controller</code>等都需要注册新的组件,比如内存马的filter是动态注册的,所以在web.xml中肯定没有配置,这个是个可以的特征.但servlet 3.0引入了@WebFiler标签方便开发这个动态注册filter.这种情况也存在没有在web.xml中显式声明,这个特征可以作为较强的特征.</p>\n<p><strong>特殊class loader加载</strong></p>\n<p>我们都知道filter也是class,也是必须有特定的class loader加载.正常的filter都是由中间件的webappclassloader加载的.反序列化漏洞喜欢利用Templatesimpl和bcel执行任意代码.所以这些class往往就是下面这两个</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl$TransletClassLoader\ncom.sun.org.apache.bcel.internal.util.ClassLoader</code></pre>\n\n<p>这个特征是一个特别可疑的点.有的内存马还是比较狡猾的,他会注入class到当前线程中,然后实例化注入内存马.这个时候内存马就有可能不是上面的两个classloader</p>\n<p><strong>对应的classloader路径下面没有class文件</strong></p>\n<p>所谓内存马就是代码驻留在内存中,本地无对应的class文件,所以我们只要检测filter对应的classloader目录下是否存在class文件</p>\n<p><strong>反编译该类的字节码，检查是否存在危险函数</strong></p>\n<p>dilter的dofilter方法中有恶意代码</p>\n<p>我们可把内存中所有的filter的class dump出来,使用fernflower等反编译工具分析看看,是否存在恶意代码,，比如调用了如下可疑的方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">java.lang.Runtime.getRuntime\ndefineClass\ninvoke\n…</code></pre>\n\n<p>总的来讲这两类,也就是说filter型内存马首先是一个filter类,同时它在硬盘上没有对应的class文件。若dump出的class还有恶意代码，那是内存马无疑</p>\n<h4 id=\"java内存马排查思路\"><a href=\"#java内存马排查思路\" class=\"headerlink\" title=\"java内存马排查思路\"></a>java内存马排查思路</h4><p>先查看检查服务器web日志，查看是否有可疑的web访问日志，比如说filter或者listener类型的内存马，会有大量url请求路径相同参数不同的，或者页面不存在但是返回200的请求。</p>\n<p>如在web日志中并未发现异常，可以排查是否为中间件漏洞导致代码执行注入内存马，排查中间件的error.log日志查看是否有可疑的报错，根据注入时间和方法根据业务使用的组件排查是否可能存在java代码执行漏洞以及是否存在过webshell，排查框架漏洞，反序列化漏洞。</p>\n<p>查看是否有类似哥斯拉、冰蝎特征的url请求，哥斯拉和冰蝎的内存马注入流量特征与普通webshell的流量特征基本吻合。</p>\n<p>通过查找返回200的url路径对比web目录下是否真实存在文件，如不存在大概率为内存马。</p>\n<p>利用java agent技术遍历所有已经加载到内存中的class,先判断是否是内存马,是则进入内存查杀</p>\n<h4 id=\"内存马的原理-amp-判断和清除\"><a href=\"#内存马的原理-amp-判断和清除\" class=\"headerlink\" title=\"内存马的原理&amp;判断和清除\"></a>内存马的原理&amp;判断和清除</h4><p>原理：</p>\n<p>其原理是先由客户端发起一个web请求，中间件的各个独立的组件如Listener、Filter、Servlet等组件会在请求过程中做监听、判断、过滤等操作，内存马利用请求过程在内存中修改已有的组件或者动态注册一个新的组件，插入恶意的shellcode达到持久化的控制服务器。</p>\n<p>判断方式：</p>\n<p>先判断是通过什么方法注入的内存马，可以先查看 web 日志是否有可疑的 web 访问日志，如果是 filter 或者 listener 类型就会有大量 url 请求路径相同参数不同的，或者页面不存在但是返回 200 的，查看是否有类似哥斯拉、冰蝎相同的 url 请求，哥斯拉和冰蝎的内存马注入流量特征与普通 webshell 的流量特征基本吻合。通过查找返回 200 的 url 路径对比web 目录下是否真实存在文件，如不存在大概率为内存马。如在 web 日志中并未发现异常，可以排查是否为中间件漏洞导致代码执行注入内存马，排查中间件的 error.log 日志查看是否有可疑的报错，根据注入时间和方法根据业务使用的组件排查是否可能存在 java 代码执行漏洞以及是否存在过 webshell，排查框架漏洞，反序列化漏洞</p>\n<p>清除方式：1.利用条件竞争把shell内容改写或者清除比较好用 2.重启服务 3.提前占用他的目录名</p>\n","feature":false,"text":"hw面试题目整理_5H 薪资保密 工作地点保密保持冷静 语速放慢 目光坚定 自信 且沉稳 基础概念2021_owasp_top10A01 失效的访问控制A02 加密失败(敏感信息泄露)A03 注入式攻击A04 不安全的设计A05 安全配置错误A06 使用易受攻击和过时的组件A07...","link":"","photos":[],"count_time":{"symbolsCount":"52k","symbolsTime":"47 mins."},"categories":[{"name":"护网","slug":"护网","count":3,"path":"api/categories/护网.json"}],"tags":[{"name":"护网","slug":"护网","count":3,"path":"api/tags/护网.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#hw%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%95%B4%E7%90%86-5H\"><span class=\"toc-text\">hw面试题目整理_5H</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">基础概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2021-owasp-top10\"><span class=\"toc-text\">2021_owasp_top10</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E8%B7%A8%E5%9F%9F%EF%BC%8CJSONP%E4%B8%8ECORS\"><span class=\"toc-text\">什么是跨域，JSONP与CORS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">同源策略</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E8%B7%A8%E5%9F%9F\"><span class=\"toc-text\">什么是跨域?</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#JSONP%E8%B7%A8%E5%9F%9F\"><span class=\"toc-text\">JSONP跨域</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#CORS%E8%B7%A8%E5%9F%9F\"><span class=\"toc-text\">CORS跨域</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">常见的逻辑漏洞</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5Windows%E5%BD%B1%E5%AD%90%E7%94%A8%E6%88%B7\"><span class=\"toc-text\">如何排查Windows影子用户</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CSRF%E3%80%81XSS-%E5%8F%8A-XXE-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%8C%E4%BB%A5%E5%8F%8A%E4%BF%AE%E5%A4%8D%E6%96%B9%E5%BC%8F%EF%BC%9F\"><span class=\"toc-text\">CSRF、XSS 及 XXE 有什么区别，以及修复方式？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#XSS%E4%B8%89%E7%A7%8D%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">XSS三种类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ssrf%E5%8F%AF%E4%BB%A5%E9%80%A0%E6%88%90%E9%82%A3%E4%BA%9B%E5%8D%B1%E5%AE%B3%EF%BC%9F\"><span class=\"toc-text\">ssrf可以造成那些危害？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%99%BD%E5%90%8D%E5%8D%95%E6%80%8E%E4%B9%88%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">文件上传白名单怎么绕过</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#sqlmap-%E2%80%93os-shell-%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">sqlmap –os-shell 原理详解</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#sqlmap-%E2%80%93sql-shell-%E5%92%8C-%E2%80%93os-shell-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">sqlmap –sql-shell 和 –os-shell 的区别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8-hatcess\"><span class=\"toc-text\">如何利用.hatcess</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E7%9B%AE%E6%A0%87%E7%AB%99%E7%82%B9%E7%9A%84%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">获取目标站点的绝对路径</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%8E%E6%A0%B7%E8%BF%9B%E8%A1%8C%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86\"><span class=\"toc-text\">怎样进行信息收集</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%ADcdn\"><span class=\"toc-text\">判断cdn</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%92%93%E9%B1%BC%E9%82%AE%E4%BB%B6%E5%A4%84%E7%BD%AE%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">钓鱼邮件处置思路</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AD%98%E5%9C%A8webshell%EF%BC%8C%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86\"><span class=\"toc-text\">服务器存在webshell，如何处理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#windows%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">windows入侵排查思路</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Linux%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">Linux入侵排查思路</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E5%A6%82%E4%BD%95%E5%8E%BB%E6%B5%8B\"><span class=\"toc-text\">只有一个登录页面如何去测</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%AB%99%E6%9C%89%E9%AA%8C%E8%AF%81%E7%A0%81-%E8%83%BD%E6%83%B3%E5%88%B0%E5%93%AA%E4%BA%9B%E5%8A%9F%E8%83%BD%E7%82%B9%E6%9D%A5%E5%88%A9%E7%94%A8-%E6%8C%96%E6%BC%8F%E6%B4%9E-%EF%BC%9F\"><span class=\"toc-text\">网站有验证码,能想到哪些功能点来利用(挖漏洞)？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#do%E7%BB%93%E5%B0%BE%E7%9A%84%E6%98%AF%E4%BB%80%E4%B9%88%E8%AF%AD%E8%A8%80\"><span class=\"toc-text\">.do结尾的是什么语言</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#agent%E5%86%85%E5%AD%98%E9%A9%AC%E8%BF%9B%E8%A1%8C%E6%97%A0%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0%E6%B3%A8%E5%85%A5%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">agent内存马进行无文件落地注入原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#agent%E5%86%85%E5%AD%98%E9%A9%AC%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%92%8C%E9%9D%99%E6%80%81%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">agent内存马动态加载和静态加载的区别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#agent%E5%86%85%E5%AD%98%E9%A9%AC%E6%9F%A5%E6%9D%80\"><span class=\"toc-text\">agent内存马查杀</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B0%B4%E5%9D%91%E6%94%BB%E5%87%BB%E5%92%8C%E9%B1%BC%E5%8F%89%E6%94%BB%E5%87%BB%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">水坑攻击和鱼叉攻击的区别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HTTP-%E8%BF%94%E5%9B%9E%E7%8A%B6%E6%80%81%E7%A0%81\"><span class=\"toc-text\">HTTP 返回状态码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#wireshark%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99\"><span class=\"toc-text\">wireshark简单的过滤规则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B\"><span class=\"toc-text\">TCP三次握手</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94\"><span class=\"toc-text\">应急响应</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E6%80%9D%E8%B7%AF-%E7%AE%80%E8%A6%81\"><span class=\"toc-text\">应急响应基本流程思路(简要)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Linux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94\"><span class=\"toc-text\">Linux应急响应</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#windows%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94\"><span class=\"toc-text\">windows应急响应</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#windows%E6%97%A5%E5%BF%97%E7%9B%B8%E5%85%B3\"><span class=\"toc-text\">windows日志相关</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">windows常用命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#webshell%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94\"><span class=\"toc-text\">webshell应急响应</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Webshell%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">Webshell检测</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Webshell%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E6%8E%92%E6%9F%A5\"><span class=\"toc-text\">Webshell应急响应排查</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%96%E7%9F%BF%E6%9C%A8%E9%A9%AC%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94\"><span class=\"toc-text\">挖矿木马应急响应</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#linux%E6%9F%A5%E6%89%BE%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%EF%BC%88%E8%BF%9B%E7%A8%8B%E5%AE%88%E6%8A%A4%E5%AE%9A%E4%BD%8D%EF%BC%89\"><span class=\"toc-text\">linux查找守护进程（进程守护定位）</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ssh%E6%97%A5%E5%BF%97%E9%BB%98%E8%AE%A4%E8%B7%AF%E5%BE%84%EF%BC%9A\"><span class=\"toc-text\">ssh日志默认路径：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E9%97%B4%E4%BB%B6%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AD%98%E6%94%BE%E8%B7%AF%E5%BE%84%EF%BC%9A\"><span class=\"toc-text\">中间件默认配置文件存放路径：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#apache-linux-%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">apache+linux 默认配置文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#IIS6-0-win2003-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">IIS6.0+win2003 配置文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#IIS7-0-WIN-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">IIS7.0+WIN 配置文件</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97%E5%AD%98%E5%82%A8%E9%BB%98%E8%AE%A4%E8%B7%AF%E5%BE%84%EF%BC%9A\"><span class=\"toc-text\">日志存储默认路径：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E8%A6%81%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">重要漏洞</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E6%BC%8F%E6%B4%9E%E6%80%8E%E4%B9%88%E5%88%A9%E7%94%A8-6379\"><span class=\"toc-text\">Redis未授权漏洞怎么利用:6379</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E5%8F%8A%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">fastjson反序列化漏洞原理及特征</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#fastjson%E6%B5%81%E9%87%8F%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">fastjson流量特征</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#fastjson%E6%97%A0%E5%9B%9E%E6%98%BE%E5%88%A4%E6%96%AD\"><span class=\"toc-text\">fastjson无回显判断</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#fastjson%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">fastjson不出网利用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96cc1%E5%92%8Ccc6%E7%9A%84%E5%8C%BA%E5%88%AB-cc3%E5%91%A2%EF%BC%9F\"><span class=\"toc-text\">java反序列化cc1和cc6的区别?cc3呢？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#log4j2%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E5%8F%8A%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">log4j2远程代码执行漏洞原理及特征</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#spring-rce%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">spring rce漏洞原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#WeblogicXML-decoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E5%8F%8A%E7%89%B9%E5%BE%81-7001\"><span class=\"toc-text\">WeblogicXML_decoder反序列化漏洞原理及特征:7001</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#WeblogicT3%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E5%8F%8A%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">WeblogicT3反序列化漏洞原理及特征</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Struts2%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E5%8F%8A%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">Struts2漏洞原理及特征</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#shiro550%E5%92%8Cshiro721%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">shiro550和shiro721区别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#shiro%E6%9C%89%E5%AF%86%E9%92%A5%E6%97%A0%E9%93%BE%E6%80%8E%E4%B9%88%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">shiro有密钥无链怎么利用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%AB%AF%E5%8F%A3%E9%87%8D%E8%A6%81%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">常见端口重要漏洞</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#web%E6%9C%8D%E5%8A%A1%E7%B1%BB\"><span class=\"toc-text\">web服务类</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB\"><span class=\"toc-text\">数据库类</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB\"><span class=\"toc-text\">大数据类</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB\"><span class=\"toc-text\">文件共享</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">远程访问</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">邮件服务</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E6%9C%8D%E5%8A%A1%E7%B1%BB\"><span class=\"toc-text\">其他服务类</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%81%E9%87%8F%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">流量特征</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#webshell-%E8%8F%9C%E5%88%80\"><span class=\"toc-text\">webshell-菜刀</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#webshell-%E8%9A%81%E5%89%91\"><span class=\"toc-text\">webshell-蚁剑</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#webshell-%E5%86%B0%E8%9D%8E\"><span class=\"toc-text\">webshell-冰蝎</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#webshell-%E5%86%B0%E8%9D%8E2-0\"><span class=\"toc-text\">webshell-冰蝎2.0</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#webshell-%E5%86%B0%E8%9D%8E3-0\"><span class=\"toc-text\">webshell-冰蝎3.0</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#webshell-%E5%86%B0%E8%9D%8E4-0\"><span class=\"toc-text\">webshell-冰蝎4.0</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%B0%E8%9D%8E3%E4%B8%8E%E5%86%B0%E8%9D%8E4%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">冰蝎3与冰蝎4的区别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#webshell-%E5%93%A5%E6%96%AF%E6%8B%89\"><span class=\"toc-text\">webshell-哥斯拉</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#cs%E6%B5%81%E9%87%8F%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">cs流量特征</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#metasploit%E6%B5%81%E9%87%8F%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">metasploit流量特征</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#frp%E6%B5%81%E9%87%8F%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">frp流量特征</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3\"><span class=\"toc-text\">项目相关</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%A8%E8%BF%87%E5%93%AA%E4%BA%9B%E5%8E%82%E5%95%86%E7%9A%84%E8%AE%BE%E5%A4%87\"><span class=\"toc-text\">用过哪些厂商的设备</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%8A%EF%BC%8C%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E9%82%A3%E4%BA%9B%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">在项目上，漏洞扫描需要注意那些事项</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HW%E5%89%8D%E6%9C%9F%E9%80%9A%E5%B8%B8%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BA%8B%E6%83%85%E9%9C%80%E8%A6%81%E5%87%86%E5%A4%87%EF%BC%9F\"><span class=\"toc-text\">HW前期通常有哪些事情需要准备？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HW%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">HW中常见的安全设备有哪些？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B0%88%E8%B0%88IDS%E5%92%8CIPS%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">谈谈IDS和IPS是什么？有什么作用？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%81%E5%8A%BF%E6%84%9F%E7%9F%A5%E3%80%81SOC%E4%BA%A7%E5%93%81%E7%9A%84%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">态势感知、SOC产品的功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%81%E5%8A%BF%E6%84%9F%E7%9F%A5%E6%9C%89%E4%BA%86%E8%A7%A3%E8%BF%87%E5%90%97\"><span class=\"toc-text\">态势感知有了解过吗?</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#EDR%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E4%B8%BE%E4%BE%8B%EF%BC%8C%E4%BD%9C%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">EDR是什么？举例，作用？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#WAF%E4%BA%A7%E5%93%81%E5%A6%82%E4%BD%95%E6%9D%A5%E6%8B%A6%E6%88%AA%E6%94%BB%E5%87%BB%EF%BC%9F\"><span class=\"toc-text\">WAF产品如何来拦截攻击？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#WAF%E6%9C%89%E5%93%AA%E4%BA%9B%E9%98%B2%E6%8A%A4%E6%96%B9%E5%BC%8F%EF%BC%9F\"><span class=\"toc-text\">WAF有哪些防护方式？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B9%E6%8D%AE%E8%AE%BE%E5%A4%87%E5%91%8A%E8%AD%A6%EF%BC%88WEB%EF%BC%89%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90%E6%B5%81%E9%87%8F\"><span class=\"toc-text\">根据设备告警（WEB）如何分析流量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#WEB%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8A%A0%E5%9B%BA%EF%BC%9ATOMCAT%E3%80%81APACHE%E3%80%81IIS%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8A%A0%E5%9B%BA%E7%82%B9%EF%BC%9F\"><span class=\"toc-text\">WEB中间件加固：TOMCAT、APACHE、IIS有哪些加固点？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#WINDOWS%E5%92%8CLINUX%E5%8A%A0%E5%9B%BA%EF%BC%9F%EF%BC%88%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8A%A0%E5%9B%BA%EF%BC%89\"><span class=\"toc-text\">WINDOWS和LINUX加固？（操作系统加固）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#MYSQL%E5%8A%A0%E5%9B%BA%E5%91%A2%EF%BC%9F%EF%BC%88%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8A%A0%E5%9B%BA%EF%BC%89\"><span class=\"toc-text\">MYSQL加固呢？（数据库加固）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B9%E6%8D%AE%E8%AE%BE%E5%A4%87%E5%91%8A%E8%AD%A6%EF%BC%88%E5%86%85%E7%BD%91%EF%BC%89%E5%A6%82%E4%BD%95%E5%B1%95%E5%BC%80%E6%8E%92%E6%9F%A5\"><span class=\"toc-text\">根据设备告警（内网）如何展开排查</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E5%8A%A0%E5%9B%BA%E6%96%B9%E6%B3%95%EF%BC%9F\"><span class=\"toc-text\">暴力破解加固方法？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%A0%E8%83%BD%E8%AF%B4%E6%98%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9A%84%E5%8E%9F%E7%90%86%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">你能说明文件上传的原理吗？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E7%9A%84%E6%A3%80%E6%B5%8B%E7%82%B9%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">文件上传功能的检测点有哪些？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%94%BB%E5%87%BB%E7%89%B9%E5%BE%81%EF%BC%9F\"><span class=\"toc-text\">文件上传攻击特征？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8A%A0%E5%9B%BA%E6%96%B9%E6%B3%95%EF%BC%9F\"><span class=\"toc-text\">文件上传加固方法？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#JAVA%E5%86%85%E5%AD%98%E9%A9%AC%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5%EF%BC%9F\"><span class=\"toc-text\">JAVA内存马如何排查？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#PHP%E5%86%85%E5%AD%98%E9%A9%AC%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5%EF%BC%9F\"><span class=\"toc-text\">PHP内存马如何排查？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ASPX%E5%86%85%E5%AD%98%E9%A9%AC%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5%EF%BC%9F\"><span class=\"toc-text\">ASPX内存马如何排查？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%91%E7%8E%B0%E4%B8%80%E6%9D%A1%E6%94%BB%E5%87%BB%E5%91%8A%E8%AD%A6%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E7%9C%9F%E5%AE%9E%E6%9C%89%E6%95%88%E6%94%BB%E5%87%BB%E4%BA%8B%E4%BB%B6%E6%80%9D%E8%B7%AF%EF%BC%9F\"><span class=\"toc-text\">发现一条攻击告警如何判断是否为真实有效攻击事件思路？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%A7%E9%87%8F%E5%91%8A%E8%AD%A6%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E8%AF%AF%E6%8A%A5\"><span class=\"toc-text\">大量告警判断是否为误报</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E2%80%9C%E5%93%AA%E4%BA%9B%E5%91%8A%E8%AD%A6%E5%B1%9E%E4%BA%8E%E6%97%A0%E6%95%88%E5%91%8A%E8%AD%A6%EF%BC%9F%E2%80%9D\"><span class=\"toc-text\">“哪些告警属于无效告警？”</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E2%80%9C%E6%80%8E%E4%B9%88%E5%88%A4%E6%96%AD%E5%91%8A%E8%AD%A6%E6%98%AF%E8%AF%AF%E6%8A%A5%EF%BC%9F%E2%80%9D\"><span class=\"toc-text\">“怎么判断告警是误报？”</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E2%80%9C%E5%A6%82%E4%BD%95%E5%AF%B9%E3%80%8C%E5%BE%85%E5%88%86%E6%9E%90%E5%91%8A%E8%AD%A6%E3%80%8D%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90%EF%BC%9F%E2%80%9D\"><span class=\"toc-text\">“如何对「待分析告警」关联分析？”</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87%E5%87%BA%E7%8E%B0%E8%AF%AF%E6%8A%A5%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F\"><span class=\"toc-text\">安全设备出现误报怎么办？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86%E6%89%AB%E6%8F%8F%E6%B5%81%E9%87%8F%E5%92%8C%E6%89%8B%E5%8A%A8%E6%94%BB%E5%87%BB%E6%B5%81%E9%87%8F\"><span class=\"toc-text\">如何区分扫描流量和手动攻击流量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90%E8%A2%AB%E4%BB%A3%E7%90%86%E5%87%BA%E6%9D%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B5%81\"><span class=\"toc-text\">如何分析被代理出来的数据流</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#webshell%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA\"><span class=\"toc-text\">webshell安全加固</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F\"><span class=\"toc-text\">内网渗透</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#DC%E3%80%81AD%E3%80%81AS%E3%80%81KDC%E3%80%81TGS%E3%80%81TGT\"><span class=\"toc-text\">DC、AD、AS、KDC、TGS、TGT</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%9F%E8%AE%A4%E8%AF%81%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">域认证方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A5%A8%E6%8D%AE%E4%BC%A0%E9%80%92%E6%94%BB%E5%87%BB\"><span class=\"toc-text\">票据传递攻击</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%92%8C%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">黄金票据和白银票据的区别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB%E5%92%8C%E9%9D%9E%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E6%94%BB%E5%87%BB\"><span class=\"toc-text\">约束委派攻击和非约束委派攻击</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#windows%E5%AD%98%E6%94%BEhash%E7%9A%84%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">windows存放hash的文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#kdc%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3\"><span class=\"toc-text\">kdc默认端口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#pth-hash%E4%BC%A0%E9%80%92%E7%94%A8%E5%93%AA%E4%B8%AA%E7%AB%AF%E5%8F%A3\"><span class=\"toc-text\">pth hash传递用哪个端口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E5%9F%9F%E5%86%85%E6%B8%97%E9%80%8F%E6%94%BB%E5%87%BB\"><span class=\"toc-text\">关于域内渗透攻击</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%A0%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84%E9%9A%90%E8%94%BD%E9%9A%A7%E9%81%93%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">你最常用的隐蔽隧道是什么？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%90%91%E8%BF%9E%E6%8E%A5%E5%92%8C%E5%8F%8D%E5%90%91%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">正向连接和反向连接</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F%E5%88%A9%E7%94%A8%E5%9C%BA%E6%99%AF%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B7%AE%E5%BC%82%EF%BC%9F\"><span class=\"toc-text\">正向代理与反向代理的区别？利用场景有哪些差异？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E5%9F%9F%E6%8E%A7%E6%9D%83%E9%99%90%E7%9A%84%E5%87%A0%E7%A7%8D%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">获取域控权限的几种思路</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#S4uself%E4%B8%8Es4yproxy%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">S4uself与s4yproxy是什么？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E4%BD%9C%E7%BB%84%E4%B8%8E%E5%9F%9F%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">工作组与域的区别？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E5%9F%9F%E6%8E%A7%EF%BC%9F\"><span class=\"toc-text\">如何快速定位域控？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E6%9F%A5%E6%89%BE%E5%8F%8C%E7%BD%91%E5%8D%A1%E6%9C%BA%E5%99%A8%EF%BC%9F\"><span class=\"toc-text\">如何查找双网卡机器？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8F%90%E6%9D%83%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">服务器提权思路</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">权限维持思路</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%A8%E9%A9%AC%E5%85%8D%E6%9D%80\"><span class=\"toc-text\">木马免杀</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E5%85%8D%E6%9D%80\"><span class=\"toc-text\">静态文件免杀</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E8%A1%8C%E4%B8%BA%E5%85%8D%E6%9D%80\"><span class=\"toc-text\">动态行为免杀</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%BA%AF%E6%BA%90%E5%8F%8D%E5%88%B6\"><span class=\"toc-text\">溯源反制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">基本步骤</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%94%BB%E5%87%BB%E6%BA%90%E6%8D%95%E8%8E%B7\"><span class=\"toc-text\">攻击源捕获</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%9F%E5%89%8D%E7%BD%AE%E6%BA%AF%E6%BA%90\"><span class=\"toc-text\">域前置溯源</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CDN%E6%BA%AF%E6%BA%90\"><span class=\"toc-text\">CDN溯源</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%AE%9A%E5%90%91%E6%8A%80%E6%9C%AF%E9%9A%90%E8%97%8FC2\"><span class=\"toc-text\">重定向技术隐藏C2</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E4%BA%8E%E4%BA%91c2%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8F%8D%E5%88%B6\"><span class=\"toc-text\">对于云c2技术的反制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%93%9D%E9%98%9F%E6%BA%AF%E6%BA%90%E7%BA%A2%E9%98%9F%E7%9A%84%E7%BB%8F%E5%8E%86\"><span class=\"toc-text\">蓝队溯源红队的经历</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%BA%A2%E9%98%9F%E8%A2%AB%E5%8F%8D%E6%9D%80%E7%9A%84%E5%A7%BF%E5%8A%BF\"><span class=\"toc-text\">常见红队被反杀的姿势</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%88%B6%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E7%9A%84%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">反制红队基础设施的操作</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#java%E5%86%85%E5%AD%98%E9%A9%AC\"><span class=\"toc-text\">java内存马</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E9%A9%AC%E7%9A%84%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">内存马的分类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#agent%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC%E5%87%BA%E7%8E%B0%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%BD%A2%E5%BC%8F-%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">agent型内存马出现的两种形式(原理)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#filter%E5%86%85%E5%AD%98%E9%A9%AC\"><span class=\"toc-text\">filter内存马</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#filter%E5%86%85%E5%AD%98%E9%A9%AC%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">filter内存马原理</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#filter%E5%86%85%E5%AD%98%E9%A9%AC%E7%9A%84%E5%88%A4%E5%88%AB%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">filter内存马的判别思路</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#java%E5%86%85%E5%AD%98%E9%A9%AC%E6%8E%92%E6%9F%A5%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">java内存马排查思路</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E9%A9%AC%E7%9A%84%E5%8E%9F%E7%90%86-amp-%E5%88%A4%E6%96%AD%E5%92%8C%E6%B8%85%E9%99%A4\"><span class=\"toc-text\">内存马的原理&amp;判断和清除</span></a></li></ol></li></ol></li></ol>","author":{"name":"南瓜の无名","slug":"blog-author","avatar":"../picture/head_01.jpg","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"天眼&NGSOC告警分析","uid":"bc3ebb8ae7699a64039d8253e84d74dc","slug":"37_AA_天眼&NGSOC告警分析","date":"2023-08-25T12:30:34.000Z","updated":"2024-11-14T05:51:58.484Z","comments":true,"path":"api/articles/37_AA_天眼&NGSOC告警分析.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/37.jpg","text":"天眼&amp;NGSOC告警分析天眼使用指南&lt; 分析平台，流量传感器，文件威胁鉴定器 &gt; 新一代安全感知系统：检测，溯源，响应 云端威胁情报： 文件威胁鉴定器静态检测，动态检测 分析平台威胁感知，调查分析，场景化分析 流量传感器入侵攻击检测，威胁情报匹配，文件还原，数...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"护网","slug":"护网","count":3,"path":"api/categories/护网.json"}],"tags":[{"name":"奇安信","slug":"奇安信","count":1,"path":"api/tags/奇安信.json"},{"name":"天眼","slug":"天眼","count":1,"path":"api/tags/天眼.json"},{"name":"护网","slug":"护网","count":3,"path":"api/tags/护网.json"}],"author":{"name":"南瓜の无名","slug":"blog-author","avatar":"../picture/head_01.jpg","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},"next_post":{"title":"sql注入从零到一","uid":"36e7a6d4a5aae3b4367acd589247ef71","slug":"39_AA_知识体系_sql注入从零到一","date":"2023-08-25T12:30:34.000Z","updated":"2024-11-14T05:49:38.458Z","comments":true,"path":"api/articles/39_AA_知识体系_sql注入从零到一.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/39.jpg","text":"sql注入从零到一 仅以此篇，回顾sql注入从零到一的时光。 这里只研究了mysql数据库。 联合注入(union)sql注入的起点(sqli-labs 1~4)根据报错信息判断闭合最开始学习sql注入的本质，其实就是1 or 1&#x3D;1 。 这里我们以sqli-labs第...","link":"","photos":[],"count_time":{"symbolsCount":"8.9k","symbolsTime":"8 mins."},"categories":[{"name":"知识体系","slug":"知识体系","count":4,"path":"api/categories/知识体系.json"}],"tags":[{"name":"sql注入","slug":"sql注入","count":1,"path":"api/tags/sql注入.json"}],"author":{"name":"南瓜の无名","slug":"blog-author","avatar":"../picture/head_01.jpg","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}