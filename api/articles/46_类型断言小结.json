{"title":"golang类型断言","uid":"ea1500fadfd4be53ea413e9034991c98","slug":"46_类型断言小结","date":"2024-05-31T12:30:34.000Z","updated":"2024-11-19T08:50:13.551Z","comments":true,"path":"api/articles/46_类型断言小结.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/46.jpg","content":"<h3 id=\"什么是类型断言\"><a href=\"#什么是类型断言\" class=\"headerlink\" title=\"什么是类型断言\"></a>什么是类型断言</h3><p>在Go语言中，类型断言（Type Assertion）是一种检查接口值中实际存储的值的类型的方法。接口值由两部分组成：类型和值。当有一个接口类型的变量时，这个变量实际上存储了一个值和一个指向值的类型的指针。断言可以用来检查接口变量中存储的具体类型，并且提取出这个值。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">var i interface&#123;&#125; &#x3D; &quot;hello&quot;\n    &#x2F;&#x2F; 直接断言\n    s :&#x3D; i.(string) &#x2F;&#x2F; 如果i不是string类型，这里会panic\n    fmt.Println(s)</code></pre>\n\n<p>为了防止直接断言的失败导致panic的发生，我们可以在断言前进行一定的判断，由此产生类型断言，除了类型检查，也可以配合switch语句进行类型判断。</p>\n<h3 id=\"类型断言的基本语法\"><a href=\"#类型断言的基本语法\" class=\"headerlink\" title=\"类型断言的基本语法\"></a>类型断言的基本语法</h3><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">value, ok :&#x3D; x.(T)</code></pre>\n\n<p><code>x</code> 是一个接口类型的变量，<code>T</code> 是一个断言的目标类型。如果 <code>x</code> 包含 <code>T</code> 类型的值，那么 <code>value</code> 将是 <code>x</code> 中的 <code>T</code> 类型的值，<code>ok</code> 将是 <code>true</code>。如果 <code>x</code> 不包含 <code>T</code> 类型的值，<code>ok</code> 将是 <code>false</code>，<code>value</code> 将是 <code>T</code> 类型的零值，并且不会引发运行时错误。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>类型断言的必要条件是x是接口类型,非接口类型的x不能做类型断言</p></blockquote>\n<h3 id=\"断言的简单示例\"><a href=\"#断言的简单示例\" class=\"headerlink\" title=\"断言的简单示例\"></a>断言的简单示例</h3><h5 id=\"示例一\"><a href=\"#示例一\" class=\"headerlink\" title=\"示例一\"></a>示例一</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n    var i interface&#123;&#125; &#x3D; &quot;hello&quot;\n\n    &#x2F;&#x2F; 断言 i 是否包含字符串类型的值\n    if str, ok :&#x3D; i.(string); ok &#123;\n        fmt.Println(&quot;i contains a string:&quot;, str)\n    &#125; else &#123;\n        fmt.Println(&quot;i does not contain a string&quot;)\n    &#125;\n&#125;</code></pre>\n\n<p>在这个例子中，<code>i</code> 是一个空接口，它实际上包含了一个字符串。我们使用断言来检查 <code>i</code> 是否包含一个字符串类型的值。如果包含，<code>str</code> 将是字符串 “hello”，而 <code>ok</code> 将是 <code>true</code>。</p>\n<h5 id=\"示例二\"><a href=\"#示例二\" class=\"headerlink\" title=\"示例二\"></a>示例二</h5><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\npackage main\n\nimport (\n    &quot;fmt&quot;\n)\n\n&#x2F;&#x2F; 定义一个处理不同类型断言的函数\nfunc handleAnything(i interface&#123;&#125;) &#123;\n    &#x2F;&#x2F; 使用类型断言来检查i的类型\n    switch v :&#x3D; i.(type) &#123;\n    case string:\n        fmt.Printf(&quot;i is a string: %s\\n&quot;, v)\n    case int:\n        fmt.Printf(&quot;i is an int: %d\\n&quot;, v)\n    case bool:\n        fmt.Printf(&quot;i is a bool: %t\\n&quot;, v)\n    default:\n        fmt.Println(&quot;i is of a different type&quot;)\n    &#125;\n&#125;\n\nfunc main() &#123;\n    &#x2F;&#x2F; 测试不同类型的值\n    handleAnything(&quot;hello&quot;)    &#x2F;&#x2F; i is a string: hello\n    handleAnything(42)         &#x2F;&#x2F; i is an int: 42\n    handleAnything(true)       &#x2F;&#x2F; i is a bool: true\n    handleAnything(3.14)       &#x2F;&#x2F; i is of a different type\n&#125;</code></pre>\n","feature":false,"text":"什么是类型断言在Go语言中，类型断言（Type Assertion）是一种检查接口值中实际存储的值的类型的方法。接口值由两部分组成：类型和值。当有一个接口类型的变量时，这个变量实际上存储了一个值和一个指向值的类型的指针。断言可以用来检查接口变量中存储的具体类型，并且提取出这个值。...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"Golang","slug":"Golang","count":4,"path":"api/categories/Golang.json"}],"tags":[{"name":"Golang","slug":"Golang","count":4,"path":"api/tags/Golang.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80\"><span class=\"toc-text\">什么是类型断言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">类型断言的基本语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%AD%E8%A8%80%E7%9A%84%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">断言的简单示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%B8%80\"><span class=\"toc-text\">示例一</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BA%8C\"><span class=\"toc-text\">示例二</span></a></li></ol></li></ol></li></ol>","author":{"name":"南瓜の无名","slug":"blog-author","avatar":"../picture/head_01.jpg","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"reflect包与反射学习","uid":"6052701ab24b6fde0600e96535aff7b7","slug":"45_reflect包与反射学习","date":"2024-05-31T12:30:34.000Z","updated":"2024-11-19T08:47:17.715Z","comments":true,"path":"api/articles/45_reflect包与反射学习.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/45.jpg","text":" 推荐: https://segmentfault.com/a/1190000021762599推荐: https://www.bilibili.com/video/BV1FN4y1Z7WS推荐：https://www.mszlu.com/go/reflect/01.html t...","link":"","photos":[],"count_time":{"symbolsCount":"7.9k","symbolsTime":"7 mins."},"categories":[{"name":"Golang","slug":"Golang","count":4,"path":"api/categories/Golang.json"}],"tags":[{"name":"Golang","slug":"Golang","count":4,"path":"api/tags/Golang.json"}],"author":{"name":"南瓜の无名","slug":"blog-author","avatar":"../picture/head_01.jpg","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},"next_post":{"title":"杂项摆烂的小记_进阶篇_05","uid":"a3fa8ac179f7a4b392edba6f23be541f","slug":"35_杂项摆烂小记05","date":"2023-08-25T12:34:34.000Z","updated":"2024-11-14T05:46:47.606Z","comments":true,"path":"api/articles/35_杂项摆烂小记05.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/35.jpg","text":" 这里是攻防世界难度5的题目，不知不觉，也算是勉强能入门了。到这里很多题就有些吃力了，更多的记录一些题目的题解而不是对于知识点的总结。拓展了很多新的知识面，不能浅尝辄止呀，要更进一步！ 新的盐CRC爆破图片宽高 之前写过，但是忘记具体的内容了，重新学习一下。参考：https://...","link":"","photos":[],"count_time":{"symbolsCount":"46k","symbolsTime":"42 mins."},"categories":[{"name":"杂项","slug":"杂项","count":5,"path":"api/categories/杂项.json"}],"tags":[{"name":"杂项","slug":"杂项","count":5,"path":"api/tags/杂项.json"}],"author":{"name":"南瓜の无名","slug":"blog-author","avatar":"../picture/head_01.jpg","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}